#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace MyERPModel	
{
	[Table("dmtt")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	public partial class Dmtt : IDataErrorInfo, INotifyPropertyChanging, INotifyPropertyChanged
	{
		private string _ma_tt;
		[Column("ma_tt", IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_ma_tt")]
		[Required()]
		[Key()]
		public virtual string Ma_Tt
		{
			get
			{
				return this._ma_tt;
			}
			set
			{
				if(this._ma_tt != value)
				{
					this.OnPropertyChanging("Ma_Tt");
					this._ma_tt = value;
					this.OnPropertyChanged("Ma_Tt");
				}
			}
		}
		
		private string _ten_tt;
		[Column("ten_tt", Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_ten_tt")]
		[Required()]
		public virtual string Ten_Tt
		{
			get
			{
				return this._ten_tt;
			}
			set
			{
				if(this._ten_tt != value)
				{
					this.OnPropertyChanging("Ten_Tt");
					this._ten_tt = value;
					this.OnPropertyChanged("Ten_Tt");
				}
			}
		}
		
		private string _ten_tt2;
		[Column("ten_tt2", Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_ten_tt2")]
		[Required()]
		public virtual string Ten_Tt2
		{
			get
			{
				return this._ten_tt2;
			}
			set
			{
				if(this._ten_tt2 != value)
				{
					this.OnPropertyChanging("Ten_Tt2");
					this._ten_tt2 = value;
					this.OnPropertyChanged("Ten_Tt2");
				}
			}
		}
		
		private short _han_tt;
		[Column("han_tt", Length = 0, Scale = 0, SqlType = "int2")]
		[Storage("_han_tt")]
		[Required()]
		public virtual short Han_Tt
		{
			get
			{
				return this._han_tt;
			}
			set
			{
				if(this._han_tt != value)
				{
					this.OnPropertyChanging("Han_Tt");
					this._han_tt = value;
					this.OnPropertyChanged("Han_Tt");
				}
			}
		}
		
		private short _han_tt_gg;
		[Column("han_tt_gg", Length = 0, Scale = 0, SqlType = "int2")]
		[Storage("_han_tt_gg")]
		[Required()]
		public virtual short Han_Tt_Gg
		{
			get
			{
				return this._han_tt_gg;
			}
			set
			{
				if(this._han_tt_gg != value)
				{
					this.OnPropertyChanging("Han_Tt_Gg");
					this._han_tt_gg = value;
					this.OnPropertyChanged("Han_Tt_Gg");
				}
			}
		}
		
		private decimal _pt_gg;
		[Column("pt_gg", Length = 38, Scale = 20, SqlType = "numeric")]
		[Storage("_pt_gg")]
		[Required()]
		public virtual decimal Pt_Gg
		{
			get
			{
				return this._pt_gg;
			}
			set
			{
				if(this._pt_gg != value)
				{
					this.OnPropertyChanging("Pt_Gg");
					this._pt_gg = value;
					this.OnPropertyChanged("Pt_Gg");
				}
			}
		}
		
		private DateTime _date0;
		[Column("date0", Length = 0, Scale = 0, SqlType = "timestamp")]
		[Storage("_date0")]
		[Required()]
		public virtual DateTime Date0
		{
			get
			{
				return this._date0;
			}
			set
			{
				if(this._date0 != value)
				{
					this.OnPropertyChanging("Date0");
					this._date0 = value;
					this.OnPropertyChanged("Date0");
				}
			}
		}
		
		private long _user_id0;
		[Column("user_id0", Length = 0, Scale = 0, SqlType = "int8")]
		[Storage("_user_id0")]
		[Required()]
		public virtual long User_Id0
		{
			get
			{
				return this._user_id0;
			}
			set
			{
				if(this._user_id0 != value)
				{
					this.OnPropertyChanging("User_Id0");
					this._user_id0 = value;
					this.OnPropertyChanged("User_Id0");
				}
			}
		}
		
		private DateTime _date2;
		[Column("date2", Length = 0, Scale = 0, SqlType = "timestamp")]
		[Storage("_date2")]
		[Required()]
		public virtual DateTime Date2
		{
			get
			{
				return this._date2;
			}
			set
			{
				if(this._date2 != value)
				{
					this.OnPropertyChanging("Date2");
					this._date2 = value;
					this.OnPropertyChanged("Date2");
				}
			}
		}
		
		private long _user_id2;
		[Column("user_id2", Length = 0, Scale = 0, SqlType = "int8")]
		[Storage("_user_id2")]
		[Required()]
		public virtual long User_Id2
		{
			get
			{
				return this._user_id2;
			}
			set
			{
				if(this._user_id2 != value)
				{
					this.OnPropertyChanging("User_Id2");
					this._user_id2 = value;
					this.OnPropertyChanged("User_Id2");
				}
			}
		}
		
		private string _status;
		[Column("status", Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_status")]
		[Required()]
		public virtual string Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if(this._status != value)
				{
					this.OnPropertyChanging("Status");
					this._status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		[Transient()]
		private string error = string.Empty;
		[Transient()]
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		[Transient()]
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
