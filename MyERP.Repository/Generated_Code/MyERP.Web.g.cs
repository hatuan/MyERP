//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyERP.DataAccess
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Account' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Account : Entity
    {
        
        private bool _arAp;
        
        private EntityRef<Client> _client;
        
        private Guid _clientId;
        
        private string _code;
        
        private EntityRef<Currency> _currency;
        
        private Nullable<Guid> _currencyId;
        
        private bool _detail;
        
        private Guid _id;
        
        private short _level;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private EntityRef<Organization> _organization;
        
        private Guid _organizationId;
        
        private EntityRef<Account> _parentAccount;
        
        private Nullable<Guid> _parentAccountId;
        
        private DateTime _recCreated;
        
        private Guid _recCreatedById;
        
        private EntityRef<User> _recCreatedByUser;
        
        private DateTime _recModified;
        
        private Guid _recModifiedById;
        
        private EntityRef<User> _recModifiedByUser;
        
        private byte _status;
        
        private AccountStatusType _statusType;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnArApChanging(bool value);
        partial void OnArApChanged();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCurrencyIdChanging(Nullable<Guid> value);
        partial void OnCurrencyIdChanged();
        partial void OnDetailChanging(bool value);
        partial void OnDetailChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLevelChanging(short value);
        partial void OnLevelChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnParentAccountIdChanging(Nullable<Guid> value);
        partial void OnParentAccountIdChanged();
        partial void OnRecCreatedChanging(DateTime value);
        partial void OnRecCreatedChanged();
        partial void OnRecCreatedByIdChanging(Guid value);
        partial void OnRecCreatedByIdChanged();
        partial void OnRecModifiedChanging(DateTime value);
        partial void OnRecModifiedChanged();
        partial void OnRecModifiedByIdChanging(Guid value);
        partial void OnRecModifiedByIdChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(AccountStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Account"/> class.
        /// </summary>
        public Account()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ArAp' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool ArAp
        {
            get
            {
                return this._arAp;
            }
            set
            {
                if ((this._arAp != value))
                {
                    this.OnArApChanging(value);
                    this.RaiseDataMemberChanging("ArAp");
                    this.ValidateProperty("ArAp", value);
                    this._arAp = value;
                    this.RaiseDataMemberChanged("ArAp");
                    this.OnArApChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Account-client-association", "ClientId", "Id")]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    this._client.Entity = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Currency"/> entity.
        /// </summary>
        [Association("Account-currency-association", "CurrencyId", "Id")]
        public Currency Currency
        {
            get
            {
                if ((this._currency == null))
                {
                    this._currency = new EntityRef<Currency>(this, "Currency", this.FilterCurrency);
                }
                return this._currency.Entity;
            }
            set
            {
                Currency previous = this.Currency;
                if ((previous != value))
                {
                    this.ValidateProperty("Currency", value);
                    this._currency.Entity = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> CurrencyId
        {
            get
            {
                return this._currencyId;
            }
            set
            {
                if ((this._currencyId != value))
                {
                    this.OnCurrencyIdChanging(value);
                    this.RaiseDataMemberChanging("CurrencyId");
                    this.ValidateProperty("CurrencyId", value);
                    this._currencyId = value;
                    this.RaiseDataMemberChanged("CurrencyId");
                    this.OnCurrencyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Level' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public short Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    this.OnLevelChanging(value);
                    this.RaiseDataMemberChanging("Level");
                    this.ValidateProperty("Level", value);
                    this._level = value;
                    this.RaiseDataMemberChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Organization"/> entity.
        /// </summary>
        [Association("Account-organization-association", "OrganizationId", "Id")]
        public Organization Organization
        {
            get
            {
                if ((this._organization == null))
                {
                    this._organization = new EntityRef<Organization>(this, "Organization", this.FilterOrganization);
                }
                return this._organization.Entity;
            }
            set
            {
                Organization previous = this.Organization;
                if ((previous != value))
                {
                    this.ValidateProperty("Organization", value);
                    this._organization.Entity = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Account"/> entity.
        /// </summary>
        [Association("Account-account-parent-association", "ParentAccountId", "Id")]
        public Account ParentAccount
        {
            get
            {
                if ((this._parentAccount == null))
                {
                    this._parentAccount = new EntityRef<Account>(this, "ParentAccount", this.FilterParentAccount);
                }
                return this._parentAccount.Entity;
            }
            set
            {
                Account previous = this.ParentAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentAccount", value);
                    this._parentAccount.Entity = value;
                    this.RaisePropertyChanged("ParentAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentAccountId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> ParentAccountId
        {
            get
            {
                return this._parentAccountId;
            }
            set
            {
                if ((this._parentAccountId != value))
                {
                    this.OnParentAccountIdChanging(value);
                    this.RaiseDataMemberChanging("ParentAccountId");
                    this.ValidateProperty("ParentAccountId", value);
                    this._parentAccountId = value;
                    this.RaiseDataMemberChanged("ParentAccountId");
                    this.OnParentAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecCreated
        {
            get
            {
                return this._recCreated;
            }
            set
            {
                if ((this._recCreated != value))
                {
                    this.OnRecCreatedChanging(value);
                    this.RaiseDataMemberChanging("RecCreated");
                    this.ValidateProperty("RecCreated", value);
                    this._recCreated = value;
                    this.RaiseDataMemberChanged("RecCreated");
                    this.OnRecCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreatedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecCreatedById
        {
            get
            {
                return this._recCreatedById;
            }
            set
            {
                if ((this._recCreatedById != value))
                {
                    this.OnRecCreatedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecCreatedById");
                    this.ValidateProperty("RecCreatedById", value);
                    this._recCreatedById = value;
                    this.RaiseDataMemberChanged("RecCreatedById");
                    this.OnRecCreatedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Account-user-created-association", "RecCreatedById", "Id")]
        public User RecCreatedByUser
        {
            get
            {
                if ((this._recCreatedByUser == null))
                {
                    this._recCreatedByUser = new EntityRef<User>(this, "RecCreatedByUser", this.FilterRecCreatedByUser);
                }
                return this._recCreatedByUser.Entity;
            }
            set
            {
                User previous = this.RecCreatedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecCreatedByUser", value);
                    this._recCreatedByUser.Entity = value;
                    this.RaisePropertyChanged("RecCreatedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModified' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecModified
        {
            get
            {
                return this._recModified;
            }
            set
            {
                if ((this._recModified != value))
                {
                    this.OnRecModifiedChanging(value);
                    this.RaiseDataMemberChanging("RecModified");
                    this.ValidateProperty("RecModified", value);
                    this._recModified = value;
                    this.RaiseDataMemberChanged("RecModified");
                    this.OnRecModifiedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModifiedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecModifiedById
        {
            get
            {
                return this._recModifiedById;
            }
            set
            {
                if ((this._recModifiedById != value))
                {
                    this.OnRecModifiedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecModifiedById");
                    this.ValidateProperty("RecModifiedById", value);
                    this._recModifiedById = value;
                    this.RaiseDataMemberChanged("RecModifiedById");
                    this.OnRecModifiedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Account-user-modified-association", "RecModifiedById", "Id")]
        public User RecModifiedByUser
        {
            get
            {
                if ((this._recModifiedByUser == null))
                {
                    this._recModifiedByUser = new EntityRef<User>(this, "RecModifiedByUser", this.FilterRecModifiedByUser);
                }
                return this._recModifiedByUser.Entity;
            }
            set
            {
                User previous = this.RecModifiedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecModifiedByUser", value);
                    this._recModifiedByUser.Entity = value;
                    this.RaisePropertyChanged("RecModifiedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public AccountStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterCurrency(Currency entity)
        {
            return (entity.Id == this.CurrencyId);
        }
        
        private bool FilterOrganization(Organization entity)
        {
            return (entity.Id == this.OrganizationId);
        }
        
        private bool FilterParentAccount(Account entity)
        {
            return (entity.Id == this.ParentAccountId);
        }
        
        private bool FilterRecCreatedByUser(User entity)
        {
            return (entity.Id == this.RecCreatedById);
        }
        
        private bool FilterRecModifiedByUser(User entity)
        {
            return (entity.Id == this.RecModifiedById);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum AccountStatusType
    {
        
        Inactive = 0,
        
        Active = 1,
    }
    
    /// <summary>
    /// The 'BusinessPartner' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class BusinessPartner : Entity
    {
        
        private string _address;
        
        private decimal _amountLimit;
        
        private string _businessPartnerGroupCode1;
        
        private string _businessPartnerGroupCode2;
        
        private string _businessPartnerGroupCode3;
        
        private Guid _clientId;
        
        private string _code;
        
        private string _comment;
        
        private string _contactName;
        
        private decimal _creditLimit;
        
        private Guid _customerAccountId;
        
        private Guid _employeeAccountId;
        
        private string _fax;
        
        private string _homePage;
        
        private bool _isCustomer;
        
        private bool _isEmployee;
        
        private bool _isVendor;
        
        private string _mail;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private Guid _paymentTermId;
        
        private DateTime _recCreated;
        
        private Guid _recCreatedBy;
        
        private DateTime _recModified;
        
        private Guid _recModifiedBy;
        
        private Guid _rowguid;
        
        private byte _status;
        
        private string _telephone;
        
        private string _vatCode;
        
        private Guid _vendorAccountId;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAmountLimitChanging(decimal value);
        partial void OnAmountLimitChanged();
        partial void OnBusinessPartnerGroupCode1Changing(string value);
        partial void OnBusinessPartnerGroupCode1Changed();
        partial void OnBusinessPartnerGroupCode2Changing(string value);
        partial void OnBusinessPartnerGroupCode2Changed();
        partial void OnBusinessPartnerGroupCode3Changing(string value);
        partial void OnBusinessPartnerGroupCode3Changed();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnContactNameChanging(string value);
        partial void OnContactNameChanged();
        partial void OnCreditLimitChanging(decimal value);
        partial void OnCreditLimitChanged();
        partial void OnCustomerAccountIdChanging(Guid value);
        partial void OnCustomerAccountIdChanged();
        partial void OnEmployeeAccountIdChanging(Guid value);
        partial void OnEmployeeAccountIdChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnHomePageChanging(string value);
        partial void OnHomePageChanged();
        partial void OnIsCustomerChanging(bool value);
        partial void OnIsCustomerChanged();
        partial void OnIsEmployeeChanging(bool value);
        partial void OnIsEmployeeChanged();
        partial void OnIsVendorChanging(bool value);
        partial void OnIsVendorChanged();
        partial void OnMailChanging(string value);
        partial void OnMailChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnPaymentTermIdChanging(Guid value);
        partial void OnPaymentTermIdChanged();
        partial void OnRecCreatedChanging(DateTime value);
        partial void OnRecCreatedChanged();
        partial void OnRecCreatedByChanging(Guid value);
        partial void OnRecCreatedByChanged();
        partial void OnRecModifiedChanging(DateTime value);
        partial void OnRecModifiedChanged();
        partial void OnRecModifiedByChanging(Guid value);
        partial void OnRecModifiedByChanged();
        partial void OnRowguidChanging(Guid value);
        partial void OnRowguidChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();
        partial void OnVatCodeChanging(string value);
        partial void OnVatCodeChanged();
        partial void OnVendorAccountIdChanging(Guid value);
        partial void OnVendorAccountIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessPartner"/> class.
        /// </summary>
        public BusinessPartner()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AmountLimit' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal AmountLimit
        {
            get
            {
                return this._amountLimit;
            }
            set
            {
                if ((this._amountLimit != value))
                {
                    this.OnAmountLimitChanging(value);
                    this.RaiseDataMemberChanging("AmountLimit");
                    this.ValidateProperty("AmountLimit", value);
                    this._amountLimit = value;
                    this.RaiseDataMemberChanged("AmountLimit");
                    this.OnAmountLimitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessPartnerGroupCode1' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string BusinessPartnerGroupCode1
        {
            get
            {
                return this._businessPartnerGroupCode1;
            }
            set
            {
                if ((this._businessPartnerGroupCode1 != value))
                {
                    this.OnBusinessPartnerGroupCode1Changing(value);
                    this.RaiseDataMemberChanging("BusinessPartnerGroupCode1");
                    this.ValidateProperty("BusinessPartnerGroupCode1", value);
                    this._businessPartnerGroupCode1 = value;
                    this.RaiseDataMemberChanged("BusinessPartnerGroupCode1");
                    this.OnBusinessPartnerGroupCode1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessPartnerGroupCode2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string BusinessPartnerGroupCode2
        {
            get
            {
                return this._businessPartnerGroupCode2;
            }
            set
            {
                if ((this._businessPartnerGroupCode2 != value))
                {
                    this.OnBusinessPartnerGroupCode2Changing(value);
                    this.RaiseDataMemberChanging("BusinessPartnerGroupCode2");
                    this.ValidateProperty("BusinessPartnerGroupCode2", value);
                    this._businessPartnerGroupCode2 = value;
                    this.RaiseDataMemberChanged("BusinessPartnerGroupCode2");
                    this.OnBusinessPartnerGroupCode2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessPartnerGroupCode3' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string BusinessPartnerGroupCode3
        {
            get
            {
                return this._businessPartnerGroupCode3;
            }
            set
            {
                if ((this._businessPartnerGroupCode3 != value))
                {
                    this.OnBusinessPartnerGroupCode3Changing(value);
                    this.RaiseDataMemberChanging("BusinessPartnerGroupCode3");
                    this.ValidateProperty("BusinessPartnerGroupCode3", value);
                    this._businessPartnerGroupCode3 = value;
                    this.RaiseDataMemberChanged("BusinessPartnerGroupCode3");
                    this.OnBusinessPartnerGroupCode3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactName' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string ContactName
        {
            get
            {
                return this._contactName;
            }
            set
            {
                if ((this._contactName != value))
                {
                    this.OnContactNameChanging(value);
                    this.RaiseDataMemberChanging("ContactName");
                    this.ValidateProperty("ContactName", value);
                    this._contactName = value;
                    this.RaiseDataMemberChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditLimit' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal CreditLimit
        {
            get
            {
                return this._creditLimit;
            }
            set
            {
                if ((this._creditLimit != value))
                {
                    this.OnCreditLimitChanging(value);
                    this.RaiseDataMemberChanging("CreditLimit");
                    this.ValidateProperty("CreditLimit", value);
                    this._creditLimit = value;
                    this.RaiseDataMemberChanged("CreditLimit");
                    this.OnCreditLimitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerAccountId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid CustomerAccountId
        {
            get
            {
                return this._customerAccountId;
            }
            set
            {
                if ((this._customerAccountId != value))
                {
                    this.OnCustomerAccountIdChanging(value);
                    this.RaiseDataMemberChanging("CustomerAccountId");
                    this.ValidateProperty("CustomerAccountId", value);
                    this._customerAccountId = value;
                    this.RaiseDataMemberChanged("CustomerAccountId");
                    this.OnCustomerAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeAccountId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid EmployeeAccountId
        {
            get
            {
                return this._employeeAccountId;
            }
            set
            {
                if ((this._employeeAccountId != value))
                {
                    this.OnEmployeeAccountIdChanging(value);
                    this.RaiseDataMemberChanging("EmployeeAccountId");
                    this.ValidateProperty("EmployeeAccountId", value);
                    this._employeeAccountId = value;
                    this.RaiseDataMemberChanged("EmployeeAccountId");
                    this.OnEmployeeAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Fax' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HomePage' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string HomePage
        {
            get
            {
                return this._homePage;
            }
            set
            {
                if ((this._homePage != value))
                {
                    this.OnHomePageChanging(value);
                    this.RaiseDataMemberChanging("HomePage");
                    this.ValidateProperty("HomePage", value);
                    this._homePage = value;
                    this.RaiseDataMemberChanged("HomePage");
                    this.OnHomePageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsCustomer' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsCustomer
        {
            get
            {
                return this._isCustomer;
            }
            set
            {
                if ((this._isCustomer != value))
                {
                    this.OnIsCustomerChanging(value);
                    this.RaiseDataMemberChanging("IsCustomer");
                    this.ValidateProperty("IsCustomer", value);
                    this._isCustomer = value;
                    this.RaiseDataMemberChanged("IsCustomer");
                    this.OnIsCustomerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsEmployee' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsEmployee
        {
            get
            {
                return this._isEmployee;
            }
            set
            {
                if ((this._isEmployee != value))
                {
                    this.OnIsEmployeeChanging(value);
                    this.RaiseDataMemberChanging("IsEmployee");
                    this.ValidateProperty("IsEmployee", value);
                    this._isEmployee = value;
                    this.RaiseDataMemberChanged("IsEmployee");
                    this.OnIsEmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsVendor' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsVendor
        {
            get
            {
                return this._isVendor;
            }
            set
            {
                if ((this._isVendor != value))
                {
                    this.OnIsVendorChanging(value);
                    this.RaiseDataMemberChanging("IsVendor");
                    this.ValidateProperty("IsVendor", value);
                    this._isVendor = value;
                    this.RaiseDataMemberChanged("IsVendor");
                    this.OnIsVendorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mail' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Mail
        {
            get
            {
                return this._mail;
            }
            set
            {
                if ((this._mail != value))
                {
                    this.OnMailChanging(value);
                    this.RaiseDataMemberChanging("Mail");
                    this.ValidateProperty("Mail", value);
                    this._mail = value;
                    this.RaiseDataMemberChanged("Mail");
                    this.OnMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PaymentTermId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid PaymentTermId
        {
            get
            {
                return this._paymentTermId;
            }
            set
            {
                if ((this._paymentTermId != value))
                {
                    this.OnPaymentTermIdChanging(value);
                    this.RaiseDataMemberChanging("PaymentTermId");
                    this.ValidateProperty("PaymentTermId", value);
                    this._paymentTermId = value;
                    this.RaiseDataMemberChanged("PaymentTermId");
                    this.OnPaymentTermIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecCreated
        {
            get
            {
                return this._recCreated;
            }
            set
            {
                if ((this._recCreated != value))
                {
                    this.OnRecCreatedChanging(value);
                    this.RaiseDataMemberChanging("RecCreated");
                    this.ValidateProperty("RecCreated", value);
                    this._recCreated = value;
                    this.RaiseDataMemberChanged("RecCreated");
                    this.OnRecCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreatedBy' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecCreatedBy
        {
            get
            {
                return this._recCreatedBy;
            }
            set
            {
                if ((this._recCreatedBy != value))
                {
                    this.OnRecCreatedByChanging(value);
                    this.RaiseDataMemberChanging("RecCreatedBy");
                    this.ValidateProperty("RecCreatedBy", value);
                    this._recCreatedBy = value;
                    this.RaiseDataMemberChanged("RecCreatedBy");
                    this.OnRecCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModified' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecModified
        {
            get
            {
                return this._recModified;
            }
            set
            {
                if ((this._recModified != value))
                {
                    this.OnRecModifiedChanging(value);
                    this.RaiseDataMemberChanging("RecModified");
                    this.ValidateProperty("RecModified", value);
                    this._recModified = value;
                    this.RaiseDataMemberChanged("RecModified");
                    this.OnRecModifiedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModifiedBy' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecModifiedBy
        {
            get
            {
                return this._recModifiedBy;
            }
            set
            {
                if ((this._recModifiedBy != value))
                {
                    this.OnRecModifiedByChanging(value);
                    this.RaiseDataMemberChanging("RecModifiedBy");
                    this.ValidateProperty("RecModifiedBy", value);
                    this._recModifiedBy = value;
                    this.RaiseDataMemberChanged("RecModifiedBy");
                    this.OnRecModifiedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rowguid' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnRowguidChanging(value);
                    this.RaiseDataMemberChanging("Rowguid");
                    this.ValidateProperty("Rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("Rowguid");
                    this.OnRowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telephone' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Telephone
        {
            get
            {
                return this._telephone;
            }
            set
            {
                if ((this._telephone != value))
                {
                    this.OnTelephoneChanging(value);
                    this.RaiseDataMemberChanging("Telephone");
                    this.ValidateProperty("Telephone", value);
                    this._telephone = value;
                    this.RaiseDataMemberChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VatCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string VatCode
        {
            get
            {
                return this._vatCode;
            }
            set
            {
                if ((this._vatCode != value))
                {
                    this.OnVatCodeChanging(value);
                    this.RaiseDataMemberChanging("VatCode");
                    this.ValidateProperty("VatCode", value);
                    this._vatCode = value;
                    this.RaiseDataMemberChanged("VatCode");
                    this.OnVatCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorAccountId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid VendorAccountId
        {
            get
            {
                return this._vendorAccountId;
            }
            set
            {
                if ((this._vendorAccountId != value))
                {
                    this.OnVendorAccountIdChanging(value);
                    this.RaiseDataMemberChanging("VendorAccountId");
                    this.ValidateProperty("VendorAccountId", value);
                    this._vendorAccountId = value;
                    this.RaiseDataMemberChanged("VendorAccountId");
                    this.OnVendorAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'BusinessPartnerGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class BusinessPartnerGroup : Entity
    {
        
        private Guid _clientId;
        
        private string _code;
        
        private DateTime _date0;
        
        private DateTime _date2;
        
        private short _level;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private Guid _rowguid;
        
        private byte _status;
        
        private Guid _userId0;
        
        private Guid _userId2;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDate0Changing(DateTime value);
        partial void OnDate0Changed();
        partial void OnDate2Changing(DateTime value);
        partial void OnDate2Changed();
        partial void OnLevelChanging(short value);
        partial void OnLevelChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnRowguidChanging(Guid value);
        partial void OnRowguidChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnUserId0Changing(Guid value);
        partial void OnUserId0Changed();
        partial void OnUserId2Changing(Guid value);
        partial void OnUserId2Changed();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessPartnerGroup"/> class.
        /// </summary>
        public BusinessPartnerGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date0' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date0
        {
            get
            {
                return this._date0;
            }
            set
            {
                if ((this._date0 != value))
                {
                    this.OnDate0Changing(value);
                    this.RaiseDataMemberChanging("Date0");
                    this.ValidateProperty("Date0", value);
                    this._date0 = value;
                    this.RaiseDataMemberChanged("Date0");
                    this.OnDate0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date2
        {
            get
            {
                return this._date2;
            }
            set
            {
                if ((this._date2 != value))
                {
                    this.OnDate2Changing(value);
                    this.RaiseDataMemberChanging("Date2");
                    this.ValidateProperty("Date2", value);
                    this._date2 = value;
                    this.RaiseDataMemberChanged("Date2");
                    this.OnDate2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Level' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public short Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    this.OnLevelChanging(value);
                    this.RaiseDataMemberChanging("Level");
                    this.ValidateProperty("Level", value);
                    this._level = value;
                    this.RaiseDataMemberChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rowguid' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnRowguidChanging(value);
                    this.RaiseDataMemberChanging("Rowguid");
                    this.ValidateProperty("Rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("Rowguid");
                    this.OnRowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId0' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserId0
        {
            get
            {
                return this._userId0;
            }
            set
            {
                if ((this._userId0 != value))
                {
                    this.OnUserId0Changing(value);
                    this.RaiseDataMemberChanging("UserId0");
                    this.ValidateProperty("UserId0", value);
                    this._userId0 = value;
                    this.RaiseDataMemberChanged("UserId0");
                    this.OnUserId0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserId2
        {
            get
            {
                return this._userId2;
            }
            set
            {
                if ((this._userId2 != value))
                {
                    this.OnUserId2Changing(value);
                    this.RaiseDataMemberChanging("UserId2");
                    this.ValidateProperty("UserId2", value);
                    this._userId2 = value;
                    this.RaiseDataMemberChanged("UserId2");
                    this.OnUserId2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Client' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Client : Entity
    {
        
        private Guid _id;
        
        private bool _isActivated;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private DateTime _recCreated;
        
        private Guid _recCreatedById;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIsActivatedChanging(bool value);
        partial void OnIsActivatedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnRecCreatedChanging(DateTime value);
        partial void OnRecCreatedChanged();
        partial void OnRecCreatedByIdChanging(Guid value);
        partial void OnRecCreatedByIdChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Client"/> class.
        /// </summary>
        public Client()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActivated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsActivated
        {
            get
            {
                return this._isActivated;
            }
            set
            {
                if ((this._isActivated != value))
                {
                    this.OnIsActivatedChanging(value);
                    this.RaiseDataMemberChanging("IsActivated");
                    this.ValidateProperty("IsActivated", value);
                    this._isActivated = value;
                    this.RaiseDataMemberChanged("IsActivated");
                    this.OnIsActivatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecCreated
        {
            get
            {
                return this._recCreated;
            }
            set
            {
                if ((this._recCreated != value))
                {
                    this.OnRecCreatedChanging(value);
                    this.RaiseDataMemberChanging("RecCreated");
                    this.ValidateProperty("RecCreated", value);
                    this._recCreated = value;
                    this.RaiseDataMemberChanged("RecCreated");
                    this.OnRecCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreatedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecCreatedById
        {
            get
            {
                return this._recCreatedById;
            }
            set
            {
                if ((this._recCreatedById != value))
                {
                    this.OnRecCreatedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecCreatedById");
                    this.ValidateProperty("RecCreatedById", value);
                    this._recCreatedById = value;
                    this.RaiseDataMemberChanged("RecCreatedById");
                    this.OnRecCreatedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Currency' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Currency : Entity
    {
        
        private EntityRef<Client> _client;
        
        private Guid _clientId;
        
        private string _code;
        
        private Guid _id;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private EntityRef<Organization> _organization;
        
        private Guid _organizationId;
        
        private DateTime _recCreated;
        
        private Guid _recCreatedById;
        
        private EntityRef<User> _recCreatedByUser;
        
        private DateTime _recModified;
        
        private Guid _recModifiedById;
        
        private EntityRef<User> _recModifiedByUser;
        
        private byte _status;
        
        private CurrencyStatusType _statusType;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnRecCreatedChanging(DateTime value);
        partial void OnRecCreatedChanged();
        partial void OnRecCreatedByIdChanging(Guid value);
        partial void OnRecCreatedByIdChanged();
        partial void OnRecModifiedChanging(DateTime value);
        partial void OnRecModifiedChanged();
        partial void OnRecModifiedByIdChanging(Guid value);
        partial void OnRecModifiedByIdChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(CurrencyStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency"/> class.
        /// </summary>
        public Currency()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Currency-client-association", "ClientId", "Id")]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    this._client.Entity = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Organization"/> entity.
        /// </summary>
        [Association("Currency-organization-association", "OrganizationId", "Id")]
        public Organization Organization
        {
            get
            {
                if ((this._organization == null))
                {
                    this._organization = new EntityRef<Organization>(this, "Organization", this.FilterOrganization);
                }
                return this._organization.Entity;
            }
            set
            {
                Organization previous = this.Organization;
                if ((previous != value))
                {
                    this.ValidateProperty("Organization", value);
                    this._organization.Entity = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecCreated
        {
            get
            {
                return this._recCreated;
            }
            set
            {
                if ((this._recCreated != value))
                {
                    this.OnRecCreatedChanging(value);
                    this.RaiseDataMemberChanging("RecCreated");
                    this.ValidateProperty("RecCreated", value);
                    this._recCreated = value;
                    this.RaiseDataMemberChanged("RecCreated");
                    this.OnRecCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreatedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecCreatedById
        {
            get
            {
                return this._recCreatedById;
            }
            set
            {
                if ((this._recCreatedById != value))
                {
                    this.OnRecCreatedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecCreatedById");
                    this.ValidateProperty("RecCreatedById", value);
                    this._recCreatedById = value;
                    this.RaiseDataMemberChanged("RecCreatedById");
                    this.OnRecCreatedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Account-user-created-association", "RecCreatedById", "Id")]
        public User RecCreatedByUser
        {
            get
            {
                if ((this._recCreatedByUser == null))
                {
                    this._recCreatedByUser = new EntityRef<User>(this, "RecCreatedByUser", this.FilterRecCreatedByUser);
                }
                return this._recCreatedByUser.Entity;
            }
            set
            {
                User previous = this.RecCreatedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecCreatedByUser", value);
                    this._recCreatedByUser.Entity = value;
                    this.RaisePropertyChanged("RecCreatedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModified' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecModified
        {
            get
            {
                return this._recModified;
            }
            set
            {
                if ((this._recModified != value))
                {
                    this.OnRecModifiedChanging(value);
                    this.RaiseDataMemberChanging("RecModified");
                    this.ValidateProperty("RecModified", value);
                    this._recModified = value;
                    this.RaiseDataMemberChanged("RecModified");
                    this.OnRecModifiedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModifiedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecModifiedById
        {
            get
            {
                return this._recModifiedById;
            }
            set
            {
                if ((this._recModifiedById != value))
                {
                    this.OnRecModifiedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecModifiedById");
                    this.ValidateProperty("RecModifiedById", value);
                    this._recModifiedById = value;
                    this.RaiseDataMemberChanged("RecModifiedById");
                    this.OnRecModifiedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Account-user-modified-association", "RecModifiedById", "Id")]
        public User RecModifiedByUser
        {
            get
            {
                if ((this._recModifiedByUser == null))
                {
                    this._recModifiedByUser = new EntityRef<User>(this, "RecModifiedByUser", this.FilterRecModifiedByUser);
                }
                return this._recModifiedByUser.Entity;
            }
            set
            {
                User previous = this.RecModifiedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecModifiedByUser", value);
                    this._recModifiedByUser.Entity = value;
                    this.RaisePropertyChanged("RecModifiedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public CurrencyStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterOrganization(Organization entity)
        {
            return (entity.Id == this.OrganizationId);
        }
        
        private bool FilterRecCreatedByUser(User entity)
        {
            return (entity.Id == this.RecCreatedById);
        }
        
        private bool FilterRecModifiedByUser(User entity)
        {
            return (entity.Id == this.RecModifiedById);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum CurrencyStatusType
    {
        
        Inactive = 0,
        
        Active = 1,
    }
    
    /// <summary>
    /// The 'DashboardStats' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class DashboardStats : ComplexObject
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardStats"/> class.
        /// </summary>
        public DashboardStats()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Job' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Job : Entity
    {
        
        private Guid _clientId;
        
        private string _code;
        
        private DateTime _date0;
        
        private DateTime _date2;
        
        private string _ghi_Chu;
        
        private string _ma_Kh;
        
        private Guid _ma_Nt;
        
        private DateTime _ngay_Vv1;
        
        private DateTime _ngay_Vv2;
        
        private string _nh_Vv1;
        
        private string _nh_Vv2;
        
        private string _nh_Vv3;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private byte _status;
        
        private string _ten_Vv;
        
        private string _ten_Vv2;
        
        private decimal _tien;
        
        private decimal _tien_Nt;
        
        private Guid _tk;
        
        private Guid _user_Id0;
        
        private Guid _user_Id2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDate0Changing(DateTime value);
        partial void OnDate0Changed();
        partial void OnDate2Changing(DateTime value);
        partial void OnDate2Changed();
        partial void OnGhi_ChuChanging(string value);
        partial void OnGhi_ChuChanged();
        partial void OnMa_KhChanging(string value);
        partial void OnMa_KhChanged();
        partial void OnMa_NtChanging(Guid value);
        partial void OnMa_NtChanged();
        partial void OnNgay_Vv1Changing(DateTime value);
        partial void OnNgay_Vv1Changed();
        partial void OnNgay_Vv2Changing(DateTime value);
        partial void OnNgay_Vv2Changed();
        partial void OnNh_Vv1Changing(string value);
        partial void OnNh_Vv1Changed();
        partial void OnNh_Vv2Changing(string value);
        partial void OnNh_Vv2Changed();
        partial void OnNh_Vv3Changing(string value);
        partial void OnNh_Vv3Changed();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnTen_VvChanging(string value);
        partial void OnTen_VvChanged();
        partial void OnTen_Vv2Changing(string value);
        partial void OnTen_Vv2Changed();
        partial void OnTienChanging(decimal value);
        partial void OnTienChanged();
        partial void OnTien_NtChanging(decimal value);
        partial void OnTien_NtChanged();
        partial void OnTkChanging(Guid value);
        partial void OnTkChanged();
        partial void OnUser_Id0Changing(Guid value);
        partial void OnUser_Id0Changed();
        partial void OnUser_Id2Changing(Guid value);
        partial void OnUser_Id2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Job"/> class.
        /// </summary>
        public Job()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date0
        {
            get
            {
                return this._date0;
            }
            set
            {
                if ((this._date0 != value))
                {
                    this.OnDate0Changing(value);
                    this.RaiseDataMemberChanging("Date0");
                    this.ValidateProperty("Date0", value);
                    this._date0 = value;
                    this.RaiseDataMemberChanged("Date0");
                    this.OnDate0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date2
        {
            get
            {
                return this._date2;
            }
            set
            {
                if ((this._date2 != value))
                {
                    this.OnDate2Changing(value);
                    this.RaiseDataMemberChanging("Date2");
                    this.ValidateProperty("Date2", value);
                    this._date2 = value;
                    this.RaiseDataMemberChanged("Date2");
                    this.OnDate2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ghi_Chu' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ghi_Chu
        {
            get
            {
                return this._ghi_Chu;
            }
            set
            {
                if ((this._ghi_Chu != value))
                {
                    this.OnGhi_ChuChanging(value);
                    this.RaiseDataMemberChanging("Ghi_Chu");
                    this.ValidateProperty("Ghi_Chu", value);
                    this._ghi_Chu = value;
                    this.RaiseDataMemberChanged("Ghi_Chu");
                    this.OnGhi_ChuChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Kh' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Kh
        {
            get
            {
                return this._ma_Kh;
            }
            set
            {
                if ((this._ma_Kh != value))
                {
                    this.OnMa_KhChanging(value);
                    this.RaiseDataMemberChanging("Ma_Kh");
                    this.ValidateProperty("Ma_Kh", value);
                    this._ma_Kh = value;
                    this.RaiseDataMemberChanged("Ma_Kh");
                    this.OnMa_KhChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Ma_Nt
        {
            get
            {
                return this._ma_Nt;
            }
            set
            {
                if ((this._ma_Nt != value))
                {
                    this.OnMa_NtChanging(value);
                    this.RaiseDataMemberChanging("Ma_Nt");
                    this.ValidateProperty("Ma_Nt", value);
                    this._ma_Nt = value;
                    this.RaiseDataMemberChanged("Ma_Nt");
                    this.OnMa_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Vv1' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Vv1
        {
            get
            {
                return this._ngay_Vv1;
            }
            set
            {
                if ((this._ngay_Vv1 != value))
                {
                    this.OnNgay_Vv1Changing(value);
                    this.RaiseDataMemberChanging("Ngay_Vv1");
                    this.ValidateProperty("Ngay_Vv1", value);
                    this._ngay_Vv1 = value;
                    this.RaiseDataMemberChanged("Ngay_Vv1");
                    this.OnNgay_Vv1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Vv2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Vv2
        {
            get
            {
                return this._ngay_Vv2;
            }
            set
            {
                if ((this._ngay_Vv2 != value))
                {
                    this.OnNgay_Vv2Changing(value);
                    this.RaiseDataMemberChanging("Ngay_Vv2");
                    this.ValidateProperty("Ngay_Vv2", value);
                    this._ngay_Vv2 = value;
                    this.RaiseDataMemberChanged("Ngay_Vv2");
                    this.OnNgay_Vv2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nh_Vv1' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Nh_Vv1
        {
            get
            {
                return this._nh_Vv1;
            }
            set
            {
                if ((this._nh_Vv1 != value))
                {
                    this.OnNh_Vv1Changing(value);
                    this.RaiseDataMemberChanging("Nh_Vv1");
                    this.ValidateProperty("Nh_Vv1", value);
                    this._nh_Vv1 = value;
                    this.RaiseDataMemberChanged("Nh_Vv1");
                    this.OnNh_Vv1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nh_Vv2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Nh_Vv2
        {
            get
            {
                return this._nh_Vv2;
            }
            set
            {
                if ((this._nh_Vv2 != value))
                {
                    this.OnNh_Vv2Changing(value);
                    this.RaiseDataMemberChanging("Nh_Vv2");
                    this.ValidateProperty("Nh_Vv2", value);
                    this._nh_Vv2 = value;
                    this.RaiseDataMemberChanged("Nh_Vv2");
                    this.OnNh_Vv2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nh_Vv3' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Nh_Vv3
        {
            get
            {
                return this._nh_Vv3;
            }
            set
            {
                if ((this._nh_Vv3 != value))
                {
                    this.OnNh_Vv3Changing(value);
                    this.RaiseDataMemberChanging("Nh_Vv3");
                    this.ValidateProperty("Nh_Vv3", value);
                    this._nh_Vv3 = value;
                    this.RaiseDataMemberChanged("Nh_Vv3");
                    this.OnNh_Vv3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ten_Vv' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ten_Vv
        {
            get
            {
                return this._ten_Vv;
            }
            set
            {
                if ((this._ten_Vv != value))
                {
                    this.OnTen_VvChanging(value);
                    this.RaiseDataMemberChanging("Ten_Vv");
                    this.ValidateProperty("Ten_Vv", value);
                    this._ten_Vv = value;
                    this.RaiseDataMemberChanged("Ten_Vv");
                    this.OnTen_VvChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ten_Vv2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ten_Vv2
        {
            get
            {
                return this._ten_Vv2;
            }
            set
            {
                if ((this._ten_Vv2 != value))
                {
                    this.OnTen_Vv2Changing(value);
                    this.RaiseDataMemberChanging("Ten_Vv2");
                    this.ValidateProperty("Ten_Vv2", value);
                    this._ten_Vv2 = value;
                    this.RaiseDataMemberChanged("Ten_Vv2");
                    this.OnTen_Vv2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tien' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Tien
        {
            get
            {
                return this._tien;
            }
            set
            {
                if ((this._tien != value))
                {
                    this.OnTienChanging(value);
                    this.RaiseDataMemberChanging("Tien");
                    this.ValidateProperty("Tien", value);
                    this._tien = value;
                    this.RaiseDataMemberChanged("Tien");
                    this.OnTienChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tien_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Tien_Nt
        {
            get
            {
                return this._tien_Nt;
            }
            set
            {
                if ((this._tien_Nt != value))
                {
                    this.OnTien_NtChanging(value);
                    this.RaiseDataMemberChanging("Tien_Nt");
                    this.ValidateProperty("Tien_Nt", value);
                    this._tien_Nt = value;
                    this.RaiseDataMemberChanged("Tien_Nt");
                    this.OnTien_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tk' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Tk
        {
            get
            {
                return this._tk;
            }
            set
            {
                if ((this._tk != value))
                {
                    this.OnTkChanging(value);
                    this.RaiseDataMemberChanging("Tk");
                    this.ValidateProperty("Tk", value);
                    this._tk = value;
                    this.RaiseDataMemberChanged("Tk");
                    this.OnTkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id0
        {
            get
            {
                return this._user_Id0;
            }
            set
            {
                if ((this._user_Id0 != value))
                {
                    this.OnUser_Id0Changing(value);
                    this.RaiseDataMemberChanging("User_Id0");
                    this.ValidateProperty("User_Id0", value);
                    this._user_Id0 = value;
                    this.RaiseDataMemberChanged("User_Id0");
                    this.OnUser_Id0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id2
        {
            get
            {
                return this._user_Id2;
            }
            set
            {
                if ((this._user_Id2 != value))
                {
                    this.OnUser_Id2Changing(value);
                    this.RaiseDataMemberChanging("User_Id2");
                    this.ValidateProperty("User_Id2", value);
                    this._user_Id2 = value;
                    this.RaiseDataMemberChanged("User_Id2");
                    this.OnUser_Id2Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'JobGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class JobGroup : Entity
    {
        
        private Guid _clientId;
        
        private string _code;
        
        private DateTime _date0;
        
        private DateTime _date2;
        
        private short _loai_Nh;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private byte _status;
        
        private string _ten_Nh;
        
        private string _ten_Nh2;
        
        private Guid _user_Id0;
        
        private Guid _user_Id2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDate0Changing(DateTime value);
        partial void OnDate0Changed();
        partial void OnDate2Changing(DateTime value);
        partial void OnDate2Changed();
        partial void OnLoai_NhChanging(short value);
        partial void OnLoai_NhChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnTen_NhChanging(string value);
        partial void OnTen_NhChanged();
        partial void OnTen_Nh2Changing(string value);
        partial void OnTen_Nh2Changed();
        partial void OnUser_Id0Changing(Guid value);
        partial void OnUser_Id0Changed();
        partial void OnUser_Id2Changing(Guid value);
        partial void OnUser_Id2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JobGroup"/> class.
        /// </summary>
        public JobGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date0
        {
            get
            {
                return this._date0;
            }
            set
            {
                if ((this._date0 != value))
                {
                    this.OnDate0Changing(value);
                    this.RaiseDataMemberChanging("Date0");
                    this.ValidateProperty("Date0", value);
                    this._date0 = value;
                    this.RaiseDataMemberChanged("Date0");
                    this.OnDate0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date2
        {
            get
            {
                return this._date2;
            }
            set
            {
                if ((this._date2 != value))
                {
                    this.OnDate2Changing(value);
                    this.RaiseDataMemberChanging("Date2");
                    this.ValidateProperty("Date2", value);
                    this._date2 = value;
                    this.RaiseDataMemberChanged("Date2");
                    this.OnDate2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Loai_Nh' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short Loai_Nh
        {
            get
            {
                return this._loai_Nh;
            }
            set
            {
                if ((this._loai_Nh != value))
                {
                    this.OnLoai_NhChanging(value);
                    this.RaiseDataMemberChanging("Loai_Nh");
                    this.ValidateProperty("Loai_Nh", value);
                    this._loai_Nh = value;
                    this.RaiseDataMemberChanged("Loai_Nh");
                    this.OnLoai_NhChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ten_Nh' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ten_Nh
        {
            get
            {
                return this._ten_Nh;
            }
            set
            {
                if ((this._ten_Nh != value))
                {
                    this.OnTen_NhChanging(value);
                    this.RaiseDataMemberChanging("Ten_Nh");
                    this.ValidateProperty("Ten_Nh", value);
                    this._ten_Nh = value;
                    this.RaiseDataMemberChanged("Ten_Nh");
                    this.OnTen_NhChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ten_Nh2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ten_Nh2
        {
            get
            {
                return this._ten_Nh2;
            }
            set
            {
                if ((this._ten_Nh2 != value))
                {
                    this.OnTen_Nh2Changing(value);
                    this.RaiseDataMemberChanging("Ten_Nh2");
                    this.ValidateProperty("Ten_Nh2", value);
                    this._ten_Nh2 = value;
                    this.RaiseDataMemberChanged("Ten_Nh2");
                    this.OnTen_Nh2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id0
        {
            get
            {
                return this._user_Id0;
            }
            set
            {
                if ((this._user_Id0 != value))
                {
                    this.OnUser_Id0Changing(value);
                    this.RaiseDataMemberChanging("User_Id0");
                    this.ValidateProperty("User_Id0", value);
                    this._user_Id0 = value;
                    this.RaiseDataMemberChanged("User_Id0");
                    this.OnUser_Id0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id2
        {
            get
            {
                return this._user_Id2;
            }
            set
            {
                if ((this._user_Id2 != value))
                {
                    this.OnUser_Id2Changing(value);
                    this.RaiseDataMemberChanging("User_Id2");
                    this.ValidateProperty("User_Id2", value);
                    this._user_Id2 = value;
                    this.RaiseDataMemberChanged("User_Id2");
                    this.OnUser_Id2Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Module' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Module : Entity
    {
        
        private string _description;
        
        private string _group;
        
        private long _id;
        
        private ModuleName _idAsName;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGroupChanging(string value);
        partial void OnGroupChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnIdAsNameChanging(ModuleName value);
        partial void OnIdAsNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Module"/> class.
        /// </summary>
        public Module()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Group' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Group
        {
            get
            {
                return this._group;
            }
            set
            {
                if ((this._group != value))
                {
                    this.OnGroupChanging(value);
                    this.RaiseDataMemberChanging("Group");
                    this.ValidateProperty("Group", value);
                    this._group = value;
                    this.RaiseDataMemberChanged("Group");
                    this.OnGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdAsName' value.
        /// </summary>
        [DataMember()]
        public ModuleName IdAsName
        {
            get
            {
                return this._idAsName;
            }
            set
            {
                if ((this._idAsName != value))
                {
                    this.OnIdAsNameChanging(value);
                    this.RaiseDataMemberChanging("IdAsName");
                    this.ValidateProperty("IdAsName", value);
                    this._idAsName = value;
                    this.RaiseDataMemberChanged("IdAsName");
                    this.OnIdAsNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum ModuleName
    {
        
        Default = 0,
        
        GeneralLeaderJournals = 1000,
        
        GeneralLeaderReportsAccountActivity = 2000,
        
        GeneralLeaderReportsTrialBalance = 3000,
        
        GeneralLeaderReportsAccountTFormSummary = 4000,
        
        GeneralLeaderReportsTransactionList = 5000,
        
        GeneralLeaderSetupAccountOpeningBalances = 6000,
        
        GeneralLeaderSetupChartOfAccounts = 7000,
        
        GeneralLeaderSetupPeriod = 8000,
        
        CashJournalsReceipt = 10000,
        
        CashJournalsPayment = 11000,
        
        CashReportsBook = 12000,
        
        CashReportsReceiptJournal = 13000,
        
        CashReportsPaymentJournal = 14000,
        
        CashSetupBank = 15000,
    }
    
    /// <summary>
    /// The 'Organization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Organization : Entity
    {
        
        private Guid _clientId;
        
        private string _code;
        
        private Guid _id;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private DateTime _recCreated;
        
        private Guid _recCreatedById;
        
        private EntityRef<User> _recCreatedByUser;
        
        private DateTime _recModified;
        
        private Guid _recModifiedById;
        
        private EntityRef<User> _recModifiedByUser;
        
        private byte _status;
        
        private OrganizationStatusType _statusType;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnRecCreatedChanging(DateTime value);
        partial void OnRecCreatedChanged();
        partial void OnRecCreatedByIdChanging(Guid value);
        partial void OnRecCreatedByIdChanged();
        partial void OnRecModifiedChanging(DateTime value);
        partial void OnRecModifiedChanged();
        partial void OnRecModifiedByIdChanging(Guid value);
        partial void OnRecModifiedByIdChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(OrganizationStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization"/> class.
        /// </summary>
        public Organization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreated' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecCreated
        {
            get
            {
                return this._recCreated;
            }
            set
            {
                if ((this._recCreated != value))
                {
                    this.OnRecCreatedChanging(value);
                    this.RaiseDataMemberChanging("RecCreated");
                    this.ValidateProperty("RecCreated", value);
                    this._recCreated = value;
                    this.RaiseDataMemberChanged("RecCreated");
                    this.OnRecCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecCreatedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecCreatedById
        {
            get
            {
                return this._recCreatedById;
            }
            set
            {
                if ((this._recCreatedById != value))
                {
                    this.OnRecCreatedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecCreatedById");
                    this.ValidateProperty("RecCreatedById", value);
                    this._recCreatedById = value;
                    this.RaiseDataMemberChanged("RecCreatedById");
                    this.OnRecCreatedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Organization-user-created-association", "RecCreatedById", "Id")]
        public User RecCreatedByUser
        {
            get
            {
                if ((this._recCreatedByUser == null))
                {
                    this._recCreatedByUser = new EntityRef<User>(this, "RecCreatedByUser", this.FilterRecCreatedByUser);
                }
                return this._recCreatedByUser.Entity;
            }
            set
            {
                User previous = this.RecCreatedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecCreatedByUser", value);
                    this._recCreatedByUser.Entity = value;
                    this.RaisePropertyChanged("RecCreatedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModified' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime RecModified
        {
            get
            {
                return this._recModified;
            }
            set
            {
                if ((this._recModified != value))
                {
                    this.OnRecModifiedChanging(value);
                    this.RaiseDataMemberChanging("RecModified");
                    this.ValidateProperty("RecModified", value);
                    this._recModified = value;
                    this.RaiseDataMemberChanged("RecModified");
                    this.OnRecModifiedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecModifiedById' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RecModifiedById
        {
            get
            {
                return this._recModifiedById;
            }
            set
            {
                if ((this._recModifiedById != value))
                {
                    this.OnRecModifiedByIdChanging(value);
                    this.RaiseDataMemberChanging("RecModifiedById");
                    this.ValidateProperty("RecModifiedById", value);
                    this._recModifiedById = value;
                    this.RaiseDataMemberChanged("RecModifiedById");
                    this.OnRecModifiedByIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("Organization-user-modified-association", "RecModifiedById", "Id")]
        public User RecModifiedByUser
        {
            get
            {
                if ((this._recModifiedByUser == null))
                {
                    this._recModifiedByUser = new EntityRef<User>(this, "RecModifiedByUser", this.FilterRecModifiedByUser);
                }
                return this._recModifiedByUser.Entity;
            }
            set
            {
                User previous = this.RecModifiedByUser;
                if ((previous != value))
                {
                    this.ValidateProperty("RecModifiedByUser", value);
                    this._recModifiedByUser.Entity = value;
                    this.RaisePropertyChanged("RecModifiedByUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public OrganizationStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        private bool FilterRecCreatedByUser(User entity)
        {
            return (entity.Id == this.RecCreatedById);
        }
        
        private bool FilterRecModifiedByUser(User entity)
        {
            return (entity.Id == this.RecModifiedById);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum OrganizationStatusType
    {
        
        Inactive = 0,
        
        Active = 1,
    }
    
    /// <summary>
    /// The 'PaymentTerm' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class PaymentTerm : Entity
    {
        
        private Guid _clientId;
        
        private string _code;
        
        private DateTime _date0;
        
        private DateTime _date2;
        
        private short _han_Tt;
        
        private short _han_Tt_Gg;
        
        private Guid _id;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private decimal _pt_Gg;
        
        private byte _status;
        
        private Guid _userId0;
        
        private Guid _userId2;
        
        private long _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDate0Changing(DateTime value);
        partial void OnDate0Changed();
        partial void OnDate2Changing(DateTime value);
        partial void OnDate2Changed();
        partial void OnHan_TtChanging(short value);
        partial void OnHan_TtChanged();
        partial void OnHan_Tt_GgChanging(short value);
        partial void OnHan_Tt_GgChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnPt_GgChanging(decimal value);
        partial void OnPt_GgChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnUserId0Changing(Guid value);
        partial void OnUserId0Changed();
        partial void OnUserId2Changing(Guid value);
        partial void OnUserId2Changed();
        partial void OnVersionChanging(long value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTerm"/> class.
        /// </summary>
        public PaymentTerm()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date0' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date0
        {
            get
            {
                return this._date0;
            }
            set
            {
                if ((this._date0 != value))
                {
                    this.OnDate0Changing(value);
                    this.RaiseDataMemberChanging("Date0");
                    this.ValidateProperty("Date0", value);
                    this._date0 = value;
                    this.RaiseDataMemberChanged("Date0");
                    this.OnDate0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date2
        {
            get
            {
                return this._date2;
            }
            set
            {
                if ((this._date2 != value))
                {
                    this.OnDate2Changing(value);
                    this.RaiseDataMemberChanging("Date2");
                    this.ValidateProperty("Date2", value);
                    this._date2 = value;
                    this.RaiseDataMemberChanged("Date2");
                    this.OnDate2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Han_Tt' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public short Han_Tt
        {
            get
            {
                return this._han_Tt;
            }
            set
            {
                if ((this._han_Tt != value))
                {
                    this.OnHan_TtChanging(value);
                    this.RaiseDataMemberChanging("Han_Tt");
                    this.ValidateProperty("Han_Tt", value);
                    this._han_Tt = value;
                    this.RaiseDataMemberChanged("Han_Tt");
                    this.OnHan_TtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Han_Tt_Gg' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public short Han_Tt_Gg
        {
            get
            {
                return this._han_Tt_Gg;
            }
            set
            {
                if ((this._han_Tt_Gg != value))
                {
                    this.OnHan_Tt_GgChanging(value);
                    this.RaiseDataMemberChanging("Han_Tt_Gg");
                    this.ValidateProperty("Han_Tt_Gg", value);
                    this._han_Tt_Gg = value;
                    this.RaiseDataMemberChanged("Han_Tt_Gg");
                    this.OnHan_Tt_GgChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pt_Gg' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Pt_Gg
        {
            get
            {
                return this._pt_Gg;
            }
            set
            {
                if ((this._pt_Gg != value))
                {
                    this.OnPt_GgChanging(value);
                    this.RaiseDataMemberChanging("Pt_Gg");
                    this.ValidateProperty("Pt_Gg", value);
                    this._pt_Gg = value;
                    this.RaiseDataMemberChanged("Pt_Gg");
                    this.OnPt_GgChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId0' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserId0
        {
            get
            {
                return this._userId0;
            }
            set
            {
                if ((this._userId0 != value))
                {
                    this.OnUserId0Changing(value);
                    this.RaiseDataMemberChanging("UserId0");
                    this.ValidateProperty("UserId0", value);
                    this._userId0 = value;
                    this.RaiseDataMemberChanged("UserId0");
                    this.OnUserId0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId2' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserId2
        {
            get
            {
                return this._userId2;
            }
            set
            {
                if ((this._userId2 != value))
                {
                    this.OnUserId2Changing(value);
                    this.RaiseDataMemberChanging("UserId2");
                    this.ValidateProperty("UserId2", value);
                    this._userId2 = value;
                    this.RaiseDataMemberChanged("UserId2");
                    this.OnUserId2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Session' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class Session : Entity
    {
        
        private Guid _clientId;
        
        private bool _expire;
        
        private Guid _id;
        
        private DateTime _lastTime;
        
        private string[] _openAccessGenerated;
        
        private Nullable<Guid> _organizationId;
        
        private Guid _userId;
        
        private Nullable<Guid> _warehouseId;
        
        private Nullable<DateTime> _workingDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnExpireChanging(bool value);
        partial void OnExpireChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLastTimeChanging(DateTime value);
        partial void OnLastTimeChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Nullable<Guid> value);
        partial void OnOrganizationIdChanged();
        partial void OnUserIdChanging(Guid value);
        partial void OnUserIdChanged();
        partial void OnWarehouseIdChanging(Nullable<Guid> value);
        partial void OnWarehouseIdChanged();
        partial void OnWorkingDateChanging(Nullable<DateTime> value);
        partial void OnWorkingDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Session"/> class.
        /// </summary>
        public Session()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Expire' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool Expire
        {
            get
            {
                return this._expire;
            }
            set
            {
                if ((this._expire != value))
                {
                    this.OnExpireChanging(value);
                    this.RaiseDataMemberChanging("Expire");
                    this.ValidateProperty("Expire", value);
                    this._expire = value;
                    this.RaiseDataMemberChanged("Expire");
                    this.OnExpireChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastTime' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime LastTime
        {
            get
            {
                return this._lastTime;
            }
            set
            {
                if ((this._lastTime != value))
                {
                    this.OnLastTimeChanging(value);
                    this.RaiseDataMemberChanging("LastTime");
                    this.ValidateProperty("LastTime", value);
                    this._lastTime = value;
                    this.RaiseDataMemberChanged("LastTime");
                    this.OnLastTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WarehouseId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> WarehouseId
        {
            get
            {
                return this._warehouseId;
            }
            set
            {
                if ((this._warehouseId != value))
                {
                    this.OnWarehouseIdChanging(value);
                    this.RaiseDataMemberChanging("WarehouseId");
                    this.ValidateProperty("WarehouseId", value);
                    this._warehouseId = value;
                    this.RaiseDataMemberChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkingDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<DateTime> WorkingDate
        {
            get
            {
                return this._workingDate;
            }
            set
            {
                if ((this._workingDate != value))
                {
                    this.OnWorkingDateChanging(value);
                    this.RaiseDataMemberChanging("WorkingDate");
                    this.ValidateProperty("WorkingDate", value);
                    this._workingDate = value;
                    this.RaiseDataMemberChanged("WorkingDate");
                    this.OnWorkingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'TransactionDocument' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class TransactionDocument : Entity
    {
        
        private Guid _clientId;
        
        private DateTime _date0;
        
        private DateTime _date2;
        
        private string _ma_Ct;
        
        private Guid _ma_Dvcs;
        
        private short _ma_Gd;
        
        private string _ma_Nk;
        
        private Guid _ma_Nt;
        
        private DateTime _ngay_Ct;
        
        private DateTime _ngay_Lct;
        
        private DateTime _ngay_Lo;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizaionId;
        
        private string _so_Ct;
        
        private string _so_Lo;
        
        private byte _status;
        
        private string _stt_Rec;
        
        private decimal _t_Ps_Co_Nt;
        
        private decimal _t_Ps_No;
        
        private decimal _t_Ps_No_Nt;
        
        private decimal _ty_Gia;
        
        private Guid _user_Id0;
        
        private Guid _user_Id2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnDate0Changing(DateTime value);
        partial void OnDate0Changed();
        partial void OnDate2Changing(DateTime value);
        partial void OnDate2Changed();
        partial void OnMa_CtChanging(string value);
        partial void OnMa_CtChanged();
        partial void OnMa_DvcsChanging(Guid value);
        partial void OnMa_DvcsChanged();
        partial void OnMa_GdChanging(short value);
        partial void OnMa_GdChanged();
        partial void OnMa_NkChanging(string value);
        partial void OnMa_NkChanged();
        partial void OnMa_NtChanging(Guid value);
        partial void OnMa_NtChanged();
        partial void OnNgay_CtChanging(DateTime value);
        partial void OnNgay_CtChanged();
        partial void OnNgay_LctChanging(DateTime value);
        partial void OnNgay_LctChanged();
        partial void OnNgay_LoChanging(DateTime value);
        partial void OnNgay_LoChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizaionIdChanging(Guid value);
        partial void OnOrganizaionIdChanged();
        partial void OnSo_CtChanging(string value);
        partial void OnSo_CtChanged();
        partial void OnSo_LoChanging(string value);
        partial void OnSo_LoChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnStt_RecChanging(string value);
        partial void OnStt_RecChanged();
        partial void OnT_Ps_Co_NtChanging(decimal value);
        partial void OnT_Ps_Co_NtChanged();
        partial void OnT_Ps_NoChanging(decimal value);
        partial void OnT_Ps_NoChanged();
        partial void OnT_Ps_No_NtChanging(decimal value);
        partial void OnT_Ps_No_NtChanged();
        partial void OnTy_GiaChanging(decimal value);
        partial void OnTy_GiaChanged();
        partial void OnUser_Id0Changing(Guid value);
        partial void OnUser_Id0Changed();
        partial void OnUser_Id2Changing(Guid value);
        partial void OnUser_Id2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDocument"/> class.
        /// </summary>
        public TransactionDocument()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date0
        {
            get
            {
                return this._date0;
            }
            set
            {
                if ((this._date0 != value))
                {
                    this.OnDate0Changing(value);
                    this.RaiseDataMemberChanging("Date0");
                    this.ValidateProperty("Date0", value);
                    this._date0 = value;
                    this.RaiseDataMemberChanged("Date0");
                    this.OnDate0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Date2
        {
            get
            {
                return this._date2;
            }
            set
            {
                if ((this._date2 != value))
                {
                    this.OnDate2Changing(value);
                    this.RaiseDataMemberChanging("Date2");
                    this.ValidateProperty("Date2", value);
                    this._date2 = value;
                    this.RaiseDataMemberChanged("Date2");
                    this.OnDate2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Ct
        {
            get
            {
                return this._ma_Ct;
            }
            set
            {
                if ((this._ma_Ct != value))
                {
                    this.OnMa_CtChanging(value);
                    this.RaiseDataMemberChanging("Ma_Ct");
                    this.ValidateProperty("Ma_Ct", value);
                    this._ma_Ct = value;
                    this.RaiseDataMemberChanged("Ma_Ct");
                    this.OnMa_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Dvcs' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Ma_Dvcs
        {
            get
            {
                return this._ma_Dvcs;
            }
            set
            {
                if ((this._ma_Dvcs != value))
                {
                    this.OnMa_DvcsChanging(value);
                    this.RaiseDataMemberChanging("Ma_Dvcs");
                    this.ValidateProperty("Ma_Dvcs", value);
                    this._ma_Dvcs = value;
                    this.RaiseDataMemberChanged("Ma_Dvcs");
                    this.OnMa_DvcsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Gd' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public short Ma_Gd
        {
            get
            {
                return this._ma_Gd;
            }
            set
            {
                if ((this._ma_Gd != value))
                {
                    this.OnMa_GdChanging(value);
                    this.RaiseDataMemberChanging("Ma_Gd");
                    this.ValidateProperty("Ma_Gd", value);
                    this._ma_Gd = value;
                    this.RaiseDataMemberChanged("Ma_Gd");
                    this.OnMa_GdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Nk' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Nk
        {
            get
            {
                return this._ma_Nk;
            }
            set
            {
                if ((this._ma_Nk != value))
                {
                    this.OnMa_NkChanging(value);
                    this.RaiseDataMemberChanging("Ma_Nk");
                    this.ValidateProperty("Ma_Nk", value);
                    this._ma_Nk = value;
                    this.RaiseDataMemberChanged("Ma_Nk");
                    this.OnMa_NkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid Ma_Nt
        {
            get
            {
                return this._ma_Nt;
            }
            set
            {
                if ((this._ma_Nt != value))
                {
                    this.OnMa_NtChanging(value);
                    this.RaiseDataMemberChanging("Ma_Nt");
                    this.ValidateProperty("Ma_Nt", value);
                    this._ma_Nt = value;
                    this.RaiseDataMemberChanged("Ma_Nt");
                    this.OnMa_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Ct
        {
            get
            {
                return this._ngay_Ct;
            }
            set
            {
                if ((this._ngay_Ct != value))
                {
                    this.OnNgay_CtChanging(value);
                    this.RaiseDataMemberChanging("Ngay_Ct");
                    this.ValidateProperty("Ngay_Ct", value);
                    this._ngay_Ct = value;
                    this.RaiseDataMemberChanged("Ngay_Ct");
                    this.OnNgay_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Lct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Lct
        {
            get
            {
                return this._ngay_Lct;
            }
            set
            {
                if ((this._ngay_Lct != value))
                {
                    this.OnNgay_LctChanging(value);
                    this.RaiseDataMemberChanging("Ngay_Lct");
                    this.ValidateProperty("Ngay_Lct", value);
                    this._ngay_Lct = value;
                    this.RaiseDataMemberChanged("Ngay_Lct");
                    this.OnNgay_LctChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Lo' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Lo
        {
            get
            {
                return this._ngay_Lo;
            }
            set
            {
                if ((this._ngay_Lo != value))
                {
                    this.OnNgay_LoChanging(value);
                    this.RaiseDataMemberChanging("Ngay_Lo");
                    this.ValidateProperty("Ngay_Lo", value);
                    this._ngay_Lo = value;
                    this.RaiseDataMemberChanged("Ngay_Lo");
                    this.OnNgay_LoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizaionId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizaionId
        {
            get
            {
                return this._organizaionId;
            }
            set
            {
                if ((this._organizaionId != value))
                {
                    this.OnOrganizaionIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizaionId");
                    this.ValidateProperty("OrganizaionId", value);
                    this._organizaionId = value;
                    this.RaiseDataMemberChanged("OrganizaionId");
                    this.OnOrganizaionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'So_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string So_Ct
        {
            get
            {
                return this._so_Ct;
            }
            set
            {
                if ((this._so_Ct != value))
                {
                    this.OnSo_CtChanging(value);
                    this.RaiseDataMemberChanging("So_Ct");
                    this.ValidateProperty("So_Ct", value);
                    this._so_Ct = value;
                    this.RaiseDataMemberChanged("So_Ct");
                    this.OnSo_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'So_Lo' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string So_Lo
        {
            get
            {
                return this._so_Lo;
            }
            set
            {
                if ((this._so_Lo != value))
                {
                    this.OnSo_LoChanging(value);
                    this.RaiseDataMemberChanging("So_Lo");
                    this.ValidateProperty("So_Lo", value);
                    this._so_Lo = value;
                    this.RaiseDataMemberChanged("So_Lo");
                    this.OnSo_LoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Stt_Rec' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Stt_Rec
        {
            get
            {
                return this._stt_Rec;
            }
            set
            {
                if ((this._stt_Rec != value))
                {
                    this.OnStt_RecChanging(value);
                    this.ValidateProperty("Stt_Rec", value);
                    this._stt_Rec = value;
                    this.RaisePropertyChanged("Stt_Rec");
                    this.OnStt_RecChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'T_Ps_Co_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal T_Ps_Co_Nt
        {
            get
            {
                return this._t_Ps_Co_Nt;
            }
            set
            {
                if ((this._t_Ps_Co_Nt != value))
                {
                    this.OnT_Ps_Co_NtChanging(value);
                    this.RaiseDataMemberChanging("T_Ps_Co_Nt");
                    this.ValidateProperty("T_Ps_Co_Nt", value);
                    this._t_Ps_Co_Nt = value;
                    this.RaiseDataMemberChanged("T_Ps_Co_Nt");
                    this.OnT_Ps_Co_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'T_Ps_No' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal T_Ps_No
        {
            get
            {
                return this._t_Ps_No;
            }
            set
            {
                if ((this._t_Ps_No != value))
                {
                    this.OnT_Ps_NoChanging(value);
                    this.RaiseDataMemberChanging("T_Ps_No");
                    this.ValidateProperty("T_Ps_No", value);
                    this._t_Ps_No = value;
                    this.RaiseDataMemberChanged("T_Ps_No");
                    this.OnT_Ps_NoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'T_Ps_No_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal T_Ps_No_Nt
        {
            get
            {
                return this._t_Ps_No_Nt;
            }
            set
            {
                if ((this._t_Ps_No_Nt != value))
                {
                    this.OnT_Ps_No_NtChanging(value);
                    this.RaiseDataMemberChanging("T_Ps_No_Nt");
                    this.ValidateProperty("T_Ps_No_Nt", value);
                    this._t_Ps_No_Nt = value;
                    this.RaiseDataMemberChanged("T_Ps_No_Nt");
                    this.OnT_Ps_No_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ty_Gia' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Ty_Gia
        {
            get
            {
                return this._ty_Gia;
            }
            set
            {
                if ((this._ty_Gia != value))
                {
                    this.OnTy_GiaChanging(value);
                    this.RaiseDataMemberChanging("Ty_Gia");
                    this.ValidateProperty("Ty_Gia", value);
                    this._ty_Gia = value;
                    this.RaiseDataMemberChanged("Ty_Gia");
                    this.OnTy_GiaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id0' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id0
        {
            get
            {
                return this._user_Id0;
            }
            set
            {
                if ((this._user_Id0 != value))
                {
                    this.OnUser_Id0Changing(value);
                    this.RaiseDataMemberChanging("User_Id0");
                    this.ValidateProperty("User_Id0", value);
                    this._user_Id0 = value;
                    this.RaiseDataMemberChanged("User_Id0");
                    this.OnUser_Id0Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User_Id2' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid User_Id2
        {
            get
            {
                return this._user_Id2;
            }
            set
            {
                if ((this._user_Id2 != value))
                {
                    this.OnUser_Id2Changing(value);
                    this.RaiseDataMemberChanging("User_Id2");
                    this.ValidateProperty("User_Id2", value);
                    this._user_Id2 = value;
                    this.RaiseDataMemberChanged("User_Id2");
                    this.OnUser_Id2Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._stt_Rec;
        }
    }
    
    /// <summary>
    /// The 'TransactionLine' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class TransactionLine : Entity
    {
        
        private Guid _clientId;
        
        private string _dien_Giaii;
        
        private long _ln;
        
        private string _ma_Ct;
        
        private string _ma_Kh_I;
        
        private string _ma_Ku;
        
        private string _ma_Td_I;
        
        private string _ma_Vv_I;
        
        private DateTime _ngay_Ct;
        
        private string _nh_Dk;
        
        private string[] _openAccessGenerated;
        
        private Guid _organizationId;
        
        private decimal _ps_Co;
        
        private decimal _ps_Co_Nt;
        
        private decimal _ps_No;
        
        private decimal _ps_No_Nt;
        
        private string _so_Ct;
        
        private string _stt_Rec;
        
        private string _tk_I;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnDien_GiaiiChanging(string value);
        partial void OnDien_GiaiiChanged();
        partial void OnLnChanging(long value);
        partial void OnLnChanged();
        partial void OnMa_CtChanging(string value);
        partial void OnMa_CtChanged();
        partial void OnMa_Kh_IChanging(string value);
        partial void OnMa_Kh_IChanged();
        partial void OnMa_KuChanging(string value);
        partial void OnMa_KuChanged();
        partial void OnMa_Td_IChanging(string value);
        partial void OnMa_Td_IChanged();
        partial void OnMa_Vv_IChanging(string value);
        partial void OnMa_Vv_IChanged();
        partial void OnNgay_CtChanging(DateTime value);
        partial void OnNgay_CtChanged();
        partial void OnNh_DkChanging(string value);
        partial void OnNh_DkChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Guid value);
        partial void OnOrganizationIdChanged();
        partial void OnPs_CoChanging(decimal value);
        partial void OnPs_CoChanged();
        partial void OnPs_Co_NtChanging(decimal value);
        partial void OnPs_Co_NtChanged();
        partial void OnPs_NoChanging(decimal value);
        partial void OnPs_NoChanged();
        partial void OnPs_No_NtChanging(decimal value);
        partial void OnPs_No_NtChanged();
        partial void OnSo_CtChanging(string value);
        partial void OnSo_CtChanged();
        partial void OnStt_RecChanging(string value);
        partial void OnStt_RecChanged();
        partial void OnTk_IChanging(string value);
        partial void OnTk_IChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLine"/> class.
        /// </summary>
        public TransactionLine()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dien_Giaii' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Dien_Giaii
        {
            get
            {
                return this._dien_Giaii;
            }
            set
            {
                if ((this._dien_Giaii != value))
                {
                    this.OnDien_GiaiiChanging(value);
                    this.RaiseDataMemberChanging("Dien_Giaii");
                    this.ValidateProperty("Dien_Giaii", value);
                    this._dien_Giaii = value;
                    this.RaiseDataMemberChanged("Dien_Giaii");
                    this.OnDien_GiaiiChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ln' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long Ln
        {
            get
            {
                return this._ln;
            }
            set
            {
                if ((this._ln != value))
                {
                    this.OnLnChanging(value);
                    this.ValidateProperty("Ln", value);
                    this._ln = value;
                    this.RaisePropertyChanged("Ln");
                    this.OnLnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Ct
        {
            get
            {
                return this._ma_Ct;
            }
            set
            {
                if ((this._ma_Ct != value))
                {
                    this.OnMa_CtChanging(value);
                    this.RaiseDataMemberChanging("Ma_Ct");
                    this.ValidateProperty("Ma_Ct", value);
                    this._ma_Ct = value;
                    this.RaiseDataMemberChanged("Ma_Ct");
                    this.OnMa_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Kh_I' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Kh_I
        {
            get
            {
                return this._ma_Kh_I;
            }
            set
            {
                if ((this._ma_Kh_I != value))
                {
                    this.OnMa_Kh_IChanging(value);
                    this.RaiseDataMemberChanging("Ma_Kh_I");
                    this.ValidateProperty("Ma_Kh_I", value);
                    this._ma_Kh_I = value;
                    this.RaiseDataMemberChanged("Ma_Kh_I");
                    this.OnMa_Kh_IChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Ku' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Ku
        {
            get
            {
                return this._ma_Ku;
            }
            set
            {
                if ((this._ma_Ku != value))
                {
                    this.OnMa_KuChanging(value);
                    this.RaiseDataMemberChanging("Ma_Ku");
                    this.ValidateProperty("Ma_Ku", value);
                    this._ma_Ku = value;
                    this.RaiseDataMemberChanged("Ma_Ku");
                    this.OnMa_KuChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Td_I' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Td_I
        {
            get
            {
                return this._ma_Td_I;
            }
            set
            {
                if ((this._ma_Td_I != value))
                {
                    this.OnMa_Td_IChanging(value);
                    this.RaiseDataMemberChanging("Ma_Td_I");
                    this.ValidateProperty("Ma_Td_I", value);
                    this._ma_Td_I = value;
                    this.RaiseDataMemberChanged("Ma_Td_I");
                    this.OnMa_Td_IChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ma_Vv_I' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Ma_Vv_I
        {
            get
            {
                return this._ma_Vv_I;
            }
            set
            {
                if ((this._ma_Vv_I != value))
                {
                    this.OnMa_Vv_IChanging(value);
                    this.RaiseDataMemberChanging("Ma_Vv_I");
                    this.ValidateProperty("Ma_Vv_I", value);
                    this._ma_Vv_I = value;
                    this.RaiseDataMemberChanged("Ma_Vv_I");
                    this.OnMa_Vv_IChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ngay_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime Ngay_Ct
        {
            get
            {
                return this._ngay_Ct;
            }
            set
            {
                if ((this._ngay_Ct != value))
                {
                    this.OnNgay_CtChanging(value);
                    this.RaiseDataMemberChanging("Ngay_Ct");
                    this.ValidateProperty("Ngay_Ct", value);
                    this._ngay_Ct = value;
                    this.RaiseDataMemberChanged("Ngay_Ct");
                    this.OnNgay_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nh_Dk' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Nh_Dk
        {
            get
            {
                return this._nh_Dk;
            }
            set
            {
                if ((this._nh_Dk != value))
                {
                    this.OnNh_DkChanging(value);
                    this.RaiseDataMemberChanging("Nh_Dk");
                    this.ValidateProperty("Nh_Dk", value);
                    this._nh_Dk = value;
                    this.RaiseDataMemberChanged("Nh_Dk");
                    this.OnNh_DkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ps_Co' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Ps_Co
        {
            get
            {
                return this._ps_Co;
            }
            set
            {
                if ((this._ps_Co != value))
                {
                    this.OnPs_CoChanging(value);
                    this.RaiseDataMemberChanging("Ps_Co");
                    this.ValidateProperty("Ps_Co", value);
                    this._ps_Co = value;
                    this.RaiseDataMemberChanged("Ps_Co");
                    this.OnPs_CoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ps_Co_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Ps_Co_Nt
        {
            get
            {
                return this._ps_Co_Nt;
            }
            set
            {
                if ((this._ps_Co_Nt != value))
                {
                    this.OnPs_Co_NtChanging(value);
                    this.RaiseDataMemberChanging("Ps_Co_Nt");
                    this.ValidateProperty("Ps_Co_Nt", value);
                    this._ps_Co_Nt = value;
                    this.RaiseDataMemberChanged("Ps_Co_Nt");
                    this.OnPs_Co_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ps_No' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Ps_No
        {
            get
            {
                return this._ps_No;
            }
            set
            {
                if ((this._ps_No != value))
                {
                    this.OnPs_NoChanging(value);
                    this.RaiseDataMemberChanging("Ps_No");
                    this.ValidateProperty("Ps_No", value);
                    this._ps_No = value;
                    this.RaiseDataMemberChanged("Ps_No");
                    this.OnPs_NoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ps_No_Nt' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public decimal Ps_No_Nt
        {
            get
            {
                return this._ps_No_Nt;
            }
            set
            {
                if ((this._ps_No_Nt != value))
                {
                    this.OnPs_No_NtChanging(value);
                    this.RaiseDataMemberChanging("Ps_No_Nt");
                    this.ValidateProperty("Ps_No_Nt", value);
                    this._ps_No_Nt = value;
                    this.RaiseDataMemberChanged("Ps_No_Nt");
                    this.OnPs_No_NtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'So_Ct' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string So_Ct
        {
            get
            {
                return this._so_Ct;
            }
            set
            {
                if ((this._so_Ct != value))
                {
                    this.OnSo_CtChanging(value);
                    this.RaiseDataMemberChanging("So_Ct");
                    this.ValidateProperty("So_Ct", value);
                    this._so_Ct = value;
                    this.RaiseDataMemberChanged("So_Ct");
                    this.OnSo_CtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Stt_Rec' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Stt_Rec
        {
            get
            {
                return this._stt_Rec;
            }
            set
            {
                if ((this._stt_Rec != value))
                {
                    this.OnStt_RecChanging(value);
                    this.ValidateProperty("Stt_Rec", value);
                    this._stt_Rec = value;
                    this.RaisePropertyChanged("Stt_Rec");
                    this.OnStt_RecChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tk_I' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Tk_I
        {
            get
            {
                return this._tk_I;
            }
            set
            {
                if ((this._tk_I != value))
                {
                    this.OnTk_IChanging(value);
                    this.RaiseDataMemberChanging("Tk_I");
                    this.ValidateProperty("Tk_I", value);
                    this._tk_I = value;
                    this.RaiseDataMemberChanged("Tk_I");
                    this.OnTk_IChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._stt_Rec == null))
            {
                return null;
            }
            return EntityKey.Create(this._ln, this._stt_Rec);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.DataAccess")]
    public sealed partial class User : Entity
    {
        
        private Nullable<Guid> _clientId;
        
        private string _comment;
        
        private DateTime _createdDate;
        
        private string _email;
        
        private string _fullName;
        
        private Guid _id;
        
        private bool _isActivated;
        
        private bool _isLockedOut;
        
        private DateTime _lastLockedOutDate;
        
        private string _lastLockedOutReason;
        
        private DateTime _lastLoginDate;
        
        private string _lastLoginIp;
        
        private DateTime _lastModifiedDate;
        
        private string _name;
        
        private string[] _openAccessGenerated;
        
        private Nullable<Guid> _organizationId;
        
        private string _password;
        
        private string _passwordAnswer;
        
        private string _passwordQuestion;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Nullable<Guid> value);
        partial void OnClientIdChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIsActivatedChanging(bool value);
        partial void OnIsActivatedChanged();
        partial void OnIsLockedOutChanging(bool value);
        partial void OnIsLockedOutChanged();
        partial void OnLastLockedOutDateChanging(DateTime value);
        partial void OnLastLockedOutDateChanged();
        partial void OnLastLockedOutReasonChanging(string value);
        partial void OnLastLockedOutReasonChanged();
        partial void OnLastLoginDateChanging(DateTime value);
        partial void OnLastLoginDateChanged();
        partial void OnLastLoginIpChanging(string value);
        partial void OnLastLoginIpChanged();
        partial void OnLastModifiedDateChanging(DateTime value);
        partial void OnLastModifiedDateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenAccessGeneratedChanging(string[] value);
        partial void OnOpenAccessGeneratedChanged();
        partial void OnOrganizationIdChanging(Nullable<Guid> value);
        partial void OnOrganizationIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPasswordAnswerChanging(string value);
        partial void OnPasswordAnswerChanged();
        partial void OnPasswordQuestionChanging(string value);
        partial void OnPasswordQuestionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActivated' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsActivated
        {
            get
            {
                return this._isActivated;
            }
            set
            {
                if ((this._isActivated != value))
                {
                    this.OnIsActivatedChanging(value);
                    this.RaiseDataMemberChanging("IsActivated");
                    this.ValidateProperty("IsActivated", value);
                    this._isActivated = value;
                    this.RaiseDataMemberChanged("IsActivated");
                    this.OnIsActivatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsLockedOut' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public bool IsLockedOut
        {
            get
            {
                return this._isLockedOut;
            }
            set
            {
                if ((this._isLockedOut != value))
                {
                    this.OnIsLockedOutChanging(value);
                    this.RaiseDataMemberChanging("IsLockedOut");
                    this.ValidateProperty("IsLockedOut", value);
                    this._isLockedOut = value;
                    this.RaiseDataMemberChanged("IsLockedOut");
                    this.OnIsLockedOutChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLockedOutDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime LastLockedOutDate
        {
            get
            {
                return this._lastLockedOutDate;
            }
            set
            {
                if ((this._lastLockedOutDate != value))
                {
                    this.OnLastLockedOutDateChanging(value);
                    this.RaiseDataMemberChanging("LastLockedOutDate");
                    this.ValidateProperty("LastLockedOutDate", value);
                    this._lastLockedOutDate = value;
                    this.RaiseDataMemberChanged("LastLockedOutDate");
                    this.OnLastLockedOutDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLockedOutReason' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string LastLockedOutReason
        {
            get
            {
                return this._lastLockedOutReason;
            }
            set
            {
                if ((this._lastLockedOutReason != value))
                {
                    this.OnLastLockedOutReasonChanging(value);
                    this.RaiseDataMemberChanging("LastLockedOutReason");
                    this.ValidateProperty("LastLockedOutReason", value);
                    this._lastLockedOutReason = value;
                    this.RaiseDataMemberChanged("LastLockedOutReason");
                    this.OnLastLockedOutReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                if ((this._lastLoginDate != value))
                {
                    this.OnLastLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LastLoginDate");
                    this.ValidateProperty("LastLoginDate", value);
                    this._lastLoginDate = value;
                    this.RaiseDataMemberChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginIp' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string LastLoginIp
        {
            get
            {
                return this._lastLoginIp;
            }
            set
            {
                if ((this._lastLoginIp != value))
                {
                    this.OnLastLoginIpChanging(value);
                    this.RaiseDataMemberChanging("LastLoginIp");
                    this.ValidateProperty("LastLoginIp", value);
                    this._lastLoginIp = value;
                    this.RaiseDataMemberChanged("LastLoginIp");
                    this.OnLastLoginIpChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastModifiedDate' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public DateTime LastModifiedDate
        {
            get
            {
                return this._lastModifiedDate;
            }
            set
            {
                if ((this._lastModifiedDate != value))
                {
                    this.OnLastModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("LastModifiedDate");
                    this.ValidateProperty("LastModifiedDate", value);
                    this._lastModifiedDate = value;
                    this.RaiseDataMemberChanged("LastModifiedDate");
                    this.OnLastModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenAccessGenerated' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, AutoGenerateFilter=false, Description="OpenAccess Key", Name="-ID-")]
        [Editable(false)]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public string[] OpenAccessGenerated
        {
            get
            {
                return this._openAccessGenerated;
            }
            set
            {
                if ((this._openAccessGenerated != value))
                {
                    this.OnOpenAccessGeneratedChanging(value);
                    this.ValidateProperty("OpenAccessGenerated", value);
                    this._openAccessGenerated = value;
                    this.RaisePropertyChanged("OpenAccessGenerated");
                    this.OnOpenAccessGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationId' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordAnswer' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string PasswordAnswer
        {
            get
            {
                return this._passwordAnswer;
            }
            set
            {
                if ((this._passwordAnswer != value))
                {
                    this.OnPasswordAnswerChanging(value);
                    this.RaiseDataMemberChanging("PasswordAnswer");
                    this.ValidateProperty("PasswordAnswer", value);
                    this._passwordAnswer = value;
                    this.RaiseDataMemberChanged("PasswordAnswer");
                    this.OnPasswordAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordQuestion' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [RoundtripOriginal()]
        public string PasswordQuestion
        {
            get
            {
                return this._passwordQuestion;
            }
            set
            {
                if ((this._passwordQuestion != value))
                {
                    this.OnPasswordQuestionChanging(value);
                    this.RaiseDataMemberChanging("PasswordQuestion");
                    this.ValidateProperty("PasswordQuestion", value);
                    this._passwordQuestion = value;
                    this.RaiseDataMemberChanged("PasswordQuestion");
                    this.OnPasswordQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace MyERP.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MyERP.DataAccess;
    
    
    /// <summary>
    /// The 'AuthUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MyERP.Web")]
    public sealed partial class AuthUser : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private Guid _clientId;
        
        private Guid _id;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUser"/> class.
        /// </summary>
        public AuthUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        [DataMember()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MyERPAuthenticationDomainService' DomainService.
    /// </summary>
    public sealed partial class MyERPAuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPAuthenticationDomainContext"/> class.
        /// </summary>
        public MyERPAuthenticationDomainContext() : 
                this(new WebDomainClient<IMyERPAuthenticationDomainServiceContract>(new Uri("MyERP-Web-MyERPAuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPAuthenticationDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MyERPAuthenticationDomainService service URI.</param>
        public MyERPAuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMyERPAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPAuthenticationDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MyERPAuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="AuthUser"/> entity instances that have been loaded into this <see cref="MyERPAuthenticationDomainContext"/> instance.
        /// </summary>
        public EntitySet<AuthUser> AuthUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AuthUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AuthUser"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AuthUser"/> entity instances.</returns>
        public EntityQuery<AuthUser> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<AuthUser>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AuthUser"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AuthUser"/> entity instances.</returns>
        public EntityQuery<AuthUser> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<AuthUser>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AuthUser"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AuthUser"/> entity instances.</returns>
        public EntityQuery<AuthUser> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<AuthUser>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MyERPAuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MyERPAuthenticationDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMyERPAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPAuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPAuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/MyERPAuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<AuthUser> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPAuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPAuthenticationDomainService/Login", ReplyAction="http://tempuri.org/MyERPAuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<AuthUser> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPAuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPAuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/MyERPAuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<AuthUser> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPAuthenticationDomainService/SubmitChangesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPAuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/MyERPAuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MyERPAuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public MyERPAuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<AuthUser>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MyERPDomainService' DomainService.
    /// </summary>
    public sealed partial class MyERPDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPDomainContext"/> class.
        /// </summary>
        public MyERPDomainContext() : 
                this(new WebDomainClient<IMyERPDomainServiceContract>(new Uri("MyERP-Web-MyERPDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MyERPDomainService service URI.</param>
        public MyERPDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMyERPDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MyERPDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Account"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Account> Accounts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Account>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="BusinessPartnerGroup"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<BusinessPartnerGroup> BusinessPartnerGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BusinessPartnerGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="BusinessPartner"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<BusinessPartner> BusinessPartners
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BusinessPartner>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Client"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Client> Clients
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Client>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Currency"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Currency> Currencies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Currency>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="JobGroup"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<JobGroup> JobGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<JobGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Job"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Job> Jobs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Job>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Module"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Module> Modules
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Module>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Organization"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Organization> Organizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Organization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PaymentTerm"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<PaymentTerm> PaymentTerms
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PaymentTerm>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Session"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<Session> Sessions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Session>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TransactionDocument"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<TransactionDocument> TransactionDocuments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TransactionDocument>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TransactionLine"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<TransactionLine> TransactionLines
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TransactionLine>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="MyERPDomainContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Account"/> entity instances using the 'GetAccounts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Account"/> entity instances.</returns>
        public EntityQuery<Account> GetAccountsQuery()
        {
            this.ValidateMethod("GetAccountsQuery", null);
            return base.CreateQuery<Account>("GetAccounts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BusinessPartnerGroup"/> entity instances using the 'GetBusinessPartnerGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BusinessPartnerGroup"/> entity instances.</returns>
        public EntityQuery<BusinessPartnerGroup> GetBusinessPartnerGroupsQuery()
        {
            this.ValidateMethod("GetBusinessPartnerGroupsQuery", null);
            return base.CreateQuery<BusinessPartnerGroup>("GetBusinessPartnerGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BusinessPartner"/> entity instances using the 'GetBusinessPartners' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BusinessPartner"/> entity instances.</returns>
        public EntityQuery<BusinessPartner> GetBusinessPartnersQuery()
        {
            this.ValidateMethod("GetBusinessPartnersQuery", null);
            return base.CreateQuery<BusinessPartner>("GetBusinessPartners", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Client"/> entity instances using the 'GetClients' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Client"/> entity instances.</returns>
        public EntityQuery<Client> GetClientsQuery()
        {
            this.ValidateMethod("GetClientsQuery", null);
            return base.CreateQuery<Client>("GetClients", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Currency"/> entity instances using the 'GetCurrencies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Currency"/> entity instances.</returns>
        public EntityQuery<Currency> GetCurrenciesQuery()
        {
            this.ValidateMethod("GetCurrenciesQuery", null);
            return base.CreateQuery<Currency>("GetCurrencies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JobGroup"/> entity instances using the 'GetJobGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JobGroup"/> entity instances.</returns>
        public EntityQuery<JobGroup> GetJobGroupsQuery()
        {
            this.ValidateMethod("GetJobGroupsQuery", null);
            return base.CreateQuery<JobGroup>("GetJobGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Job"/> entity instances using the 'GetJobs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Job"/> entity instances.</returns>
        public EntityQuery<Job> GetJobsQuery()
        {
            this.ValidateMethod("GetJobsQuery", null);
            return base.CreateQuery<Job>("GetJobs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Module"/> entity instances using the 'GetModules' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Module"/> entity instances.</returns>
        public EntityQuery<Module> GetModulesQuery()
        {
            this.ValidateMethod("GetModulesQuery", null);
            return base.CreateQuery<Module>("GetModules", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entity instances using the 'GetOrganizations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entity instances.</returns>
        public EntityQuery<Organization> GetOrganizationsQuery()
        {
            this.ValidateMethod("GetOrganizationsQuery", null);
            return base.CreateQuery<Organization>("GetOrganizations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entity instances using the 'GetOrganizationsByClientId' query.
        /// </summary>
        /// <param name="clientId">The value for the 'clientId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entity instances.</returns>
        public EntityQuery<Organization> GetOrganizationsByClientIdQuery(Guid clientId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("clientId", clientId);
            this.ValidateMethod("GetOrganizationsByClientIdQuery", parameters);
            return base.CreateQuery<Organization>("GetOrganizationsByClientId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PaymentTerm"/> entity instances using the 'GetPaymentTerms' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PaymentTerm"/> entity instances.</returns>
        public EntityQuery<PaymentTerm> GetPaymentTermsQuery()
        {
            this.ValidateMethod("GetPaymentTermsQuery", null);
            return base.CreateQuery<PaymentTerm>("GetPaymentTerms", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Session"/> entity instances using the 'GetSessions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Session"/> entity instances.</returns>
        public EntityQuery<Session> GetSessionsQuery()
        {
            this.ValidateMethod("GetSessionsQuery", null);
            return base.CreateQuery<Session>("GetSessions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TransactionDocument"/> entity instances using the 'GetTransactionDocuments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TransactionDocument"/> entity instances.</returns>
        public EntityQuery<TransactionDocument> GetTransactionDocumentsQuery()
        {
            this.ValidateMethod("GetTransactionDocumentsQuery", null);
            return base.CreateQuery<TransactionDocument>("GetTransactionDocuments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TransactionLine"/> entity instances using the 'GetTransactionLines' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TransactionLine"/> entity instances.</returns>
        public EntityQuery<TransactionLine> GetTransactionLinesQuery()
        {
            this.ValidateMethod("GetTransactionLinesQuery", null);
            return base.CreateQuery<TransactionLine>("GetTransactionLines", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<User>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CommitChanges' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CommitChanges(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("CommitChanges", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CommitChanges", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CommitChanges' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CommitChanges()
        {
            this.ValidateMethod("CommitChanges", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CommitChanges", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDashboardStats' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DashboardStats> GetDashboardStats(Action<InvokeOperation<DashboardStats>> callback, object userState)
        {
            this.ValidateMethod("GetDashboardStats", null);
            return ((InvokeOperation<DashboardStats>)(this.InvokeOperation("GetDashboardStats", typeof(DashboardStats), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDashboardStats' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DashboardStats> GetDashboardStats()
        {
            this.ValidateMethod("GetDashboardStats", null);
            return ((InvokeOperation<DashboardStats>)(this.InvokeOperation("GetDashboardStats", typeof(DashboardStats), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MyERPDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MyERPDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMyERPDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CommitChanges' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/CommitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/CommitChanges", ReplyAction="http://tempuri.org/MyERPDomainService/CommitChangesResponse")]
            IAsyncResult BeginCommitChanges(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCommitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCommitChanges'.</param>
            /// <returns>The 'Boolean' returned from the 'CommitChanges' operation.</returns>
            bool EndCommitChanges(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAccounts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetAccountsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetAccounts", ReplyAction="http://tempuri.org/MyERPDomainService/GetAccountsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAccounts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAccounts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAccounts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAccounts' operation.</returns>
            QueryResult<Account> EndGetAccounts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBusinessPartnerGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetBusinessPartnerGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetBusinessPartnerGroups", ReplyAction="http://tempuri.org/MyERPDomainService/GetBusinessPartnerGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBusinessPartnerGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBusinessPartnerGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBusinessPartnerGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBusinessPartnerGroups' operation.</returns>
            QueryResult<BusinessPartnerGroup> EndGetBusinessPartnerGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBusinessPartners' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetBusinessPartnersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetBusinessPartners", ReplyAction="http://tempuri.org/MyERPDomainService/GetBusinessPartnersResponse")]
            [WebGet()]
            IAsyncResult BeginGetBusinessPartners(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBusinessPartners'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBusinessPartners'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBusinessPartners' operation.</returns>
            QueryResult<BusinessPartner> EndGetBusinessPartners(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClients' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetClientsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetClients", ReplyAction="http://tempuri.org/MyERPDomainService/GetClientsResponse")]
            [WebGet()]
            IAsyncResult BeginGetClients(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClients'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClients'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClients' operation.</returns>
            QueryResult<Client> EndGetClients(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrencies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetCurrenciesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetCurrencies", ReplyAction="http://tempuri.org/MyERPDomainService/GetCurrenciesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrencies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrencies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrencies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrencies' operation.</returns>
            QueryResult<Currency> EndGetCurrencies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDashboardStats' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetDashboardStatsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetDashboardStats", ReplyAction="http://tempuri.org/MyERPDomainService/GetDashboardStatsResponse")]
            IAsyncResult BeginGetDashboardStats(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDashboardStats'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDashboardStats'.</param>
            /// <returns>The 'DashboardStats' returned from the 'GetDashboardStats' operation.</returns>
            DashboardStats EndGetDashboardStats(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJobGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetJobGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetJobGroups", ReplyAction="http://tempuri.org/MyERPDomainService/GetJobGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetJobGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJobGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJobGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJobGroups' operation.</returns>
            QueryResult<JobGroup> EndGetJobGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJobs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetJobsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetJobs", ReplyAction="http://tempuri.org/MyERPDomainService/GetJobsResponse")]
            [WebGet()]
            IAsyncResult BeginGetJobs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJobs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJobs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJobs' operation.</returns>
            QueryResult<Job> EndGetJobs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetModules' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetModulesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetModules", ReplyAction="http://tempuri.org/MyERPDomainService/GetModulesResponse")]
            [WebGet()]
            IAsyncResult BeginGetModules(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetModules'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetModules'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetModules' operation.</returns>
            QueryResult<Module> EndGetModules(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetOrganizationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetOrganizations", ReplyAction="http://tempuri.org/MyERPDomainService/GetOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizations' operation.</returns>
            QueryResult<Organization> EndGetOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationsByClientId' operation.
            /// </summary>
            /// <param name="clientId">The value for the 'clientId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetOrganizationsByClientIdDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetOrganizationsByClientId", ReplyAction="http://tempuri.org/MyERPDomainService/GetOrganizationsByClientIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrganizationsByClientId(Guid clientId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationsByClientId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationsByClientId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationsByClientId' operation.</returns>
            QueryResult<Organization> EndGetOrganizationsByClientId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPaymentTerms' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetPaymentTermsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetPaymentTerms", ReplyAction="http://tempuri.org/MyERPDomainService/GetPaymentTermsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPaymentTerms(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPaymentTerms'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPaymentTerms'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPaymentTerms' operation.</returns>
            QueryResult<PaymentTerm> EndGetPaymentTerms(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetSessionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetSessions", ReplyAction="http://tempuri.org/MyERPDomainService/GetSessionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSessions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSessions' operation.</returns>
            QueryResult<Session> EndGetSessions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTransactionDocuments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetTransactionDocumentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetTransactionDocuments", ReplyAction="http://tempuri.org/MyERPDomainService/GetTransactionDocumentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransactionDocuments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTransactionDocuments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTransactionDocuments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTransactionDocuments' operation.</returns>
            QueryResult<TransactionDocument> EndGetTransactionDocuments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTransactionLines' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetTransactionLinesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetTransactionLines", ReplyAction="http://tempuri.org/MyERPDomainService/GetTransactionLinesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransactionLines(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTransactionLines'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTransactionLines'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTransactionLines' operation.</returns>
            QueryResult<TransactionLine> EndGetTransactionLines(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/GetUsers", ReplyAction="http://tempuri.org/MyERPDomainService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<User> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPDomainService/SubmitChanges", ReplyAction="http://tempuri.org/MyERPDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MyERPDomainContextEntityContainer : EntityContainer
        {
            
            public MyERPDomainContextEntityContainer()
            {
                this.CreateEntitySet<Account>(EntitySetOperations.All);
                this.CreateEntitySet<BusinessPartner>(EntitySetOperations.All);
                this.CreateEntitySet<BusinessPartnerGroup>(EntitySetOperations.All);
                this.CreateEntitySet<Client>(EntitySetOperations.All);
                this.CreateEntitySet<Currency>(EntitySetOperations.All);
                this.CreateEntitySet<Job>(EntitySetOperations.All);
                this.CreateEntitySet<JobGroup>(EntitySetOperations.All);
                this.CreateEntitySet<Module>(EntitySetOperations.All);
                this.CreateEntitySet<Organization>(EntitySetOperations.All);
                this.CreateEntitySet<PaymentTerm>(EntitySetOperations.All);
                this.CreateEntitySet<Session>(EntitySetOperations.All);
                this.CreateEntitySet<TransactionDocument>(EntitySetOperations.All);
                this.CreateEntitySet<TransactionLine>(EntitySetOperations.All);
                this.CreateEntitySet<User>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MyERPOtherDomainService' DomainService.
    /// </summary>
    public sealed partial class MyERPOtherDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPOtherDomainContext"/> class.
        /// </summary>
        public MyERPOtherDomainContext() : 
                this(new WebDomainClient<IMyERPOtherDomainServiceContract>(new Uri("MyERP-Web-MyERPOtherDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPOtherDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MyERPOtherDomainService service URI.</param>
        public MyERPOtherDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMyERPOtherDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MyERPOtherDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MyERPOtherDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CommitChanges' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CommitChanges(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("CommitChanges", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CommitChanges", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CommitChanges' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CommitChanges()
        {
            this.ValidateMethod("CommitChanges", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CommitChanges", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadDemoData' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation LoadDemoData(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("LoadDemoData", null);
            return this.InvokeOperation("LoadDemoData", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadDemoData' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation LoadDemoData()
        {
            this.ValidateMethod("LoadDemoData", null);
            return this.InvokeOperation("LoadDemoData", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadModuleData' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation LoadModuleData(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("LoadModuleData", null);
            return this.InvokeOperation("LoadModuleData", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadModuleData' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation LoadModuleData()
        {
            this.ValidateMethod("LoadModuleData", null);
            return this.InvokeOperation("LoadModuleData", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateSchema' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateSchema(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("UpdateSchema", null);
            return this.InvokeOperation("UpdateSchema", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateSchema' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateSchema()
        {
            this.ValidateMethod("UpdateSchema", null);
            return this.InvokeOperation("UpdateSchema", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MyERPOtherDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MyERPOtherDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMyERPOtherDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CommitChanges' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPOtherDomainService/CommitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPOtherDomainService/CommitChanges", ReplyAction="http://tempuri.org/MyERPOtherDomainService/CommitChangesResponse")]
            IAsyncResult BeginCommitChanges(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCommitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCommitChanges'.</param>
            /// <returns>The 'Boolean' returned from the 'CommitChanges' operation.</returns>
            bool EndCommitChanges(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadDemoData' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPOtherDomainService/LoadDemoDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPOtherDomainService/LoadDemoData", ReplyAction="http://tempuri.org/MyERPOtherDomainService/LoadDemoDataResponse")]
            IAsyncResult BeginLoadDemoData(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadDemoData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadDemoData'.</param>
            void EndLoadDemoData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadModuleData' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPOtherDomainService/LoadModuleDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPOtherDomainService/LoadModuleData", ReplyAction="http://tempuri.org/MyERPOtherDomainService/LoadModuleDataResponse")]
            IAsyncResult BeginLoadModuleData(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadModuleData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadModuleData'.</param>
            void EndLoadModuleData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateSchema' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MyERPOtherDomainService/UpdateSchemaDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MyERPOtherDomainService/UpdateSchema", ReplyAction="http://tempuri.org/MyERPOtherDomainService/UpdateSchemaResponse")]
            IAsyncResult BeginUpdateSchema(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateSchema'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateSchema'.</param>
            void EndUpdateSchema(IAsyncResult result);
        }
        
        internal sealed class MyERPOtherDomainContextEntityContainer : EntityContainer
        {
            
            public MyERPOtherDomainContextEntityContainer()
            {
            }
        }
    }
}
