// Code is generated by Telerik Data Access Service Wizard
// using WebApiBaseRepository.tt template

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Security.Principal;
using System.Web;
using System.Web.Security;

namespace MyERP.Web
{
    public class SortExpression<TEntity> where TEntity : class
    {
        public SortExpression(Expression<Func<TEntity, object>> sortBy, ListSortDirection sortDirection)
        {
            SortBy = sortBy;
            SortDirection = sortDirection;
        }

        public Expression<Func<TEntity, object>> SortBy { get; set; }
        public ListSortDirection SortDirection { get; set; }
    }
    public interface IBaseRepository<TEntity, TContext>
        where TContext : DbContext, new()
        where TEntity : class
    {
        IQueryable<TEntity> GetAll();
        IQueryable<TEntity> GetAll(IPrincipal principal);
        TEntity GetBy(Expression<Func<TEntity, bool>> filter);
        IQueryable<TEntity> Get();
        IQueryable<TEntity> Get(Expression<Func<TEntity, bool>> filter = null);
        IQueryable<TEntity> Get(Expression<Func<TEntity, bool>> filter = null, 
            string[] includePaths = null);
        IQueryable<TEntity> Get(Expression<Func<TEntity, bool>> filter = null,
            string[] includePaths = null,
            int? page = 0, 
            int? pageSize = null, 
            params SortExpression<TEntity>[] sortExpressions);
        TEntity AddNew(TEntity entity);
        TEntity Update(TEntity entity);
        void Delete(TEntity entity);
        TContext DataContext { get; }
    }

    public abstract partial class BaseRepository<TEntity, TContext> : IBaseRepository<TEntity, TContext>
        where TEntity : class where TContext : DbContext, new()
 
    {
        protected TContext dataContext = new TContext();

        public TContext DataContext
        {
            get { return dataContext; }
        }

        protected BaseRepository()
        {
#if DEBUG
            dataContext.Database.Log = s => Debug.WriteLine(s);
#endif
        }

        public virtual IQueryable<TEntity> GetAll()
        {
            var membershipUser = (MyERPMembershipUser) Membership.GetUser(HttpContext.Current.User.Identity.Name, true);
            if (membershipUser == null)
                throw new NullReferenceException("membershipUser");

            string clause = "ClientId = @0";
            //LambdaExpression expr = System.Linq.Dynamic.DynamicExpression.ParseLambda(typeof(TEntity), typeof(bool), clause, membershipUser.ClientId);
            return dataContext.Set<TEntity>().Where(clause, membershipUser.ClientId);
            
        }

        /// <summary>
        /// Get All TEntity base on principal
        /// </summary>
        /// <param name="principal"></param>
        /// <returns></returns>
        public virtual IQueryable<TEntity> GetAll(IPrincipal principal)
        {
            var membershipUser = (MyERPMembershipUser)Membership.GetUser(principal.Identity.Name, true);
            if (membershipUser == null)
                throw new NullReferenceException("membershipUser");

            string clause = "ClientId = @0";
            return dataContext.Set<TEntity>().Where(clause, membershipUser.ClientId);
        }

        public virtual TEntity GetBy(Expression<Func<TEntity, bool>> filter)
        {
            if (filter == null)
                throw new ArgumentNullException(nameof(filter));

            var membershipUser = (MyERPMembershipUser)Membership.GetUser(HttpContext.Current.User.Identity.Name, true);
            if (membershipUser == null)
                throw new NullReferenceException("membershipUser");

            string clause = "ClientId = @0";

            TEntity entity = dataContext.Set<TEntity>().Where(clause, membershipUser.ClientId).SingleOrDefault(filter);

            if (entity == null)
                return default(TEntity);

            return entity;
        }

        public IQueryable<TEntity> Get()
        {
            return Get(null, null, null, null, null);
        }

        public IQueryable<TEntity> Get(
            Expression<Func<TEntity, bool>> filter = null)
        {
            return Get(filter, null, null, null, null);
        }

        public IQueryable<TEntity> Get(
            Expression<Func<TEntity, bool>> filter = null,
            string[] includePaths = null)
        {
            return Get(filter, includePaths, null, null, null);
        }

        public IQueryable<TEntity> Get(
           Expression<Func<TEntity, bool>> filter = null,
           string[] includePaths = null,
           int? page = null,
           int? pageSize = null,
           params SortExpression<TEntity>[] sortExpressions)
        {
            IQueryable<TEntity> query = dataContext.Set<TEntity>();

            var membershipUser = (MyERPMembershipUser)Membership.GetUser(HttpContext.Current.User.Identity.Name, true);
            if (membershipUser == null)
                throw new NullReferenceException("membershipUser");

            string clause = "ClientId = @0";
            query = query.Where(clause, membershipUser.ClientId);

            if (filter != null)
            {
                query = query.Where(filter);
            }

            if (includePaths != null)
            {
                for (var i = 0; i < includePaths.Count(); i++)
                {
                    query = query.Include(includePaths[i]);
                }
            }

            if (sortExpressions != null)
            {
                IOrderedQueryable<TEntity> orderedQuery = null;
                for (var i = 0; i < sortExpressions.Count(); i++)
                {
                    if (i == 0)
                    {
                        if (sortExpressions[i].SortDirection == ListSortDirection.Ascending)
                        {
                            orderedQuery = query.OrderBy(sortExpressions[i].SortBy);
                        }
                        else
                        {
                            orderedQuery = query.OrderByDescending(sortExpressions[i].SortBy);
                        }
                    }
                    else
                    {
                        if (sortExpressions[i].SortDirection == ListSortDirection.Ascending)
                        {
                            orderedQuery = orderedQuery.ThenBy(sortExpressions[i].SortBy);
                        }
                        else
                        {
                            orderedQuery = orderedQuery.ThenByDescending(sortExpressions[i].SortBy);
                        }

                    }
                }

                if (page != null)
                {
                    query = orderedQuery.Skip(((int)page - 1) * (int)pageSize);
                }
            }

            if (pageSize != null)
            {
                query = query.Take((int)pageSize);
            }

            return query;
        }

        public virtual TEntity AddNew(TEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            TEntity attachedEntity = dataContext.Set<TEntity>().Add(entity);
            dataContext.SaveChanges();

            return attachedEntity;
        }

        public virtual TEntity Update(TEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));
            
            //TEntity attachedEntity = dataContext.Set<TEntity>().Attach(entity);
            dataContext.Entry(entity).State = EntityState.Modified;
            dataContext.SaveChanges();

            return entity;
        }

        public virtual void Delete(TEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            TEntity attachedEntity = dataContext.Set<TEntity>().Remove(entity);
            dataContext.SaveChanges();
        }
    }
}