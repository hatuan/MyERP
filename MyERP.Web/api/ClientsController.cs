// Code is generated by Telerik Data Access Service Wizard
// using WebApiController.tt template

using MyERP.Web.Api;
using MyERP.Web.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace MyERP.Web.Api
{
    /// <summary>
    /// Web API Controller for Clients entity defined in MyERP.DataAccess.EntitiesModel data model
    /// </summary>
    public partial class ClientsController : EntityBaseApiController<MyERP.DataAccess.Client, MyERP.DataAccess.EntitiesModel>
    {
        /// <summary>
        /// Constructor used by the Web API infrastructure.
        /// </summary>
        public ClientsController()
        {
            this.repository = new ClientRepository();
        }

        /// <summary>
        /// Dependency Injection ready constructor.
        /// Usable also for unit testing.
        /// </summary>
        /// <remarks>Web API Infrastructure will ALWAYS use the default constructor!</remarks>
        /// <param name="repository">Repository instance of the specific type</param>
        public ClientsController(IBaseRepository<MyERP.DataAccess.Client , MyERP.DataAccess.EntitiesModel> repository)
        {
            this.repository = repository;
        }

        [HttpPost]
        [AllowAnonymous]
        public IHttpActionResult Register([FromBody]RegisterDTO modelDTO, string user, string password)
        {
            if (user != "cc2f1503-140e-4c0b-bb46-2340ab4387c5" || password != "0a8c5803-80b5-4418-8fea-ca39f4d45a14")
                return Unauthorized();

            if (ModelState.IsValid)
            {
                try
                {
                    var newClient = (repository as ClientRepository).Register(modelDTO);

                    return Ok(newClient);
                }
                catch(Exception ex)
                {
                    return InternalServerError(ex);
                }
                
            }
            else
                return BadRequest();
        }

        [HttpGet]
        [AllowAnonymous]
        public IHttpActionResult Register(string UUID)
        {
            //if (user != "cc2f1503-140e-4c0b-bb46-2340ab4387c5" || password != "0a8c5803-80b5-4418-8fea-ca39f4d45a14")
            //    return Unauthorized();

            if (!String.IsNullOrEmpty(UUID))
            {
                try
                {
                    string userName, password, email;
                    var success = (repository as ClientRepository).Active(UUID, out userName, out password, out email);

                    return Ok<RegisterResultDTO>(new RegisterResultDTO { Succcess = success, UserName = userName, Password = password, Email = email, Error = "" });
                }
                catch (Exception ex)
                {
                    return InternalServerError(ex);
                }
            }
            else
                return BadRequest();
        }
    }
}
