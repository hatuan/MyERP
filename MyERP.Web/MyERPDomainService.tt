<#@ template debug="true" hostspecific="True"  #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ Assembly Name="Telerik.OpenAccess, Version=2014.1.225.2, Culture=neutral, PublicKeyToken=7ce17eeaf1d59342" #>
<#@ import namespace="Telerik.OpenAccess"#>
<#@ import namespace="System.Diagnostics" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Linq;
using System.ServiceModel.DomainServices.Hosting;
using System.ServiceModel.DomainServices.Server;
using Telerik.OpenAccess;
<#
string usings = "MyERP.DataAccess;";
string [] usingArray = usings.Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries);
foreach(string item in usingArray)
{
	if(!string.IsNullOrEmpty(item))
	{
#>
using <#=item#>;
<#
	}
}
#>

#pragma warning disable 1591

namespace <#=contextNamespaceName #>	
{    
<#
string enableClientAccess = "True";
if(enableClientAccess.Equals("true",StringComparison.InvariantCultureIgnoreCase))
{
#>
    [EnableClientAccess()]
<# 
}
#>
    public partial class <#=fileName #> : OpenAccessDomainService<<#=contextTypeName #>>
	{
		public <#=fileName #>() : base()
		{
		}
<#
queriableTypes = queriableTypesInput.Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries);
queriableClassNames = queriableClassNamesInput.Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries);
for (int i = 0; i < queriableTypes.Length; i++)
{
	this.GeneratePerEntityDomainServiceCRUDOperations(queriableClassNames[i], queriableTypes[i]);
}
#>
	}
}

#pragma warning restore 1591
<#+

string fileName = "MyERPDomainService";
string contextTypeName = "EntitiesModel";
string contextNamespaceName = "MyERP.Web";
string queriableTypesInput = "Account;BusinessPartnerGroup;BusinessPartner;Currency;Client;JobGroup;Job;Module;Organization;PaymentTerm;Session;GeneralJournalDocument;GeneralJournalLine;User;NoSeries;";
string queriableClassNamesInput = "Accounts;BusinessPartnerGroups;BusinessPartners;Currencies;Clients;JobGroups;Jobs;Modules;Organizations;PaymentTerms;Sessions;GeneralJournalDocuments;GeneralJournalLines;Users;NoSeries;";
string[] queriableTypes = null;
string[] queriableClassNames = null;
string editableEndPoints = ";Account;BusinessPartnerGroup;BusinessPartner;Currency;Client;JobGroup;Job;Module;Organization;PaymentTerm;Session;GeneralJournalDocument;GeneralJournalLine;User;NoSeries";

void GeneratePerEntityDomainServiceCRUDOperations(string className, string classType)
{
	string parameterName = classType.Substring(0,1).ToLower() + classType.Substring(1);
#>
		public IQueryable<<#=classType#>> Get<#=className#>()
		{ 
			return this.DataContext.<#=className#>.Where(c => c.ClientId == _membershipUser.ClientId);
		}       
<#+ 
        string[] editableEndpointsArray= editableEndPoints.Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries);
        foreach(string editablePoint in editableEndpointsArray)
        {
        if(string.Equals(editablePoint,classType))
        {
{#>
		public void Delete<#=className#>(<#=classType#> <#= parameterName#>)
		{
			// This is a callback method. The actual Delete is performed internally.
		}

		public void Update<#=className#>(<#=classType#> <#= parameterName#>)
		{
			// This is a callback method. The actual Update is performed internally.
		}

		public void Insert<#=className#>(<#=classType#> <#= parameterName#>)
		{
			// This is a callback method. The actual Insert is performed internally.
		} 
<#+ 
}
}
}
#>
<#+
}
#>