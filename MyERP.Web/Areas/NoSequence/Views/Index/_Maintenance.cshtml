@model MyERP.Web.Models.NoSequenceEditViewModel


@(Html.X().Window()
      .ID("WindowNoSequenceMaintenance")
      .Title("No Sequence Maintenance")
      .Height(600)
      .Width(900)
      .Modal(true)
      .Layout(LayoutType.Fit)
      .MarginSpec("0 5 5 0")
      .BodyPadding(5)
      .Items(
          Html.X().FormPanel()
              .ID("FormNoSequenceMaintenance")
              .Layout(LayoutType.VBox)
              .LayoutConfig(action => action.Add(new VBoxLayoutConfig() { Align = VBoxAlign.Stretch }))
              .Items(items =>
              {
                  items.Add(Html.X().Container()
                      .Layout(LayoutType.Form)
                      .Items(
                          Html.X().AntiForgeryField(),
                          Html.X().TextFieldFor(m => m.Code).AllowBlank(false).FieldStyle("text-transform: uppercase;").EnforceMaxLength(true).ID("Code"),
                          Html.X().TextFieldFor(m => m.Description).AllowBlank(false).EnforceMaxLength(true).ID("Description"),
                          Html.X().ComboBoxFor(m => m.Status).ID("Status").Editable(false).ItemsFromEnum(typeof(MyERP.DataAccess.Enum.DefaultStatusType)),
                          Html.X().HiddenFor(m => m.Id).ID("Id"),
                          Html.X().HiddenFor(m => m.Version).ID("Version")
                      ));
                  items.Add(Html.X().GridPanel()
                      .ID("NoSequenceLineGridPanel")
                      .Flex(1)
                      .Title("No Sequence Line")
                      .Border(true)
                      .View(new GridView() { MarkDirty = false })
                      .LeftBar(leftBarItems =>
                      {
                          leftBarItems.Add(Html.X().Toolbar()
                              .Flat(true)
                              .Layout(LayoutType.VBox)
                              .Items(buttons =>
                              {
                                  buttons.Add(Html.X().Button()
                                      .ID("btnAddLine")
                                      .Icon(Icon.Add)
                                      .DirectEvents(de =>
                                      {
                                          de.Click.Action = "AddLineToNoSequenceLine";
                                          de.Click.ExtraParams.Add(new Parameter("noSequenceLinesJSON", "#{NoSequenceLineGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                                          de.Click.Success = "function(response, result) {" +
                                                             "  var record = this.up('grid').store.getById(result.result.LineNo); " +
                                                             "  var index = this.up('grid').store.indexOf(record);" +
                                                             "  this.up('grid').editingPlugin.startEdit(index, 0);" +
                                                             "}";
                                      })
                                  );
                                  buttons.Add(Html.X().Button()
                                      .ID("btnDeleteLine")
                                      .Icon(Icon.Delete)
                                      .Listeners(ls =>
                                      {
                                          ls.Click.Handler = @"if ( !#{NoSequenceLineGridPanel}.hasSelection() ) {
                                                                    return false;
                                                                } else {
                                                                    #{NoSequenceLineGridPanel}.deleteSelected();
                                                                    return true;
                                                                }";
                                      })
                                  );
                              })
                          );
                      })
                      .Store(Html.X().Store()
                          .ID("NoSequenceLineGridStore")
                          .Model(
                              Html.X().Model()
                                  .IDProperty("LineNo")
                                  .Fields(
                                      new ModelField("LineNo", ModelFieldType.String),
                                      new ModelField("Id", ModelFieldType.String),
                                      new ModelField("StartingDate", ModelFieldType.Date),
                                      new ModelField("StartingNo", ModelFieldType.Int),
                                      new ModelField("EndingNo", ModelFieldType.Int),
                                      new ModelField("WarningNo", ModelFieldType.Int),
                                      new ModelField("CurrentNo", ModelFieldType.Int),
                                      new ModelField("FormatNo", ModelFieldType.String),
                                      new ModelField("Status", ModelFieldType.String),
                                      new ModelField("Version", ModelFieldType.String)
                                  ))
                          .DataSource(Model.NoSequenceLines)
                      )
                      .ColumnModel(cols =>
                      {
                          cols.Columns.Add(Html.X().RowNumbererColumn());
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.StartingDate).ToBuilder<DateColumn.Builder>().ID("StartingDateCol").Sortable(false).Width(125)
                              .Editor(Html.X().DateField().ID("StartingDateEditor").Format("dd-MM-yyyy"))
                          );
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.StartingNo).ToBuilder<Column.Builder>().ID("StartingNoCol").Sortable(false).Width(100)
                              .Editor(Html.X().NumberField().ID("StartingNoEditor").DecimalPrecision(0)).Renderer(RendererFormat.Number, new string[] { "'0.000/i'" })
                          );
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.EndingNo).ToBuilder<Column.Builder>().ID("EndingNoCol").Sortable(false).Width(100)
                              .Editor(Html.X().NumberField().ID("EndingNoEditor").DecimalPrecision(0)).Renderer(RendererFormat.Number, new string[] { "'0.000/i'" })
                          );
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.WarningNo).ToBuilder<Column.Builder>().ID("WarningNoCol").Sortable(false).Width(100)
                              .Editor(Html.X().NumberField().ID("WarningNoEditor").DecimalPrecision(0)).Renderer(RendererFormat.Number, new string[] { "'0.000/i'" })
                          );
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.CurrentNo).ToBuilder<Column.Builder>().ID("CurrentNoCol").Sortable(false).Width(100)
                              .Renderer(RendererFormat.Number, new string[] { "'0.000/i'" })
                          );
                          cols.Columns.Add(Html.X().ColumnFor(Model.NoSequenceLines, m => m.FormatNo).ToBuilder<Column.Builder>().ID("FormatNoCol").Sortable(false).Width(125)
                              .Editor(Html.X().TextField().ID("FormatNoEditor"))
                          );
                      })
                      .Plugins(
                          Html.X().RowEditing()
                              .Listeners(l =>
                              {
                                  l.CancelEdit.Handler = "if (e.record.phantom) { e.store.remove(e.record); }";
                              })
                      ));
              })
              .Buttons(buttons =>
              {
                  buttons.Add(Html.X().Button()
                      .ID("btnSave")
                      .Text("Save")
                      .Icon(Icon.Disk)
                      .DirectEvents(de =>
                      {
                          de.Click.Url = Url.Action("_Maintenance");
                          de.Click.Method = HttpMethod.POST;
                          de.Click.Before = "return this.up('form').isValid();";
                          de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                          de.Click.ShowWarningOnFailure = true;
                          de.Click.EventMask.ShowMask = true;
                          de.Click.FormID = "FormNoSequenceMaintenance";
                          de.Click.ExtraParams.Add(new Parameter { Name = "noSequenceLineJSON", Value = "App.NoSequenceLineGridPanel.getRowsValues()", Mode = ParameterMode.Raw, Encode = true });
                          de.Click.Success = "function(response, result) { " +
                                             " this.up('window').close();" +
                                             " App.NoSequenceList.getSelectionModel().deselectAll();" +
                                             " App.StoreNoSequenceList.load({ " +
                                             "   callback : function() { " +
                                             "     var record = App.NoSequenceList.store.getById(result.result.Id); " +
                                             "     var index = App.NoSequenceList.store.indexOf(record);" +
                                             "     App.NoSequenceList.getSelectionModel().select(index, true);" +
                                             "   }" +
                                             " });" +
                                             "}";
                      }));
                  buttons.Add(Html.X().Button()
                      .ID("btnCancel")
                      .Text("Cancel")
                      .Icon(Icon.Cancel)
                      .Listeners(ls =>
                      {
                          ls.Click.Handler = "this.up('window').close();";
                      }));
              })
      )
)

