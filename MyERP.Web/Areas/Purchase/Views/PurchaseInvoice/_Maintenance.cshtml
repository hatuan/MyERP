@model MyERP.Web.Models.PurchaseInvoiceHeaderEditViewModel

@{                                                                                  
    var documentCurrencyIsLCY = Model.CurrencyId == (long)ViewData["CurrencyLCYId"];
    var readOnlyCurrencyFactor = Model.CurrencyId == (long)ViewData["CurrencyLCYId"];
}

@(Html.X().Window()
          .ID("WindowPurchaseInvoiceHeaderMaintenance")
          .Title("Purchase Invoice Maintenance")
          .Height(800)
          .Width(950)
          .Modal(true)
          .Maximized(true)
          .Layout(LayoutType.Fit)
          .MarginSpec("0 5 5 0")
          .BodyPadding(5)
          .TopBar(
              Html.X().Toolbar().Items(items =>
              {
                  items.Add(Html.X().Button()
                      .ID("btnSave")
                      .Text("Save")
                      .Icon(Icon.Disk)
                      .DirectEvents(de =>
                      {
                          de.Click.Url = Url.Action("_Maintenance");
                          de.Click.Method = HttpMethod.POST;
                          de.Click.Before = "return #{FormPurchaseInvoiceHeaderMaintenance}.getForm().isValid();";
                          de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                          de.Click.ShowWarningOnFailure = true;
                          de.Click.EventMask.ShowMask = true;
                          de.Click.FormID = "FormPurchaseInvoiceHeaderMaintenance";
                          de.Click.ExtraParams.Add(new Parameter { Name = "purchaseInvoiceLinesJSON", Value = "#{PurchaseInvoiceLineGridPanel}.getRowsValues()", Mode = ParameterMode.Raw, Encode = true });
                          de.Click.Success = "function(response, result) { \n" +
                                             "  App.PurchaseInvoiceList.getSelectionModel().deselectAll(); \n" +
                                             "  App.PurchaseInvoiceList.getStore().load({ \n" +
                                             "      callback : function() { \n" +
                                             "          var record = App.PurchaseInvoiceList.store.getById(result.result.Id); \n" +
                                             "          var index = App.PurchaseInvoiceList.store.indexOf(record); \n" +
                                             "          App.PurchaseInvoiceList.getSelectionModel().select(index, true); \n" +
                                             "          Ext.net.directRequest({ \n" +
                                             "              url:baseURL+'/Cash/CashPayment/_Maintenance?id='+result.result.Id, \n" +
                                             "              method:'GET', eventMask:{showMask:true}, \n" +
                                             "              success: function() { \n" +
                                             "                  Ext.Msg.alert('Status', 'Changes saved successfully', Ext.emptyFn); \n" +
                                             "              } \n" +
                                             "          }); \n" +
                                             "      } \n" +
                                             "  }); \n" +
                                             "}";
                      })
                  );
                  items.Add(Html.X().Button()
                      .ID("btnPrint")
                      .Text("Print")
                      .Icon(Icon.Printer)
                      .DirectEvents(de =>
                      {
                          de.Click.Action = "Print";
                          de.Click.Before = "return #{Id}.getValue() !== '';";
                          de.Click.ShowWarningOnFailure = true;
                          de.Click.EventMask.ShowMask = true;
                          de.Click.ExtraParams.Add(new Parameter("id", "#{Id}.getValue()", ParameterMode.Raw));
                          de.Click.Success = "function(response, result) { \n" +
                                             "  showPreviewReport(result.result.FileName); \n" +
                                             "}";
                      })
                  );
              })
          )
          .Bin(
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("BuyFromVendorStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "BusinessPartner" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["BuyFromVendors"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("PayToVendorStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "BusinessPartner" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["PayToVendors"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("CurrencyStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Currency", new { area = "" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["Currencies"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("AccountPayableStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Account" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["AccountPayables"]),
              Html.X().Store()
                  .ID("ItemStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Item" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["Items"]),
              Html.X().Store()
                  .ID("UomStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupUomOfItem", "ItemUom", new { area = "Item" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("UomId")
                      .Fields(
                          new ModelField("UomId", ModelFieldType.Int),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String),
                          new ModelField("QtyPerUom", ModelFieldType.Int)
                      )
                  )
                  .Data(ViewData["UOMs"]),
              Html.X().Store()
                  .ID("LocationStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Location" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["Locations"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("VatEntryBusinessPartnerStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "BusinessPartner" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["VatEntryBusinessPartnerStore"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("VatEntryVatStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Account" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["VatEntryVatStore"]),
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("VatEntryAccountVatStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Account" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["VatEntryAccountVatStore"])
          )
          .Items(
              Html.X().FormPanel()
                  .ID("FormPurchaseInvoiceHeaderMaintenance")
                  .Layout(LayoutType.VBox)
                  .AutoScroll(true)
                  .LayoutConfig(action => action.Add(new VBoxLayoutConfig() { Align = VBoxAlign.Stretch }))
                  .Items(items =>
                  {
                      items.Add(Html.X().Container()
                          .Items(
                              Html.X().AntiForgeryField(),
                              Html.X().HiddenFor(m => m.DocSequenceId).ID("DocSequenceId"),
                              Html.X().HiddenFor(m => m.DocumentType).ID("DocumentType"),
                              Html.X().HiddenFor(m => m.Id).ID("Id"),
                              Html.X().HiddenFor(m => m.Version).ID("Version"))
                      );
                      items.Add(Html.X().Container()
                          .Layout(LayoutType.HBox)
                          .Items(
                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(600)
                                  .Items(
                                      Html.X().ComboBoxFor(m => m.BuyFromVendorId).AllowBlank(false).ID("BuyFromVendorId").Width(150)
                                          .AutoFocus(true)
                                          .DisplayField("Code")
                                          .ValueField("Id")
                                          .FieldStyle("text-transform: uppercase;")
                                          .TypeAhead(true)
                                          .MinChars(0)
                                          .PageSize(10)
                                          .SelectOnTab(true)
                                          .ForceSelection(true)
                                          .ValidateOnBlur(true)
                                          .ValidateOnChange(true)
                                          .ListConfig(Html.X().BoundList()
                                              .LoadingText("Searching...")
                                              .ItemTpl(Html.X().XTemplate()
                                                  .Html(@<text>
                                                            <tpl for=".">
                                                                <div class="search-item">
                                                                    <h3>{Code}</h3>
                                                                    {Description}
                                                                </div>
                                                            </tpl>
                                                         </text>))
                                              .MinWidth(400)
                                          )
                                          .StoreID("BuyFromVendorStore")
                                          .Listeners(ls =>
                                          {
                                              ls.BeforeQuery.Handler = @"var _id = #{BuyFromVendorId}.getValue();
                                                      this.getStore().id = _id;
                                                      /*this.getStore().load();*/";
                                          })
                                          .DirectEvents(de =>
                                          {
                                              de.Select.Action = "ChangeBuyFromVendor";
                                              de.Select.EventMask.ShowMask = true;
                                              de.Select.ExtraParams.Add(new Parameter("selectedData", "records[0].data", ParameterMode.Raw, true));
                                          }),
                                  Html.X().TextFieldFor(m => m.BuyFromVendorName).EnforceMaxLength(true).ID("BuyFromVendorName"),
                                  Html.X().TextFieldFor(m => m.BuyFromContactName).EnforceMaxLength(true).ID("BuyFromContactName"),
                                  Html.X().TextFieldFor(m => m.BuyFromAddress).EnforceMaxLength(true).ID("BuyFromAddress"),
                                  Html.X().TextFieldFor(m => m.Description).AllowBlank(false).EnforceMaxLength(true).ID("Description"),
                                  Html.X().ComboBoxFor(m => m.AccountPayableId).AllowBlank(false).ID("AccountPayableId")
                                      .DisplayField("Code")
                                      .ValueField("Id")
                                      .FieldStyle("text-transform: uppercase;")
                                      .TypeAhead(true)
                                      .MinChars(0)
                                      .PageSize(10)
                                      .SelectOnTab(true)
                                      .ForceSelection(true)
                                      .ValidateOnBlur(true)
                                      .ValidateOnChange(true)
                                      .ListConfig(Html.X().BoundList()
                                          .LoadingText("Searching...")
                                          .ItemTpl(Html.X().XTemplate()
                                              .Html(@<text>
                                                  <tpl for=".">
                                                      <div class="search-item">
                                                          <h3>{Code}</h3>
                                                          {Description}
                                                      </div>
                                                  </tpl>
                                              </text>))
                                                  .MinWidth(400)
                                              )
                                              .StoreID("AccountPayableStore")
                                              .Listeners(ls =>
                                              {
                                                  ls.BeforeQuery.Handler = @"var _id = #{AccountPayableId}.getValue();
                                                                this.getStore().id = _id;
                                                                /*this.getStore().load();*/";
                                              })
                                          ,
                                    Html.X().ComboBoxFor(m => m.DocSubType).ID("DocSubType").Editable(false).ItemsFromEnum(typeof(MyERP.DataAccess.Enum.CashPaymentDocumentSubType)).Hidden(true)),
                            Html.X().Panel()
                                .Layout(LayoutType.Form)
                                .Width(300)
                                .Items(
                                    Html.X().TextFieldFor(m => m.DocumentNo).AllowBlank(true).ReadOnly(true).ID("DocumentNo"),
                                    Html.X().DateFieldFor(m => m.DocumentDate).AllowBlank(false).ID("DocumentDate"),
                                    Html.X().DateFieldFor(m => m.PostingDate).AllowBlank(false).ID("PostingDate"),
                                    Html.X().ComboBoxFor(m => m.CurrencyId).AllowBlank(false).ID("CurrencyId")
                                        .DisplayField("Code")
                                        .ValueField("Id")
                                        .FieldStyle("text-transform: uppercase;")
                                        .TypeAhead(true)
                                        .MinChars(0)
                                        .PageSize(10)
                                        .SelectOnTab(true)
                                        .ForceSelection(true)
                                        .ValidateOnBlur(true)
                                        .ValidateOnChange(true)
                                        .ListConfig(Html.X().BoundList()
                                            .LoadingText("Searching...")
                                            .ItemTpl(Html.X().XTemplate()
                                                .Html(@<text>
                                                    <tpl for=".">
                                                        <div class="search-item">
                                                            <h3>{Code}</h3>
                                                            {Description}
                                                        </div>
                                                    </tpl>
                                                </text>))
                                                    .MinWidth(400)
                                                )
                                                .StoreID("CurrencyStore")
                                                .Listeners(ls =>
                                                {
                                                    ls.BeforeQuery.Handler = @"var _id = #{CurrencyId}.getValue();
                                                                  this.getStore().id = _id;
                                                                  this.getStore().load();";
                                                })
                                                .DirectEvents(de =>
                                                {
                                                    de.Select.Action = "ChangeCurrency";
                                                    de.Select.EventMask.ShowMask = true;
                                                    de.Select.ExtraParams.Add(new Parameter("currencyId", "records[0].data.ID", ParameterMode.Raw));
                                                    de.Select.ExtraParams.Add(new Parameter("currencyFactor", "#{CurrencyFactor}.getValue()", ParameterMode.Raw));
                                                })
                                            ,
                                            Html.X().TextFieldFor(m => m.CurrencyFactor).AllowBlank(false).ID("CurrencyFactor")
                                                .ReadOnly(readOnlyCurrencyFactor)
                                                .MaskRe(@"/[0-9\,\.]")
                                                .Listeners(ls =>
                                                {
                                                    ls.Focus.Handler = @"this.setRawValue(this.getRawValue().replace(/\./g,''))";
                                                    ls.Blur.Handler = @"var v = this.getRawValue().replace(/\./g,'').replace(',', '.');
                                                                        this.setRawValue(Ext.util.Format.number(v, '0.000,00/i'));";
                                                })
                                                .DirectEvents(de =>
                                                {
                                                    de.Change.Action = "ChangeCurrencyFactor"; @*HttpMethod.POST will post FORM to action *@
                                                    de.Change.EventMask.ShowMask = true;
                                                    de.Change.ExtraParams.Add(new Parameter("purchaseInvoiceLinesJSON", "#{PurchaseInvoiceLineGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                                                    de.Change.Success = "function() { \n"+
                                                                        "   PurchaseInvoice.CalcHeaderTotal(#{PurchaseInvoiceLineGridPanel}); \n" +
                                                                        "}";
                                                })
                                                .CheckChangeEvents(new string[]{"blur"})
                                            ,
                                            Html.X().ComboBoxFor(m => m.Status).Editable(false).ReadOnly(true).ItemsFromEnum(typeof(MyERP.DataAccess.Enum.CashDocumentStatusType)).ID("Status")
                                        )
                                ));
                      items.Add(Html.X().TabPanel()
                          .Height(350)
                          .Items(tabPanelItems => 
                          {
                              tabPanelItems.Add(Html.X().GridPanel()
                                  .ID("PurchaseInvoiceLineGridPanel")
                                  .Height(350)
                                  .Title("Purchase Invoice Line")
                                  .Border(true)
                                  .View(new GridView() { MarkDirty = false, KeyMap = { new KeyBindItem{Key = "ctrl+a", Handler = "#{btnAddLine}.fireEvent('click')"}}})
                                  .EnableColumnHide(false)
                                  .LeftBar(leftBarItems =>
                                  {
                                      leftBarItems.Add(Html.X().Toolbar()
                                          .Flat(true)
                                          .Layout(LayoutType.VBox)
                                          .Items(buttons =>
                                          {
                                              buttons.Add(Html.X().Button()
                                                  .ID("btnAddLine")
                                                  .Icon(Icon.Add)
                                                  .DirectEvents(de =>
                                                  {
                                                      de.Click.Action = "AddLine";
                                                      de.Click.ExtraParams.Add(new Parameter("purchaseInvoiceLinesJSON", "#{PurchaseInvoiceLineGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                                                      de.Click.Before = "return #{FormPurchaseInvoiceHeaderMaintenance}.getForm().isValid();";
                                                      de.Click.Success = "function(response, result) {" +
                                                                         "  var grid = this.up('grid');" +
                                                                         "  var record = grid.store.getById(result.result.LineNo); " +
                                                                         "  var index = grid.store.indexOf(record);" +
                                                                         "  grid.getSelectionModel().select(index, true);" +
                                                                         "  Ext.Function.defer(function() {" +
                                                                         "      grid.editingPlugin.startEdit(index, 1);" +
                                                                         "  }, 100);" +
                                                                         "}";
                                                  })
                                              );
                                              buttons.Add(Html.X().Button()
                                                  .ID("btnDeleteLine")
                                                  .Icon(Icon.Delete)
                                                  .Listeners(ls =>
                                                  {
                                                      ls.Click.Handler = @"if ( !#{PurchaseInvoiceLineGridPanel}.hasSelection() ) {
                                                                              return false;
                                                                          } else {
                                                                              Ext.Msg.confirm('Alert', 'Do you want to DELETE?', function(btn) {
                                                                                if(btn == 'yes') {
                                                                                    #{PurchaseInvoiceLineGridPanel}.deleteSelected();
                                                                                    return true;        
                                                                                } else 
                                                                                    return false;
                                                                              });
                                                                          }";
                                                  })
                                              );
                                          })
                                      );
                                  })
                                  .Store(Html.X().Store()
                                      .ID("PurchaseInvoiceLineGridStore")
                                      .Model(
                                          Html.X().Model()
                                              .IDProperty("LineNo")
                                              .Fields(
                                                  new ModelField("LineNo", ModelFieldType.String),
                                                  new ModelField("Id", ModelFieldType.String),
                                                  new ModelField("ItemId", ModelFieldType.Int),
                                                  new ModelField("Item", ModelFieldType.Object),
                                                  new ModelField("Description", ModelFieldType.String),
                                                  new ModelField("UomId", ModelFieldType.String),
                                                  new ModelField("Uom", ModelFieldType.Object),
                                                  new ModelField("LocationId", ModelFieldType.String),
                                                  new ModelField("Location", ModelFieldType.Object),
                                                  new ModelField("Quantity", ModelFieldType.Float),
                                                  new ModelField("PurchasePrice", ModelFieldType.Float),
                                                  new ModelField("LineDiscountPercentage", ModelFieldType.Int),
                                                  new ModelField("LineDiscountAmount", ModelFieldType.Float),
                                                  new ModelField("LineAmount", ModelFieldType.Float),
                                                  new ModelField("PurchasePriceLCY", ModelFieldType.Float),
                                                  new ModelField("LineDiscountAmountLCY", ModelFieldType.Float),
                                                  new ModelField("LineAmountLCY", ModelFieldType.Float),
                                                  new ModelField("InvoiceDiscountAmount", ModelFieldType.Float),
                                                  new ModelField("InvoiceDiscountAmountLCY", ModelFieldType.Float),
                                                  new ModelField("UnitPrice", ModelFieldType.Float),
                                                  new ModelField("UnitPriceLCY", ModelFieldType.Float),
                                                  new ModelField("Amount", ModelFieldType.Float),
                                                  new ModelField("AmountLCY", ModelFieldType.Float),
                                                  new ModelField("ChargeAmount", ModelFieldType.Float),
                                                  new ModelField("ChargeAmountLCY", ModelFieldType.Float),
                                                  new ModelField("ImportDutyAmount", ModelFieldType.Float),
                                                  new ModelField("ImportDutyAmountLCY", ModelFieldType.Float),
                                                  new ModelField("ExciseTaxAmount", ModelFieldType.Float),
                                                  new ModelField("ExciseTaxAmountLCY", ModelFieldType.Float),
                                                  new ModelField("VatBaseAmount", ModelFieldType.Float),
                                                  new ModelField("VatId", ModelFieldType.String),
                                                  new ModelField("Vat", ModelFieldType.Object),
                                                  new ModelField("VatPercentage", ModelFieldType.Int),
                                                  new ModelField("VatAmount", ModelFieldType.Float),
                                                  new ModelField("VatBaseAmountLCY", ModelFieldType.Float),
                                                  new ModelField("VatAmountLCY", ModelFieldType.Float),
                                                  new ModelField("QtyPerUom", ModelFieldType.Float),
                                                  new ModelField("QuantityBase", ModelFieldType.Float),
                                                  new ModelField("CostPrice", ModelFieldType.Float),
                                                  new ModelField("CostPriceQtyBase", ModelFieldType.Float),
                                                  new ModelField("CostAmount", ModelFieldType.Float),
                                                  new ModelField("CostPriceLCY", ModelFieldType.Float),
                                                  new ModelField("CostPriceQtyBaseLCY", ModelFieldType.Float),
                                                  new ModelField("CostAmountLCY", ModelFieldType.Float)))
                                      .DataSource(Model.PurchaseInvoiceLines))
                                  .ColumnModel(cols =>
                                  {
                                      cols.Columns.Add(Html.X().RowNumbererColumn());
                                      cols.Columns.Add(
                                                  Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.ItemId).ToBuilder<Column.Builder>().ID("PurchaseLineItemIdCol").Sortable(false).Width(125)
                                                      .Editor(
                                                          Html.X().ComboBox()
                                                              .ID("PurchaseLineItemEditor")
                                                              .DisplayField("Code")
                                                              .ValueField("Id")
                                                              .FieldLabel("")
                                                              .FieldStyle("text-transform: uppercase;")
                                                              .AllowBlank(false)
                                                              .TypeAhead(true)
                                                              .MinChars(0)
                                                              .PageSize(10)
                                                              .SelectOnTab(true)
                                                              .ForceSelection(true)
                                                              .ValidateOnBlur(true)
                                                              .ValidateOnChange(true)
                                                              .ListConfig(Html.X().BoundList()
                                                                  .LoadingText("Searching...")
                                                                  .ItemTpl(Html.X().XTemplate()
                                                                      .Html(@<text>
                                                                                <div class="search-item">
                                                                                    <h3>{Code}</h3>
                                                                                    {Description}
                                                                                </div>
                                                                             </text>)
                                                                  )
                                                                  .MinWidth(400)
                                                              )
                                                              .StoreID("ItemStore")
                                                              .Listeners(ls =>
                                                              {
                                                                  ls.BeforeQuery.Handler = @"var _id = #{PurchaseLineItemEditor}.getValue();
                                                                                          this.getStore().id = _id;
                                                                                          /*this.getStore().load();*/";
                                                              })
                                                      )
                                                  .Renderer("PurchaseInvoice.ItemRenderer")
                                                  .EditorOptions(action =>
                                                  {
                                                      action.Listeners.StartEdit.Delay = 500;
                                                  })
                                            );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.Description).ToBuilder<Column.Builder>().ID("PurchaseLineDescriptionCol").Sortable(false).Width(256)
                                              .Editor(Html.X().TextField().ID("PurchaseLineDescriptionEditor"))
                                          );
                                      cols.Columns.Add(
                                                  Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LocationId).ToBuilder<Column.Builder>().ID("PurchaseLineLocationIdCol").Sortable(false).Width(125)
                                                      .Editor(
                                                          Html.X().ComboBox()
                                                              .ID("PurchaseLineLocationEditor")
                                                              .DisplayField("Code")
                                                              .ValueField("Id")
                                                              .FieldLabel("")
                                                              .FieldStyle("text-transform: uppercase;")
                                                              .AllowBlank(false)
                                                              .TypeAhead(true)
                                                              .MinChars(0)
                                                              .PageSize(10)
                                                              .SelectOnTab(true)
                                                              .ForceSelection(true)
                                                              .ValidateOnBlur(true)
                                                              .ValidateOnChange(true)
                                                              .ListConfig(Html.X().BoundList()
                                                                  .LoadingText("Searching...")
                                                                  .ItemTpl(Html.X().XTemplate()
                                                                      .Html(@<text>
                                                                                <div class="search-item">
                                                                                    <h3>{Code}</h3>
                                                                                    {Description}
                                                                                </div>
                                                                             </text>)
                                                                  )
                                                                  .MinWidth(400)
                                                              )
                                                              .StoreID("LocationStore")
                                                              .Listeners(ls =>
                                                              {
                                                                  ls.BeforeQuery.Handler = @"var _id = #{PurchaseLineLocationEditor}.getValue();
                                                                                          this.getStore().id = _id;
                                                                                          /*this.getStore().load();*/";
                                                              })
                                                      )
                                                  .Renderer("PurchaseInvoice.LocationRenderer")
                                                  .EditorOptions(action =>
                                                  {
                                                      action.Listeners.StartEdit.Delay = 500;
                                                  })
                                            );
                                      cols.Columns.Add(
                                                  Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.UomId).ToBuilder<Column.Builder>().ID("PurchaseLineUomIdCol").Sortable(false).Width(125)
                                                      .Editor(
                                                          Html.X().ComboBox()
                                                              .ID("PurchaseLineUomEditor")
                                                              .DisplayField("Code")
                                                              .ValueField("UomId")
                                                              .FieldLabel("")
                                                              .FieldStyle("text-transform: uppercase;")
                                                              .AllowBlank(false)
                                                              .TypeAhead(true)
                                                              .MinChars(0)
                                                              .PageSize(10)
                                                              .SelectOnTab(true)
                                                              .ForceSelection(true)
                                                              .ValidateOnBlur(true)
                                                              .ValidateOnChange(true)
                                                              .ListConfig(Html.X().BoundList()
                                                                  .LoadingText("Searching...")
                                                                  .ItemTpl(Html.X().XTemplate()
                                                                      .Html(@<text>
                                                                                <div class="search-item">
                                                                                    <h3>{Code}</h3>
                                                                                    {Description}
                                                                                </div>
                                                                             </text>)
                                                                  )
                                                                  .MinWidth(400)
                                                              )
                                                              .StoreID("UomStore")
                                                      )
                                                  .Renderer("PurchaseInvoice.UomRenderer")
                                                  .EditorOptions(action =>
                                                  {
                                                      action.Listeners.StartEdit.Delay = 500;
                                                  })
                                            );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.Quantity).ToBuilder<Column.Builder>().ID("PurchaseLineQuantityCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineQuantityEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                      );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.PurchasePrice).ToBuilder<Column.Builder>().ID("PurchaseLinePurchasePriceCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("PurchaseLinePurchasePriceEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LineDiscountPercentage).ToBuilder<Column.Builder>().ID("PurchaseLineDiscountPercentageCol").Sortable(false).Width(80)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineDiscountPercentageEditor").SelectOnFocus(true).DecimalPrecision(0).MaxValue(100).MinValue(0)).Renderer(RendererFormat.Number, new string[] { "'0.000/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LineDiscountAmount).ToBuilder<Column.Builder>().ID("PurchaseLineDiscountAmountCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineDiscountAmountEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LineAmount).ToBuilder<Column.Builder>().ID("PurchaseLineAmountCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineAmountEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.PurchasePriceLCY).ToBuilder<Column.Builder>().ID("PurchaseLinePurchasePriceLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
                                              .Editor(Html.X().NumberField().ID("PurchaseLinePurchasePriceLCYEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LineDiscountAmountLCY).ToBuilder<Column.Builder>().ID("PurchaseLineDiscountAmountLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineDiscountAmountLCYEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.LineAmountLCY).ToBuilder<Column.Builder>().ID("PurchaseLineAmountLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
                                              .Editor(Html.X().NumberField().ID("PurchaseLineAmountLCYEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.ChargeAmount).ToBuilder<Column.Builder>().ID("PurchaseLineChargeAmountCol").Sortable(false).Width(125)
                                              .Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.PurchaseInvoiceLines, m => m.ChargeAmountLCY).ToBuilder<Column.Builder>().ID("PurchaseLineChargeAmountLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
                                              .Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                  })
                                  .SelectionModel(Html.X().CellSelectionModel())
                                  .Plugins(Html.X().CellEditing().Listeners(ls =>
                                  {
                                      ls.Edit.Handler = "function(editor, e) { \n" +
                                                        "   if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) { \n" +
                                                        "       Ext.net.DirectMethod.request({ \n" +
                                                        "           url: '" + Url.Action("LineEdit") + "', \n" +
                                                        "           params: { \n" +
                                                        "               lineNo: e.record.data.LineNo, \n" +
                                                        "               field: e.field, \n" +
                                                        "               oldValue: e.originalValue, \n" +
                                                        "               newValue: e.value, \n" +
                                                        "               recordData: e.record.data, \n" +
                                                        "               headerData: #{FormPurchaseInvoiceHeaderMaintenance}.getForm().getValues() \n" +
                                                        "           }, \n" +
                                                        "           eventMask: { \n" +
                                                        "               showMask:true, \n" +
                                                        "               target:'customtarget', \n" +
                                                        "               customTarget:#{PurchaseInvoiceLineGridPanel} \n" +
                                                        "           }, \n" +
                                                        "           success: function() { \n" +
                                                        "               #{PurchaseInvoiceLineGridPanel}.getView().refresh(); \n" +
                                                        "               PurchaseInvoice.CalcHeaderTotal(e.grid); \n" +
                                                        "           } \n" +
                                                        "       }); \n" +
                                                        "   } \n" +
                                                        "}";
                                      ls.BeforeEdit.Fn = "PurchaseInvoice.PurchaseInvoiceLineBeforeEdit";
                                  })));
                              tabPanelItems.Add(Html.X().Panel()
                                  .ID("VatEntryPanel")
                                  .Height(350)
                                  .Layout(LayoutType.Fit)
                                  .Title("Vat Enties")
                                  .Border(true)
                                  .Loader(
                                      Html.X().ComponentLoader()
                                          .Url(Url.Action("Index", "VatEntry", new { area = "Vat" }))
                                          .AjaxOptions(new Ext.Net.AjaxOptions { Method = HttpMethod.GET })
                                          .LoadMask(mask => mask.ShowMask = true)
                                          .Mode(LoadMode.Script)
                                          .Params(new { model = new { Model.PurchaseVatEntries }, containerId = "VatEntryPanel" })
                                  ));
                          }));
                      items.Add(Html.X().Container()
                          .Layout(LayoutType.HBox)
                          .Items(

                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(300),
                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(600)
                                  .Items(totalItems =>
                                  {
                                      totalItems.Add(Html.X().FieldContainer().FieldLabel("Total Amount")
                                          .Layout(LayoutType.HBox)
                                          .Defaults(defaults =>
                                          {
                                              defaults.Add(new Parameter("Flex", "1", ParameterMode.Raw));
                                              defaults.Add(new Parameter("HideLabel", "true", ParameterMode.Raw));
                                          })
                                          .Items(
                                              Html.X().TextFieldFor(m => m.TotalAmount)
                                                  .ID("TotalAmount")
                                                  .ReadOnly(true)
                                                  .TabIndex(-1)
                                                  .MarginSpec("0 3 0 0")
                                              ,
                                              Html.X().TextFieldFor(m => m.TotalAmountLCY)
                                                  .ID("TotalAmountLCY")
                                                  .ReadOnly(true)
                                                  .TabIndex(-1)
                                                  .Hidden(documentCurrencyIsLCY))
                                          );
                                  })
                              )
                      );
                  })
                )

                .Buttons(buttons =>
                {
                    buttons.Add(Html.X().Button()
                        .ID("btnClose")
                        .Text("Close")
                        .Icon(Icon.Cancel)
                        .Listeners(ls =>
                        {
                            ls.Click.Handler = "this.up('window').close();";
                        }));
                })
)


