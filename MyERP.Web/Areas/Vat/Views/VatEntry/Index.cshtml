@model List<MyERP.Web.Models.VatEntryEditViewModel>

@{
    var documentCurrencyIsLCY = (bool)ViewData["CurrencyIsLCY"];
}

@(Html.X().GridPanel()
  .ID("VatEntryGridPanel")
  .Height(350)
  .Title("Vat")
  .Border(true)
  .View(new GridView() { MarkDirty = false, KeyMap = { new KeyBindItem { Key = "ctrl+a", Handler = "#{btnVatEntryAddLine}.fireEvent('click')" } } })
  .EnableColumnHide(false)
  .LeftBar(leftBarItems =>
  {
      leftBarItems.Add(Html.X().Toolbar()
          .Flat(true)
          .Layout(LayoutType.VBox)
          .Items(buttons =>
          {
              buttons.Add(Html.X().Button()
                  .ID("btnVatEntryAddLine")
                  .Icon(Icon.Add)
                  .DirectEvents(de =>
                  {
                      de.Click.Action = "AddLine";
                      de.Click.ExtraParams.Add(new Parameter("vatEntryJSON", "#{VatEntryGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                      de.Click.Before = "return #{FormPurchaseInvoiceHeaderMaintenance}.getForm().isValid();";
                      de.Click.Success = "function(response, result) {" +
                                         "  var grid = this.up('grid');" +
                                         "  var record = grid.store.getById(result.result.LineNo); " +
                                         "  var index = grid.store.indexOf(record);" +
                                         "  grid.getSelectionModel().select(index, true);" +
                                         "  Ext.Function.defer(function() {" +
                                         "      grid.editingPlugin.startEdit(index, 1);" +
                                         "  }, 100);" +
                                         "}";
                  })
              );
              buttons.Add(Html.X().Button()
                  .ID("btnVatEntryDeleteLine")
                  .Icon(Icon.Delete)
                  .Listeners(ls =>
                  {
                      ls.Click.Handler = @"if ( !#{VatEntryGridPanel}.hasSelection() ) {
                                                  return false;
                                              } else {
                                                  Ext.Msg.confirm('Alert', 'Do you want to DELETE?', function(btn) {
                                                    if(btn == 'yes') {
                                                        #{VatEntryGridPanel}.deleteSelected();
                                                        return true;
                                                    } else
                                                        return false;
                                                  });
                                              }";
                  })
              );
          })
      );
  })
  .Store(Html.X().Store()
      .ID("VatEntryGridStore")
      .Model(
          Html.X().Model()
              .IDProperty("LineNo")
              .Fields(
                  new ModelField("LineNo", ModelFieldType.String),
                  new ModelField("Id", ModelFieldType.String),
                  new ModelField("InvoiceIssuedDate", ModelFieldType.Date),
                  new ModelField("InvoiceNumber", ModelFieldType.String),
                  new ModelField("InvoiceSeries", ModelFieldType.String),
                  new ModelField("BusinessPartnerId", ModelFieldType.String),
                  new ModelField("BusinessPartner", ModelFieldType.Object),
                  new ModelField("BusinessPartnerName", ModelFieldType.String),
                  new ModelField("BusinessPartnerAddress", ModelFieldType.String),
                  new ModelField("TaxCode", ModelFieldType.String),
                  new ModelField("Description", ModelFieldType.String),
                  new ModelField("CurrencyId", ModelFieldType.String),
                  new ModelField("CurrencyFactor", ModelFieldType.Float),
                  new ModelField("CurrencyFactor", ModelFieldType.Float),
                  new ModelField("VatBaseAmount", ModelFieldType.Float),
                  new ModelField("VatBaseAmountLCY", ModelFieldType.Float),
                  new ModelField("VatId", ModelFieldType.String),
                  new ModelField("Vat", ModelFieldType.Object),
                  new ModelField("VatPercentage", ModelFieldType.Float),
                  new ModelField("VatAmount", ModelFieldType.Float),
                  new ModelField("VatAmountLCY", ModelFieldType.Float),
                  new ModelField("AccountVatId", ModelFieldType.String),
                  new ModelField("AccountVat", ModelFieldType.Object)
                  ))
      .DataSource(Model))
  .ColumnModel(cols =>
  {
      cols.Columns.Add(Html.X().RowNumbererColumn());
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.InvoiceIssuedDate).ToBuilder<Column.Builder>().ID("VatEntryInvoiceIssuedDateCol").Sortable(false).Width(125)
          .Editor(Html.X().TextField().ID("VatEntryInvoiceIssuedDateEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.InvoiceNumber).ToBuilder<Column.Builder>().ID("VatEntryInvoiceNumberCol").Sortable(false).Width(125)
          .Editor(Html.X().TextField().ID("VatEntryInvoiceNumberEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.InvoiceSeries).ToBuilder<Column.Builder>().ID("VatEntryInvoiceSeriesCol").Sortable(false).Width(125)
          .Editor(Html.X().TextField().ID("VatEntryInvoiceSeriesEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.CorrespAccountId).ToBuilder<Column.Builder>().ID("VatEntryBusinessPartnerIdCol").Sortable(false).Width(125)
                      .Editor(
                          Html.X().ComboBox()
                              .ID("VatEntryBusinessPartnerEditor")
                              .DisplayField("Code")
                              .ValueField("Id")
                              .FieldLabel("")
                              .FieldStyle("text-transform: uppercase;")
                              .AllowBlank(false)
                              .TypeAhead(true)
                              .MinChars(0)
                              .PageSize(10)
                              .SelectOnTab(true)
                              .ForceSelection(true)
                              .ValidateOnBlur(true)
                              .ValidateOnChange(true)
                              .ListConfig(Html.X().BoundList()
                                  .LoadingText("Searching...")
                                  .ItemTpl(Html.X().XTemplate()
                                      .Html(@<text>
                                            <div class="search-item">
                                                <h3>{Code}</h3>
                                                {Description}
                                            </div>
                                        </text>)
                                                  )
                                                  .MinWidth(400)
                                              )
                              .StoreID("VatEntryBusinessPartnerStore")
                              .Listeners(ls =>
                                  {
                                      ls.BeforeQuery.Handler = @"var _id = #{VatEntryBusinessPartnerEditor}.getValue();
                                                  this.getStore().id = _id;
                                                  /*this.getStore().load();*/";
                                  })
                              )
                     .Renderer("VatEntry.VatEntryBusinessPartnerRenderer")
                     .EditorOptions(action =>
                         {
                             action.Listeners.StartEdit.Delay = 500;
                         }));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.BusinessPartnerName).ToBuilder<Column.Builder>().ID("VatEntryBusinessPartnerNameCol").Sortable(false).Width(256)
          .Editor(Html.X().TextField().ID("VatEntryBusinessPartnerNameEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.BusinessPartnerAddress).ToBuilder<Column.Builder>().ID("VatEntryBusinessPartnerAddressCol").Sortable(false).Width(256)
          .Editor(Html.X().TextField().ID("VatEntryBusinessPartnerAddressEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.TaxCode).ToBuilder<Column.Builder>().ID("VatEntryTaxCodeCol").Sortable(false).Width(256)
          .Editor(Html.X().TextField().ID("VatEntryTaxCodeEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.Description).ToBuilder<Column.Builder>().ID("VatEntryDescriptionCol").Sortable(false).Width(256)
            .Editor(Html.X().TextField().ID("VatEntryDescriptionEditor")));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.VatBaseAmount).ToBuilder<Column.Builder>().ID("VatEntryVatBaseAmountCol").Sortable(false).Width(125)
        .Editor(Html.X().NumberField().ID("VatEntryVatBaseAmountEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" }));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.VatBaseAmountLCY).ToBuilder<Column.Builder>().ID("VatEntryVatBaseAmountLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
        .Editor(Html.X().NumberField().ID("VatEntryVatBaseAmountLCYEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" }));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.VatId).ToBuilder<Column.Builder>().ID("VatEntryVatIdCol").Sortable(false).Width(125)
          .Editor(Html.X().ComboBox()
              .ID("VatEntryVatEditor")
              .DisplayField("Code")
              .ValueField("Id")
              .FieldLabel("")
              .FieldStyle("text-transform: uppercase;")
              .AllowBlank(false)
              .TypeAhead(true)
              .MinChars(0)
              .PageSize(10)
              .SelectOnTab(true)
              .ForceSelection(true)
              .ValidateOnBlur(true)
              .ValidateOnChange(true)
              .ListConfig(Html.X().BoundList()
                  .LoadingText("Searching...")
                  .ItemTpl(Html.X().XTemplate()
                      .Html(@<text>
                                <div class="search-item">
                                    <h3>{Code}</h3>
                                    {Description}
                                </div>
                             </text>)
                  )
                  .MinWidth(400)
              )
              .StoreID("VatEntryVatStore")
              .Listeners(ls =>
              {
                  ls.BeforeQuery.Handler = @"var _id = #{VatEntryVatEditor}.getValue();
                                                  this.getStore().id = _id;
                                                  /*this.getStore().load();*/";
              })
          )
          .Renderer("VatEntry.VatEntryVatRenderer")
          .EditorOptions(action =>
          {
              action.Listeners.StartEdit.Delay = 500;
          })
      );
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.VatAmount).ToBuilder<Column.Builder>().ID("VatEntryVatAmountCol").Sortable(false).Width(125)
          .Editor(Html.X().NumberField().ID("VatEntryVatAmountEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" }));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.VatAmountLCY).ToBuilder<Column.Builder>().ID("VatEntryVatAmountLCYCol").Sortable(false).Width(125).Hidden(documentCurrencyIsLCY)
          .Editor(Html.X().NumberField().ID("VatEntryVatAmountLCYEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" }));
      cols.Columns.Add(Html.X().ColumnFor(Model, m => m.AccountVatId).ToBuilder<Column.Builder>().ID("VatEntryAccountVatIdCol").Sortable(false).Width(125)
          .Editor(Html.X().ComboBox()
              .ID("VatEntryAccountVatEditor")
              .DisplayField("Code")
              .ValueField("Id")
              .FieldLabel("")
              .FieldStyle("text-transform: uppercase;")
              .AllowBlank(false)
              .TypeAhead(true)
              .MinChars(0)
              .PageSize(10)
              .SelectOnTab(true)
              .ForceSelection(true)
              .ValidateOnBlur(true)
              .ValidateOnChange(true)
              .ListConfig(Html.X().BoundList()
                  .LoadingText("Searching...")
                  .ItemTpl(Html.X().XTemplate()
                      .Html(@<text>
                                <div class="search-item">
                                    <h3>{Code}</h3>
                                    {Description}
                                </div>
                             </text>)
                  )
                  .MinWidth(400)
              )
              .StoreID("VatEntryAccountVatStore")
              .Listeners(ls =>
              {
                  ls.BeforeQuery.Handler = @"var _id = #{VatEntryAccountVatEditor}.getValue();
                                                  this.getStore().id = _id;
                                                  /*this.getStore().load();*/";
              })
          )
          .Renderer("VatEntry.VatEntryAccountVatRenderer")
          .EditorOptions(action =>
          {
              action.Listeners.StartEdit.Delay = 500;
          })
      );
  })
  .SelectionModel(Html.X().CellSelectionModel())
  .Plugins(Html.X().CellEditing().Listeners(ls =>
      {
          ls.Edit.Handler = "function(editor, e) { \n" +
                            "   if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) { \n" +
                            "       Ext.net.DirectMethod.request({ \n" +
                            "           url: '" + Url.Action("LineEdit") + "', \n" +
                            "           params: { \n" +
                            "               lineNo: e.record.data.LineNo, \n" +
                            "               field: e.field, \n" +
                            "               oldValue: e.originalValue, \n" +
                            "               newValue: e.value, \n" +
                            "               recordData: e.record.data, \n" +
                            "               headerData: #{FormPurchaseInvoiceHeaderMaintenance}.getForm().getValues() \n" +
                            "           }, \n" +
                            "           eventMask: { \n" +
                            "               showMask:true, \n" +
                            "               target:'customtarget', \n" +
                            "               customTarget:#{VatEntryGridPanel} \n" +
                            "           }, \n" +
                            "           success: function() { \n" +
                            "               #{VatEntryGridPanel}.getView().refresh(); \n" +
                            "           } \n" +
                            "       }); \n" +
                            "   } \n" +
                            "}";
          ls.BeforeEdit.Fn = "CashReceipt.CashLineBeforeEdit";
      })
    )
)