@using AjaxOptions = Ext.Net.AjaxOptions
@model List<MyERP.Web.Models.SalesPriceGroupViewModel>

@(Html.X().Panel()
      .ID("SalesPriceGroupMainPanel")
      .Title("Sales Price")
      .Layout(LayoutType.Border)
      .TopBar(topBarItems =>
      {
          topBarItems.Add(Html.X().Toolbar().Items(buttons =>
          {
              buttons.Add(Html.X().Button()
                  .ID("btnEdit")
                  .Text("Edit")
                  .Icon(Icon.NoteEdit)
                  .Disabled(true)
                  .DirectEvents(de =>
                  {
                      de.Click.Url = Url.Action("_Maintenance");
                      de.Click.Before = "return #{SalesPriceGroupGrid}.hasSelection();";
                      de.Click.Method = HttpMethod.GET;
                      de.Click.ShowWarningOnFailure = true;
                      de.Click.EventMask.ShowMask = true;
                      de.Click.ExtraParams.Add(new Parameter("ID", "#{SalesPriceGroupList}.getSelectionModel().getSelected().getAt(0).getId()", ParameterMode.Raw));
                  })
                  );
              buttons.Add(Html.X().Button()
                  .ID("btnAdd")
                  .Text("Add")
                  .Icon(Icon.Add)
                  .DirectEvents(de =>
                  {
                      de.Click.Url = Url.Action("_Maintenance");
                      de.Click.Before = "#{SalesPriceGroupGrid}.getSelectionModel().deselectAll();";
                      de.Click.Method = HttpMethod.GET;
                      de.Click.ShowWarningOnFailure = true;
                      de.Click.EventMask.ShowMask = true;
                  })
                  );
              buttons.Add(Html.X().Button()
                  .ID("btnDelete")
                  .Text("Delete")
                  .Icon(Icon.Delete)
                  .Disabled(true)
                  .DirectEvents(de =>
                  {
                      de.Click.Url = Url.Action("Delete");
                      de.Click.Before = "return #{SalesPriceGroupGrid}.hasSelection();";
                      de.Click.Method = HttpMethod.GET;
                      de.Click.Confirmation.ConfirmRequest = true;
                      de.Click.Confirmation.Title = "Alert";
                      de.Click.Confirmation.Message = "Do you want to DELETE ?";
                      de.Click.ExtraParams.Add(new Parameter("ID", "#{SalesPriceGroupGrid}.getSelectionModel().getSelected().getAt(0).getId()", ParameterMode.Raw));
                      de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                      de.Click.Success = "function(response, result) { " +
                                         "  App.StoreSalesPriceGroupList.reload({ " +
                                         "    callback : function() { " +
                                         "      Ext.net.directRequest({url:'/SalesPrice/SalesPriceGroup/_Maintenance', method:'GET', eventMask:{showMask:true}});" +
                                         "    }" +
                                         "  });" +
                                         "}";
                  })
                  );
          }));
      })
      .Items(its =>
      {
          its.Add(Html.X().GridPanel()
              .ID("SalesPriceGroupGrid")
              .Title("Sales Price Group")
              .Region(Region.West)
              .Layout(LayoutType.Fit)
              .Width(300)
              .Border(true)
              .MarginSpec("0 0 5 5")
              .Store(Html.X().Store()
                  .ID("StoreSalesPriceGroupList")
                  .RemoteSort(true)
                  .PageSize(15)
                  .Sorters("Code", Ext.Net.SortDirection.ASC)
                  .Model(
                      Html.X().Model()
                          .IDProperty("Id")
                          .Fields(
                              new ModelField("Id", ModelFieldType.Int),
                              new ModelField("OrganizationCode", ModelFieldType.String),
                              new ModelField("Code", ModelFieldType.String),
                              new ModelField("Description", ModelFieldType.String),
                              new ModelField("Status", ModelFieldType.String),
                              new ModelField("Version", ModelFieldType.Int)
                          ))
                  .Proxy(
                      Html.X().AjaxProxy()
                          .Url(Url.Action("GetData"))
                          .Reader(Html.X().JsonReader().RootProperty("data")))
              )
              .ColumnModel(
                  Html.X().Column().Text("Org").DataIndex("OrganizationCode").Width(75),
                  Html.X().Column().Text("Code").DataIndex("Code").Width(85),
                  Html.X().Column().Text("Description").DataIndex("Description").Flex(1)
              )
              .BottomBar(items =>
              {
                  items.Add(Html.X().PagingToolbar().DisplayInfo(true)
                      .Items(
                          Html.X().Label().Text("Page size:"),
                          Html.X().ToolbarSpacer().Width(10),
                          Html.X().ComboBox().Width(80)
                              .Editable(false)
                              .Items(
                                  Html.X().ListItem().Text("10"),
                                  Html.X().ListItem().Text("15"),
                                  Html.X().ListItem().Text("20")
                              )
                              .SelectedItems(
                                  Html.X().ListItem().Value("15")
                              )
                              .Listeners(ls =>
                              {
                                  ls.Select.Fn = @"function (item, records) {
                                                                    var curPageSize = #{StoreSalesPriceGroupList}.pageSize,
                                                                    wantedPageSize = parseInt(item.getValue(), 10);
                                                                    if (wantedPageSize != curPageSize) {
                                                                        #{StoreSalesPriceGroupList}.pageSize = wantedPageSize;
                                                                        #{StoreSalesPriceGroupList}.reload();
                                                                        #{StoreSalesPriceGroupList}.loadPage(1);
                                                                    }
                                                                }";
                              })
                      ));
              })
              .SelectionModel(Html.X().RowSelectionModel()
                  .Mode(SelectionMode.Single)
                  .Listeners(ls =>
                  {
                      ls.Select.Handler = "#{btnDelete}.enable();#{btnEdit}.enable();";
                      ls.Deselect.Handler = "if (!#{SalesPriceGroupGrid}.hasSelection()) {#{btnDelete}.disable();#{btnEdit}.disable()}";
                  })
                  .DirectEvents(de =>
                  {
                      de.Select.Action = "_Maintenance";
                      de.Select.Method = HttpMethod.GET;
                      de.Select.Buffer = 250;
                      de.Select.EventMask.Target = MaskTarget.CustomTarget;
                      de.Select.EventMask.CustomTarget = "FormSalesPriceGroupMaintenance";
                      de.Select.ExtraParams.Add(new Parameter("ID", "#{SalesPriceGroupGrid}.getSelectionModel().getSelected().getAt(0).getId()", ParameterMode.Raw));
                  })
              )
              .ViewConfig(new GridView() { Listeners = { Refresh = { Handler = "#{btnDelete}.disable();#{btnEdit}.disable();" } } })
          );
          its.Add(Html.X().Panel()
              .ID("SalesPriceGroupMaintenanceContainer")
              .Header(false)
              .Region(Region.Center)
              .Layout(LayoutType.Fit)
              .Loader(Html.X().ComponentLoader()
                  .Url(Url.Action("_Maintenance"))
                  .AjaxOptions(new AjaxOptions(){ Method = HttpMethod.GET })
                  .Mode(LoadMode.Script)
                  .LoadMask(ac => { ac.ShowMask = true; })
                  .Params(new { containerId = "SalesPriceGroupMaintenanceContainer" }))

          );
      })
)

