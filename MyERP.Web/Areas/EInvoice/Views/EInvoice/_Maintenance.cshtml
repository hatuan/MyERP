@using MyERP.DataAccess.Enum
@model MyERP.Web.Models.EInvHeaderEditViewModel

@{                                                                                  
    var documentCurrencyIsLCY = Model.CurrencyId == (long)ViewData["CurrencyLCYId"];
    var readOnlyCurrencyFactor = Model.CurrencyId == (long)ViewData["CurrencyLCYId"];
    var readOnly = Model.Status != EInvoiceDocumentStatusType.Draft;
}


@(Html.X().Window()
          .ID("WindowEInvoiceHeaderMaintenance")
          .Title("EInvoice Maintenance")
          .Height(800)
          .Width(950)
          .Modal(true)
          .Maximized(true)
          .Layout(LayoutType.Fit)
          .MarginSpec("0 5 5 0")
          .BodyPadding(5)
          .TopBar(
              Html.X().Toolbar().Items(items =>
              {
                  items.Add(Html.X().Button()
                      .ID("btnSave")
                      .Text("Save")
                      .Disabled(Model.Status != EInvoiceDocumentStatusType.Draft)
                      .Icon(Icon.Disk)
                      .DirectEvents(de =>
                      {
                          de.Click.Url = Url.Action("_Maintenance");
                          de.Click.Method = HttpMethod.POST;
                          de.Click.Before = "return #{FormEInvoiceHeaderMaintenance}.getForm().isValid();";
                          de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                          de.Click.ShowWarningOnFailure = true;
                          de.Click.EventMask.ShowMask = true;
                          de.Click.FormID = "FormEInvoiceHeaderMaintenance";
                          de.Click.ExtraParams.Add(new Parameter { Name = "EInvoiceLinesJSON", Value = "#{EInvoiceLineGridPanel}.getRowsValues()", Mode = ParameterMode.Raw, Encode = true });
                          de.Click.Success = "function(response, opts) { \n" +
                                             "  Ext.net.directRequest({ \n" +
                                             "      url:baseURL + 'EInvoice/EInvoice/_Maintenance?id='+opts.result.Id, \n" +
                                             "      method:'GET', eventMask:{showMask:true}, \n" +
                                             "      success: function() { \n" +
                                             "          var alert = Ext.Msg.alert('Status', 'Changes saved successfully', Ext.emptyFn); \n" +
                                             "          Ext.defer(function(){ alert.toFront(); }, 100); \n " +
                                             "      } \n" +
                                             "  }); \n" +
                                             "}";
                      })
                  );
                  items.Add(Html.X().SplitButton()
                      .ID("btnPrint")
                      .Text("Print")
                      .Icon(Icon.Printer)
                      .DirectEvents(de =>
                      {
                          de.Click.Action = "Print";
                          de.Click.Before = "return #{Id}.getValue() !== '';";
                          de.Click.ShowWarningOnFailure = true;
                          de.Click.EventMask.ShowMask = true;
                          de.Click.ExtraParams.Add(new Parameter("id", "#{Id}.getValue()", ParameterMode.Raw));
                          de.Click.Success = "function(response, result) { \n" +
                                             "  showHtmlPreviewReport(result.result.FileName); \n" +
                                             "}";
                      })
                      .Menu(Html.X().Menu().MinWidth(200)
                          .Items(
                            Html.X().MenuItem().Text("Send Mail").Tag("SendMail")
                                .Icon(Icon.Mail),
                            Html.X().MenuItem().Text("Download PDF").Tag("DownloadPDF")
                                .Icon(Icon.PageWhiteAcrobat)
                          )
                      )
                  );
                  items.Add(Html.X().Button()
                      .ID("btnProcess")
                      .Text("Process")
                      .Icon(Icon.ScriptGo)
                      .Disabled(Model.Status != EInvoiceDocumentStatusType.Signed)
                      .Menu(Html.X().Menu()
                          .MinWidth(200)
                          .Items(
                              Html.X().MenuItem().Text("Replace Invoice").Tag("ReplaceInvoice")
                                  .Icon(Icon.ScriptLink)
                                  .Disabled(Model.Status != EInvoiceDocumentStatusType.Signed)
                                  .DirectEvents(de =>
                                  {
                                      de.Click.Action = "ReplaceInvoice";
                                      de.Click.Before = "return #{Id}.getValue() !== '';";
                                      de.Click.ShowWarningOnFailure = true;
                                      de.Click.EventMask.ShowMask = true;
                                      de.Click.ExtraParams.Add(new Parameter("id", "#{Id}.getValue()", ParameterMode.Raw));
                                      de.Click.ExtraParams.Add(new Parameter("version", "#{Version}.getValue()", ParameterMode.Raw));
                                      de.Click.Success = "function(response, result) { \n" +
                                                        "}";
                                  }),
                              Html.X().MenuItem().Text("Cancel Invoice").Tag("CancelInvoice")
                                  .Icon(Icon.ScriptDelete)
                                  .Disabled(Model.Status != EInvoiceDocumentStatusType.Signed)
                                  .DirectEvents(de =>
                                  {
                                      de.Click.Action = "CancelInvoice";
                                      de.Click.Before = "return #{Id}.getValue() !== '';";
                                      de.Click.ShowWarningOnFailure = true;
                                      de.Click.EventMask.ShowMask = true;
                                      de.Click.ExtraParams.Add(new Parameter("id", "#{Id}.getValue()", ParameterMode.Raw));
                                      de.Click.ExtraParams.Add(new Parameter("version", "#{Version}.getValue()", ParameterMode.Raw));
                                      de.Click.Success = "function(response, opts) { \n" +
                                                        "}";
                                  })
                        ))
                  );
                  items.Add(Html.X().Button()
                      .ID("btnSignAction")
                      .Text("Sign")
                      .Icon(Icon.ScriptKey)
                      .DirectEvents(de =>
                      {
                          de.Click.Action = "StartSignAction";
                          de.Click.Before = "if(#{Id}.getValue() !== '') { window.signMask = Ext.net.Mask.show({ msg: 'Step 1 of 3...' }); return true;} else return false;";
                          de.Click.CleanRequest = true;
                          de.Click.ExtraParams.Add(new Parameter("id", "#{Id}.getValue()", ParameterMode.Raw));
                          de.Click.ExtraParams.Add(new Parameter("version", "#{Version}.getValue()", ParameterMode.Raw));
                          de.Click.Failure = "function() {\n " +
                                             "  Ext.net.Mask.hide(); \n" +
                                             "  Ext.net.directRequest({ \n" +
                                             "      url:baseURL + 'EInvoice/EInvoice/_Maintenance?id='+ #{Id}.getValue(), \n" +
                                             "      method:'GET', \n" +
                                             "      eventMask: { showMask:true }, \n" +
                                             "  }); \n" +
                                             "}";
                          de.Click.Success = "function(response, opts) { \n" +
                                            "   updateSignMask('Step 2 of 3...');" +
                                            "   Ext.net.directRequest({ \n" +
                                            "       url:'http://localhost:18330/EDoc/SignXML', \n" +
                                            "       cors: true,\n" +
                                            "       useDefaultXhrHeader: false, \n" +
                                            "       method:'POST', \n" +
                                            "       jsonData: opts.result, \n" +
                                            "       success: function(response, opts) {\n" +
                                            "           if(opts.Status == false) {\n" +
                                            "               var alert = Ext.Msg.alert('Status', 'Sign invoice number fail : ' + opts.Exception, Ext.emptyFn); \n" +
                                            "               Ext.defer(function(){ alert.toFront(); }, 1500); \n " +
                                            "               return;\n" +
                                            "           } else {\n" +
                                            "               updateSignMask('Step 3 of 3...');" +
                                            "               Ext.net.DirectMethod.request({ \n" +
                                            "                   url:'" + Url.Action("PublicSignedInvoice") + "', \n" +
                                            "                   params: { \n" +
                                            "                       __RequestVerificationToken:  #{AntiForgeryField}.getValue(),\n" +
                                            "                       id: #{Id}.getValue(), \n" +
                                            "                       version: #{Version}.getValue(), \n" +
                                            "                       signedModelJson: opts \n" +
                                            "                   }, \n" +
                                            "                   success: function(result) {\n" +
                                            "                       updateSignMask('All finished!'); \n" +
                                            "                       Ext.net.directRequest({ \n" +
                                            "                           url:baseURL + 'EInvoice/EInvoice/_Maintenance?id='+ #{Id}.getValue(), \n" +
                                            "                           method:'GET', \n" +
                                            "                           eventMask:{ showMask: false }, \n" +
                                            "                           success: function() { \n" +
                                            "                               Ext.defer(function() { Ext.net.Mask.hide(); }, 1000); \n " +
                                            "                           }, \n" +
                                            "                           failure: function() {\n" +
                                            "                               var alert = Ext.Msg.alert('Status', 'Signed invoice refresh unsuccessfully! Please check', Ext.emptyFn); \n" +
                                            "                               Ext.net.Mask.hide(); alert.toFront(); \n " +
                                            "                           }" +
                                            "                       }); \n" +
                                            "                   },\n" +
                                            "                   failure: function() {\n" +
                                            "                       Ext.net.Mask.hide();" +
                                            "                   }" +
                                            "               });\n" +
                                            "           }\n" +
                                            "       },\n" +
                                            "       failure: function(response, opts) {\n" +
                                            "           Ext.net.Mask.hide(); \n" +
                                            "           if(opts.errorMessage == '') \n" +
                                            "               opts.errorMessage = 'Unknow error or EHoadon.exe tool not run !!!! <br>PLEASE RUN EHoadon.exe tool before sign'; \n" +
                                            "           var alert = Ext.Msg.alert('Error', 'Sign XML fail : ' + opts.errorMessage, Ext.emptyFn); \n" +
                                            "           Ext.defer(function(){ alert.toFront(); }, 1000); \n " +
                                            "       }\n" +
                                            "   })\n" +
                                            "}";
                      })
                  );
              })
          )
          .HtmlBin(
             @<text>
                 <script>
                     var updateSignMask = function (text) {
                          signMask.down("div.x-mask-msg-text").update(text);
                     };
                 </script>
             </text>)
          .Bin(
              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("BuyerStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "BusinessPartner" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["BuyerStore"]),

              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("FormTypeStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "FormType", new { area = "EInvoice" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("TemplateCode", ModelFieldType.String),
                          new ModelField("InvoiceSeries", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                      p.Add(new StoreParameter("taxAuthoritiesStatus", TaxAuthoritiesStatus.Active));
                  })
                  .Data(ViewData["FormTypeStore"]),

              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("CurrencyStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Currency", new { area = "" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["CurrencyStore"]),

              Html.X().Store()
                  .ID("ItemStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Item" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["ItemStore"]),

              Html.X().Store()
                  .ID("UomStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupUomOfItem", "ItemUom", new { area = "Item" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("UomId")
                      .Fields(
                          new ModelField("UomId", ModelFieldType.Int),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String),
                          new ModelField("QtyPerUom", ModelFieldType.Int)
                      )
                  )
                  .Data(ViewData["UomStore"]),

              Html.X().Store().AutoLoad(false).AutoDestroy(false)
                  .ID("VatStore")
                  .Proxy(Html.X().AjaxProxy()
                      .Url(Url.Action("LookupData", "Index", new { area = "Vat" }))
                      .Reader(Html.X().JsonReader().RootProperty("data").TotalProperty("total")))
                  .Model(Html.X().Model()
                      .IDProperty("Id")
                      .Fields(
                          new ModelField("Id", ModelFieldType.Int),
                          new ModelField("OrganizationCode", ModelFieldType.String),
                          new ModelField("Code", ModelFieldType.String),
                          new ModelField("Description", ModelFieldType.String)
                      )
                  )
                  .Parameters(p =>
                  {
                      p.Add(new StoreParameter("id", "this.id", ParameterMode.Raw));
                  })
                  .Data(ViewData["VatStore"])
          )
          .Items(
              Html.X().FormPanel()
                  .ID("FormEInvoiceHeaderMaintenance")
                  .Layout(LayoutType.VBox)
                  .AutoScroll(true)
                  .LayoutConfig(action => action.Add(new VBoxLayoutConfig() { Align = VBoxAlign.Stretch }))
                  .Items(items =>
                  {
                      items.Add(Html.X().Container()
                          .Items(
                              Html.X().AntiForgeryField().ID("AntiForgeryField"),
                              Html.X().HiddenFor(m => m.Id).ID("Id"),
                              Html.X().HiddenFor(m => m.Version).ID("Version"))
                      );
                      items.Add(Html.X().Container()
                          .Layout(LayoutType.HBox)
                          .Items(
                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(500)
                                  .Items(
                                      Html.X().ComboBoxFor(m => m.BuyerId).AllowBlank(false).ID("BuyerId").Width(150)
                                          .ReadOnly(readOnly)
                                          .AutoFocus(true)
                                          .DisplayField("Code")
                                          .ValueField("Id")
                                          .FieldStyle("text-transform: uppercase;")
                                          .TypeAhead(true)
                                          .MinChars(0)
                                          .PageSize(10)
                                          .SelectOnTab(true)
                                          .ForceSelection(true)
                                          .ValidateOnBlur(true)
                                          .ValidateOnChange(true)
                                          .ListConfig(Html.X().BoundList()
                                              .LoadingText("Searching...")
                                              .ItemTpl(Html.X().XTemplate()
                                                  .Html(@<text>
                                                            <tpl for=".">
                                                                <div class="search-item">
                                                                    <h3>{Code}</h3>
                                                                    {Description}
                                                                </div>
                                                            </tpl>
                                                         </text>))
                                              .MinWidth(400)
                                          )
                                          .StoreID("BuyerStore")
                                          .Listeners(ls =>
                                          {
                                              ls.BeforeQuery.Handler = @"var _id = #{BuyerId}.getValue();
                                                      this.getStore().id = _id;
                                                      /*this.getStore().load();*/";
                                          })
                                          .DirectEvents(de =>
                                          {
                                              de.Select.Action = "ChangeBuyer";
                                              de.Select.EventMask.ShowMask = true;
                                              de.Select.ExtraParams.Add(new Parameter("selectedData", "records[0].data", ParameterMode.Raw, true));
                                          }),

                                      Html.X().TextFieldFor(m => m.BuyerDisplayName).AllowBlank(false).EnforceMaxLength(true).ID("BuyerDisplayName").ReadOnly(readOnly),
                                      Html.X().TextFieldFor(m => m.BuyerLegalName).AllowBlank(false).EnforceMaxLength(true).ID("BuyerLegalName").ReadOnly(readOnly),
                                      Html.X().TextFieldFor(m => m.BuyerTaxCode).AllowBlank(false).EnforceMaxLength(true).ID("BuyerTaxCode").ReadOnly(readOnly),
                                      Html.X().TextFieldFor(m => m.BuyerAddressLine).AllowBlank(false).EnforceMaxLength(true).ID("BuyerAddressLine").ReadOnly(readOnly),
                                      Html.X().TextFieldFor(m => m.BuyerBankName).EnforceMaxLength(true).ID("BuyerBankName").ReadOnly(readOnly),
                                      Html.X().TextFieldFor(m => m.BuyerBankAccount).EnforceMaxLength(true).ID("BuyerBankAccount").ReadOnly(readOnly)),
                              Html.X().Panel()
                                      .Layout(LayoutType.Form)
                                      .Width(500)
                                      .Items(
                                          Html.X().TextFieldFor(m => m.SellerLegalName).AllowBlank(false).EnforceMaxLength(true).ID("SellerLegalName").ReadOnly(true),
                                          Html.X().TextFieldFor(m => m.SellerTaxCode).AllowBlank(false).EnforceMaxLength(true).ID("SellerTaxCode").ReadOnly(true),
                                          Html.X().TextFieldFor(m => m.SellerAddressLine).AllowBlank(false).EnforceMaxLength(true).ID("SellerAddressLine").ReadOnly(true),
                                          Html.X().TextFieldFor(m => m.SellerBankName).EnforceMaxLength(true).ID("SellerBankName").ReadOnly(true),
                                          Html.X().TextFieldFor(m => m.SellerBankAccount).EnforceMaxLength(true).ID("SellerBankAccount").ReadOnly(true),
                                          Html.X().TextFieldFor(m => m.InvoiceNote).EnforceMaxLength(true).ID("InvoiceNote").ReadOnly(readOnly)),
                            Html.X().Panel()
                                .Layout(LayoutType.Form)
                                .Width(400)
                                .Items(
                                    Html.X().ComboBoxFor(m => m.FormTypeId).AllowBlank(false).ID("FormTypeId")
                                        .ReadOnly(readOnly)
                                        .DisplayTpl(Html.X().XTemplate()
                                            .Html(@<text>
                                                      <tpl for=".">
                                                          {TemplateCode} - {InvoiceSeries}
                                                      </tpl>
                                                   </text>))
                                        .ValueField("Id")
                                        .FieldStyle("text-transform: uppercase;")
                                        .TypeAhead(true)
                                        .MinChars(0)
                                        .PageSize(0)
                                        .SelectOnTab(true)
                                        .ForceSelection(true)
                                        .ValidateOnBlur(true)
                                        .ValidateOnChange(true)
                                        .ListConfig(Html.X().BoundList()
                                            .LoadingText("Searching...")
                                            .ItemTpl(Html.X().XTemplate()
                                                .Html(@<text>
                                                    <tpl for=".">
                                                        <div class="search-item">
                                                            <h3>{InvoiceType}</h3>
                                                            {TemplateCode} - {InvoiceSeries}
                                                        </div>
                                                    </tpl>
                                                </text>))
                                            .MinWidth(400)
                                        )
                                        .StoreID("FormTypeStore")
                                        .Listeners(ls =>
                                        {
                                            ls.BeforeQuery.Handler = @"var _id = #{FormTypeId}.getValue();
                                                          this.getStore().id = _id;
                                                          /*this.getStore().load();*/";
                                        })
                                        .DirectEvents(de =>
                                          {
                                              de.Select.Action = "ChangeFormType";
                                              de.Select.EventMask.ShowMask = true;
                                              de.Select.ExtraParams.Add(new Parameter("selectedData", "records[0].data", ParameterMode.Raw, true));
                                          })
                                    ,
                                    Html.X().TextFieldFor(m => m.InvoiceNumber).AllowBlank(true).ID("InvoiceNumber").ReadOnly(true),
                                    Html.X().DateFieldFor(m => m.InvoiceIssuedDate).AllowBlank(false).ID("InvoiceIssuedDate").ReadOnly(readOnly),
                                    Html.X().ComboBoxFor(m => m.PaymentMethodName).ID("PaymentMethodName").Editable(false).ReadOnly(readOnly)
                                        .Items(action =>
                                        {
                                            action.Add(new ListItem("TM", "TM"));
                                            action.Add(new ListItem("CK", "CK"));
                                            action.Add(new ListItem("TM/CK", "TM/CK"));
                                        }),
                                    Html.X().ComboBoxFor(m => m.CurrencyId).AllowBlank(false).ID("CurrencyId")
                                        .ReadOnly(readOnly)
                                        .DisplayField("Code")
                                        .ValueField("Id")
                                        .FieldStyle("text-transform: uppercase;")
                                        .TypeAhead(true)
                                        .MinChars(0)
                                        .PageSize(10)
                                        .SelectOnTab(true)
                                        .ForceSelection(true)
                                        .ValidateOnBlur(true)
                                        .ValidateOnChange(true)
                                        .ListConfig(Html.X().BoundList()
                                            .LoadingText("Searching...")
                                            .ItemTpl(Html.X().XTemplate()
                                                .Html(@<text>
                                                    <tpl for=".">
                                                        <div class="search-item">
                                                            <h3>{Code}</h3>
                                                            {Description}
                                                        </div>
                                                    </tpl>
                                                </text>))
                                            .MinWidth(400))
                                        .StoreID("CurrencyStore")
                                        .Listeners(ls =>
                                        {
                                            ls.BeforeQuery.Handler = @"var _id = #{CurrencyId}.getValue();
                                                          this.getStore().id = _id;
                                                          this.getStore().load();";
                                        })
                                        .DirectEvents(de =>
                                        {
                                            de.Select.Action = "ChangeCurrency";
                                            de.Select.EventMask.ShowMask = true;
                                            de.Select.ExtraParams.Add(new Parameter("currencyId", "records[0].data.ID", ParameterMode.Raw));
                                            de.Select.ExtraParams.Add(new Parameter("currencyFactor", "#{CurrencyFactor}.getValue()", ParameterMode.Raw));
                                        })
                                    ,
                                    Html.X().TextFieldFor(m => m.ExchangeRate).AllowBlank(false).ID("ExchangeRate")
                                        .ReadOnly(readOnlyCurrencyFactor || readOnly)
                                        .MaskRe(@"/[0-9\,\.]")
                                        .Listeners(ls =>
                                        {
                                            ls.Focus.Handler = @"this.setRawValue(this.getRawValue().replace(/\./g,''))";
                                            ls.Blur.Handler = @"var v = this.getRawValue().replace(/\./g,'').replace(',', '.');
                                                                this.setRawValue(Ext.util.Format.number(v, '0.000,00/i'));";
                                        })
                                        .DirectEvents(de =>
                                        {
                                            de.Change.Action = "ChangeExchangeRate"; @*HttpMethod.POST will post FORM to action *@
                                            de.Change.EventMask.ShowMask = true;
                                            de.Change.ExtraParams.Add(new Parameter("EInvoiceLinesJSON", "#{EInvoiceLineGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                                            de.Change.Success = "function() { \n"+
                                                                "   EInvoice.CalcHeaderTotal(#{EInvoiceLineGridPanel}); \n" +
                                                                "}";
                                        })
                                        .CheckChangeEvents(new string[]{"blur"})
                                    ,
                                    Html.X().ComboBoxFor(m => m.Status).Editable(false).ReadOnly(true).ItemsFromEnum(typeof(MyERP.DataAccess.Enum.EInvoiceDocumentStatusType)).ID("Status")
                                    )
                                ));
                      items.Add(Html.X().TabPanel()
                          .Height(350)
                          .Items(tabPanelItems => 
                          {
                              tabPanelItems.Add(Html.X().GridPanel()
                                  .ID("EInvoiceLineGridPanel")
                                  .Height(350)
                                  .Title("Line")
                                  .Border(true)
                                  .View(new GridView() { MarkDirty = false, KeyMap = { new KeyBindItem{Key = "ctrl+a", Handler = "#{btnAddLine}.fireEvent('click')"}}})
                                  .EnableColumnHide(false)
                                  .LeftBar(leftBarItems =>
                                  {
                                      leftBarItems.Add(Html.X().Toolbar()
                                          .Flat(true)
                                          .Layout(LayoutType.VBox)
                                          .Items(buttons =>
                                          {
                                              buttons.Add(Html.X().Button()
                                                  .ID("btnAddLine")
                                                  .Icon(Icon.Add)
                                                  .DirectEvents(de =>
                                                  {
                                                      de.Click.Action = "AddLine";
                                                      de.Click.ExtraParams.Add(new Parameter("EInvoiceLinesJSON", "#{EInvoiceLineGridPanel}.getRowsValues()", ParameterMode.Raw, true));
                                                      de.Click.Before = "return #{FormEInvoiceHeaderMaintenance}.getForm().isValid();";
                                                      de.Click.Success = "function(response, result) { \n" +
                                                                         "  var grid = this.up('grid'); \n" +
                                                                         "  var record = grid.store.getById(result.result.LineNo);  \n" +
                                                                         "  var index = grid.store.indexOf(record); \n" +
                                                                         "  grid.getSelectionModel().select(index, true); \n" +
                                                                         "  Ext.Function.defer(function() { \n" +
                                                                         "      grid.editingPlugin.startEdit(index, 1); \n" +
                                                                         "  }, 100);" +
                                                                         "}";
                                                  })
                                              );
                                              buttons.Add(Html.X().Button()
                                                  .ID("btnDeleteLine")
                                                  .Icon(Icon.Delete)
                                                  .Listeners(ls =>
                                                  {
                                                      ls.Click.Handler = @"if ( !#{EInvoiceLineGridPanel}.hasSelection() ) {
                                                                              return false;
                                                                          } else {
                                                                              Ext.Msg.confirm('Alert', 'Do you want to DELETE?', function(btn) {
                                                                                if(btn == 'yes') {
                                                                                    #{EInvoiceLineGridPanel}.deleteSelected();
                                                                                    EInvoice.CalcHeaderTotal(#{EInvoiceLineGridPanel});    
                                                                                    return true;        
                                                                                } else 
                                                                                    return false;
                                                                              });
                                                                          }";
                                                  })
                                              );
                                          })
                                      );
                                  })
                                  .Store(Html.X().Store()
                                      .ID("EInvoiceLineGridStore")
                                      .Model(
                                          Html.X().Model()
                                              .IDProperty("LineNumber")
                                              .Fields(
                                                  new ModelField("LineNumber", ModelFieldType.String),
                                                  new ModelField("Id", ModelFieldType.String),
                                                  new ModelField("ItemId", ModelFieldType.String),
                                                  new ModelField("ItemCode", ModelFieldType.String),
                                                  new ModelField("Item", ModelFieldType.Object),
                                                  new ModelField("ItemName", ModelFieldType.String),
                                                  new ModelField("UnitId", ModelFieldType.String),
                                                  new ModelField("UnitCode", ModelFieldType.String),
                                                  new ModelField("Uom", ModelFieldType.Object),
                                                  new ModelField("UnitName", ModelFieldType.String),
                                                  new ModelField("UnitPrice", ModelFieldType.Float),
                                                  new ModelField("UnitPriceLCY", ModelFieldType.Float),
                                                  new ModelField("Quantity", ModelFieldType.Float),
                                                  new ModelField("ItemTotalAmountWithoutVAT", ModelFieldType.Float),
                                                  new ModelField("ItemTotalAmountWithoutVATLCY", ModelFieldType.Float),
                                                  new ModelField("VatId", ModelFieldType.String),
                                                  new ModelField("Vat", ModelFieldType.Object),
                                                  new ModelField("VATPercentage", ModelFieldType.Int),
                                                  new ModelField("VATAmount", ModelFieldType.Float),
                                                  new ModelField("VATAmountLCY", ModelFieldType.Float),
                                                  new ModelField("ItemTotalAmountWithVAT", ModelFieldType.Float),
                                                  new ModelField("ItemTotalAmountWithVATLCY", ModelFieldType.Float)))
                                      .DataSource(Model.EInvoiceLines))
                                  .ColumnModel(cols =>
                                  {
                                      cols.Columns.Add(Html.X().RowNumbererColumn());
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.ItemId).ToBuilder<Column.Builder>().ID("EInvoiceLineItemIdCol").Sortable(false).Width(125)
                                              .Editor(Html.X().ComboBox()
                                                          .ID("EInvoiceLineItemEditor")
                                                          .DisplayField("Code")
                                                          .ValueField("Id")
                                                          .FieldLabel("")
                                                          .FieldStyle("text-transform: uppercase;")
                                                          .AllowBlank(false)
                                                          .TypeAhead(true)
                                                          .MinChars(0)
                                                          .PageSize(10)
                                                          .SelectOnTab(true)
                                                          .ForceSelection(true)
                                                          .ValidateOnBlur(true)
                                                          .ValidateOnChange(true)
                                                          .ListConfig(Html.X().BoundList()
                                                              .LoadingText("Searching...")
                                                              .ItemTpl(Html.X().XTemplate()
                                                                  .Html(@<text>
                                                                            <div class="search-item">
                                                                                <h3>{Code}</h3>
                                                                                {Description}
                                                                            </div>
                                                                         </text>)
                                                              )
                                                              .MinWidth(400)
                                                          )
                                                          .StoreID("ItemStore")
                                                          .Listeners(ls =>
                                                          {
                                                              ls.BeforeQuery.Handler = @"var _id = #{EInvoiceLineItemEditor}.getValue();
                                                                                      this.getStore().id = _id;
                                                                                      /*this.getStore().load();*/";
                                                          }))
                                              .Renderer("EInvoice.ItemRenderer")
                                              .EditorOptions(action =>
                                              {
                                                  action.Listeners.StartEdit.Delay = 500;
                                              })
                                      );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.ItemName).ToBuilder<Column.Builder>().ID("EInvoiceLineItemNameCol").Sortable(false).Width(256)
                                              .Editor(Html.X().TextField().ID("EInvoiceLineItemNameEditor"))
                                      );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.UnitId).ToBuilder<Column.Builder>().ID("EInvoiceLineUnitIdCol").Sortable(false).Width(125)
                                              .Editor(
                                                  Html.X().ComboBox()
                                                      .ID("EInvoiceLineUomEditor")
                                                      .DisplayField("Code")
                                                      .ValueField("UomId")
                                                      .FieldLabel("")
                                                      .FieldStyle("text-transform: uppercase;")
                                                      .AllowBlank(false)
                                                      .TypeAhead(true)
                                                      .MinChars(0)
                                                      .PageSize(10)
                                                      .SelectOnTab(true)
                                                      .ForceSelection(true)
                                                      .ValidateOnBlur(true)
                                                      .ValidateOnChange(true)
                                                      .ListConfig(Html.X().BoundList()
                                                          .LoadingText("Searching...")
                                                          .ItemTpl(Html.X().XTemplate()
                                                              .Html(@<text>
                                                                        <div class="search-item">
                                                                            <h3>{Code}</h3>
                                                                            {Description}
                                                                        </div>
                                                                     </text>)
                                                          )
                                                          .MinWidth(400)
                                                      )
                                                      .StoreID("UomStore"))
                                                  .Renderer("EInvoice.UomRenderer")
                                                  .EditorOptions(action =>
                                                  {
                                                      action.Listeners.StartEdit.Delay = 500;
                                                  })

                                      );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.Quantity).ToBuilder<Column.Builder>().ID("EInvoiceLineQuantityCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("EInvoiceLineQuantityEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.UnitPrice).ToBuilder<Column.Builder>().ID("EInvoiceLineUnitPriceCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("EInvoiceLineUnitPriceEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.ItemTotalAmountWithoutVAT).ToBuilder<Column.Builder>().ID("EInvoiceLineItemTotalAmountWithoutVATCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("EInvoiceLineItemTotalAmountWithoutVATEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(Html.X().ColumnFor(Model.EInvoiceLines, m => m.VatId).ToBuilder<Column.Builder>().ID("EInvoiceLineVatIdCol").Sortable(false).Width(125)
                                          .Editor(Html.X().ComboBox()
                                              .ID("EInvoiceLineVatEditor")
                                              .DisplayField("Code")
                                              .ValueField("Id")
                                              .FieldLabel("")
                                              .FieldStyle("text-transform: uppercase;")
                                              .AllowBlank(false)
                                              .TypeAhead(true)
                                              .MinChars(0)
                                              .PageSize(10)
                                              .SelectOnTab(true)
                                              .ForceSelection(true)
                                              .ValidateOnBlur(true)
                                              .ValidateOnChange(true)
                                              .ListConfig(Html.X().BoundList()
                                                  .LoadingText("Searching...")
                                                  .ItemTpl(Html.X().XTemplate()
                                                      .Html(@<text>
                                                            <div class="search-item">
                                                                <h3>{Code}</h3>
                                                                {Description}
                                                            </div>
                                                         </text>))
                                                      .MinWidth(400))
                                                  .StoreID("VatStore")
                                                  .Listeners(ls =>
                                                  {
                                                      ls.BeforeQuery.Handler = @"var _id = #{EInvoiceLineVatEditor}.getValue();
                                                                                      this.getStore().id = _id;
                                                                                      /*this.getStore().load();*/";
                                                  }))
                                              .Renderer("EInvoice.VatRenderer")
                                              .EditorOptions(action =>
                                              {
                                                  action.Listeners.StartEdit.Delay = 500;
                                              }));
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.VATAmount).ToBuilder<Column.Builder>().ID("EInvoiceLineVatAmountCol").Sortable(false).Width(125)
                                              .Editor(Html.X().NumberField().ID("EInvoiceLineVatAmountEditor").SelectOnFocus(true).DecimalPrecision(2)).Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                      cols.Columns.Add(
                                          Html.X().ColumnFor(Model.EInvoiceLines, m => m.ItemTotalAmountWithVAT).ToBuilder<Column.Builder>().ID("EInvoiceLineItemTotalAmountWithVATCol").Sortable(false).Width(125)
                                              .Renderer(RendererFormat.Number, new string[] { "'0.000,00/i'" })
                                          );
                                  })
                                  .SelectionModel(Html.X().CellSelectionModel())
                                  .Plugins(Html.X().CellEditing().Listeners(ls =>
                                  {
                                      ls.Edit.Handler = "function(editor, e) { \n" +
                                                        "   if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) { \n" +
                                                        "       Ext.net.DirectMethod.request({ \n" +
                                                        "           url: '" + Url.Action("LineEdit") + "', \n" +
                                                        "           params: { \n" +
                                                        "               lineNo: e.record.data.LineNumber, \n" +
                                                        "               field: e.field, \n" +
                                                        "               oldValue: e.originalValue, \n" +
                                                        "               newValue: e.value, \n" +
                                                        "               recordData: e.record.data, \n" +
                                                        "               headerData: #{FormEInvoiceHeaderMaintenance}.getForm().getValues() \n" +
                                                        "           }, \n" +
                                                        "           eventMask: { \n" +
                                                        "               showMask:true, \n" +
                                                        "               target:'customtarget', \n" +
                                                        "               customTarget:#{EInvoiceLineGridPanel} \n" +
                                                        "           }, \n" +
                                                        "           success: function() { \n" +
                                                        "               #{EInvoiceLineGridPanel}.getView().refresh(); \n" +
                                                        "               EInvoice.CalcHeaderTotal(e.grid); \n" +
                                                        "           } \n" +
                                                        "       }); \n" +
                                                        "   } \n" +
                                                        "}";
                                      ls.BeforeEdit.Fn = "EInvoice.InvoiceLineBeforeEdit";
                                  })));
                          }));
                      items.Add(Html.X().Container()
                          .Layout(LayoutType.HBox)
                          .Items(
                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(600)
                                  .Items(
                                      Html.X().TextFieldFor(m => m.TotalAmountWithVATInWords)
                                          .ID("TotalAmountWithVATInWords")
                                          .ReadOnly(readOnly)
                                          .TabIndex(-1)
                                  ),
                              Html.X().Panel()
                                  .Layout(LayoutType.Form)
                                  .Width(300)
                                  .Items(totalItems =>
                                  {
                                      totalItems.Add(Html.X().TextFieldFor(m => m.TotalAmountWithoutVAT)
                                          .ID("TotalAmountWithoutVAT")
                                          .ReadOnly(true)
                                          .TabIndex(-1));
                                      totalItems.Add(Html.X().TextFieldFor(m => m.TotalVATAmount)
                                          .ID("TotalVATAmount")
                                          .ReadOnly(true)
                                          .TabIndex(-1));
                                      totalItems.Add(Html.X().TextFieldFor(m => m.TotalAmountWithVAT)
                                          .ID("TotalAmountWithVAT")
                                          .ReadOnly(true)
                                          .TabIndex(-1));
                                  })
                              )
                      );
                  })
                )
                .Listeners(ls => {
                    ls.Close.Handler = "function() { \n" +
                                    "    if(App.EInvoiceList == null || #{Id}.getValue() == '') \n" +
                                    "        return; \n" +
                                    "    App.EInvoiceList.getSelectionModel().deselectAll(); \n" +
                                    "    App.EInvoiceList.getStore().load({ \n" +
                                    "        callback : function() { \n" +
                                    "            var record = App.EInvoiceList.store.getById(#{Id}.getValue()); \n" +
                                    "            var index = App.EInvoiceList.store.indexOf(record); \n" +
                                    "            App.EInvoiceList.getSelectionModel().select(index, true); \n" +
                                    "        } \n" +
                                    "    });\n" +
                                    "}";
                })
                .Buttons(buttons =>
                {
                    buttons.Add(Html.X().Button()
                        .ID("btnClose")
                        .Text("Close")
                        .Icon(Icon.Cancel)
                        .Listeners(ls =>
                        {
                            ls.Click.Handler = "this.up('window').close();";
                        }));
                })
)

