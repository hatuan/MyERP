@model MyERP.Web.Models.EInvFormTypeEditViewModel

@(Html.X().Window()
          .ID("WindowFormTypeMaintenance")
          .Title("FormType Maintenance")
          .Height(700)
          .Width(1200)
          .Modal(true)
          .Layout(LayoutType.Fit)
          .Items(
              Html.X().FormPanel()
                  .ID("FormFormTypeMaintenance")
                  .Border(false)
                  .Layout(LayoutType.Border)
                  .BodyPadding(5)
                  .DefaultButton("btnSave")
                  .Items(items =>
                  {
                      items.Add(Html.X().Panel()
                          .Region(Region.West)
                          .Layout(LayoutType.Form)
                          .Width(300)
                          .Items(
                              Html.X().AntiForgeryField().ID("AntiForgeryField"),
                              Html.X().HiddenFor(m => m.Id).ID("Id"),
                              Html.X().HiddenFor(m => m.Version).ID("Version"),
                              Html.X().ComboBoxFor(m => m.Status).Width(150).ID("Status").Editable(false).Hidden(true).ItemsFromEnum(typeof(MyERP.DataAccess.Enum.DefaultStatusType)),
                              Html.X().HiddenFor(m => m.TemplateCode).ID("TemplateCode"),
                              Html.X().HiddenFor(m => m.InvoiceForm).ID("InvoiceForm"),
                              Html.X().HiddenFor(m => m.FormFile).ID("FormFile"),
                              Html.X().HiddenFor(m => m.FormVars).ID("FormVars"),
                              Html.X().ComboBoxFor(m => m.InvoiceType).ID("InvoiceType").Editable(false)
                                  .Items(action =>
                                  {
                                      action.Add(new ListItem("Hóa đơn GTGT", "01GTKT"));
                                  })
                                  .Listeners(ls =>
                                  {
                                      ls.Select.Handler = "function() { \n" +
                                                          "    if(this.up('form').isValid())" +
                                                          "    {" +
                                                          "       Ext.net.DirectMethod.request({ \n" +
                                                          "           url: '" + Url.Action("InvoiceFormRender") + "', \n" +
                                                          "           params: { \n" +
                                                          "               __RequestVerificationToken:  #{AntiForgeryField}.getValue()," +
                                                          "               modelJson: #{FormFormTypeMaintenance}.getForm().getValues() \n" +
                                                          "           }, \n" +
                                                          "       })" +
                                                          "    }" +
                                                          "}";
                                  }),
                              Html.X().TextFieldFor(m => m.InvoiceTypeNo).ID("InvoiceTypeNo").EnforceMaxLength(true).FieldStyle("text-transform: uppercase;")
                                  .Listeners(ls =>
                                  {
                                      ls.Change.Handler = "function(field) { \n" +
                                                          "    if(this.up('form').isValid() && field.isValid())" +
                                                          "    {" +
                                                          "       Ext.net.DirectMethod.request({ \n" +
                                                          "           url: '" + Url.Action("InvoiceFormRender") + "', \n" +
                                                          "           params: { \n" +
                                                          "               __RequestVerificationToken:  #{AntiForgeryField}.getValue()," +
                                                          "               modelJson: #{FormFormTypeMaintenance}.getForm().getValues() \n" +
                                                          "           }, \n" +
                                                          "       })" +
                                                          "    }" +
                                                          "}";
                                  }),
                              Html.X().TextFieldFor(m => m.InvoiceSeries).ID("InvoiceSeries").EnforceMaxLength(true).FieldStyle("text-transform: uppercase;")
                                  .Listeners(ls =>
                                  {
                                      ls.Change.Handler = "function(field) { \n" +
                                                          "    if(this.up('form').isValid() && field.isValid())" +
                                                          "    {" +
                                                          "       Ext.net.DirectMethod.request({ \n" +
                                                          "           url: '" + Url.Action("InvoiceFormRender") + "', \n" +
                                                          "           params: { \n" +
                                                          "               __RequestVerificationToken:  #{AntiForgeryField}.getValue()," +
                                                          "               modelJson: #{FormFormTypeMaintenance}.getForm().getValues() \n" +
                                                          "           }, \n" +
                                                          "       })" +
                                                          "    }" +
                                                          "}";
                                  }),
                              Html.X().TextFieldFor(m => m.FormFileName).ID("FormFileName").ReadOnly(true)
                          ));
                      items.Add(
                          Html.X().TabPanel()
                              .ID("InvoiceFormTabPanel")
                              .Region(Region.Center)
                              .Layout(LayoutType.Fit)
                              .Frame(true)
                              .Items(tabItems =>
                              {
                                  tabItems.Add(Html.X().Panel()
                                      .ID("InvoiceFormViewer")
                                      .Title("Preview")
                                      .Layout(LayoutType.Fit)
                                      .Loader(Html.X().ComponentLoader().Mode(LoadMode.Frame).AutoLoad(false))
                                      .Listeners(ls =>
                                      {
                                          ls.AfterRender.Handler = "function() { \n" +
                                                                   "    if(this.up('form').isValid())" +
                                                                   "    {" +
                                                                   "       Ext.net.DirectMethod.request({ \n" +
                                                                   "           url: '" + Url.Action("InvoiceFormRender") + "', \n" +
                                                                   "           params: { \n" +
                                                                   "               __RequestVerificationToken:  #{AntiForgeryField}.getValue()," +
                                                                   "               modelJson: #{FormFormTypeMaintenance}.getForm().getValues() \n" +
                                                                   "           }, \n" +
                                                                   "       })" +
                                                                   "    }" +
                                                                   "}";
                                      }));
                                  tabItems.Add(Html.X().Panel()
                                      .ID("InvoiceFormSelect")
                                      .Title("Select Template")
                                      .Layout(LayoutType.Fit)
                                      .TopBar(topBarItems =>
                                      {
                                          topBarItems.Add(Html.X().Toolbar().Items(buttons =>
                                          {
                                              buttons.Add(Html.X().Button()
                                                  .ID("btnSelectTemplate")
                                                  .Text("Select")
                                                  .Icon(Icon.ApplicationAdd)
                                                  .Listeners(ls =>
                                                  {
                                                      ls.Click.Handler = "function() { \n" +
                                                                         "  var listInvoiceTemplateSelect = App.ListInvoiceTemplate.selModel.getSelection(); \n" +
                                                                         "  if( App.ListInvoiceTemplate.selModel.hasSelection())" +
                                                                         "       Ext.net.DirectMethod.request({ \n" +
                                                                         "           url: '" + Url.Action("_SelectInvoiceTemplate") + "', \n" +
                                                                         "           params: { \n" +
                                                                         "               __RequestVerificationToken:  #{AntiForgeryField}.getValue()," +
                                                                         "               selectedInvoiceTemplateID: App.ListInvoiceTemplate.selModel.getSelection()[0].id \n" +
                                                                         "           }, \n" +
                                                                         "           success: function() { \n" +
                                                                         "              #{InvoiceFormTabPanel}.setActiveTab(0); \n" +
                                                                         "           },\n" +
                                                                         "           failure: function(errorMessage) { \n" +
                                                                         "               console.log(errorMessage); \n" +
                                                                         "           }" +
                                                                         "       })" +
                                                                         "}" ;
                                                  }));
                                          }));
                                      })
                                      .ItemsFromAction("_ListInvoiceTemplate")
                                  );
                              })
                          );
                  })
                  .Buttons(
                      Html.X().Button()
                          .ID("btnSave")
                          .Text("Save")
                          .Icon(Icon.Disk)
                          .DirectEvents(de =>
                          {
                              de.Click.Url = Url.Action("_Maintenance");
                              de.Click.Method = HttpMethod.POST;
                              de.Click.Before = "return this.up('form').isValid();";
                              de.Click.Success = "function(response, result) { " +
                                                 "  this.up('window').close();" +
                                                 "  App.FormTypeList.getSelectionModel().deselectAll();" +
                                                 "  App.StoreFormTypeList.reload({ " +
                                                 "    callback : function() { " +
                                                 "      var record = App.FormTypeList.store.getById(result.result.Id); " +
                                                 "      var index = App.FormTypeList.store.indexOf(record);" +
                                                 "      App.FormTypeList.getSelectionModel().select(index);" +
                                                 "   }" +
                                                 " });" +
                                                 "}";
                              de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                              de.Click.ShowWarningOnFailure = true;
                              de.Click.EventMask.ShowMask = true;
                              de.Click.FormID = "FormFormTypeMaintenance";
                          }),
                       Html.X().Button()
                           .ID("btnCancel")
                           .Text("Cancel")
                           .Icon(Icon.Cancel)
                           .Listeners(ls =>
                           {
                               ls.Click.Handler = "this.up('window').close();";
                           }))
    )
)

