@model MyERP.Web.Models.EInvFormReleaseEditViewModel

@(Html.X().Window()
          .ID("WindowFormReleaseMaintenance")
          .Title("Form Release Maintenance")
          .Height(500)
          .Width(650)
          .Modal(true)
          .Layout(LayoutType.Fit)
          .Items(
              Html.X().FormPanel()
                  .ID("FormFormReleaseMaintenance")
                  .Layout(LayoutType.Form)
                  .Border(false)
                  .BodyPadding(5)
                  .DefaultButton("btnSave")
                  .Items(items =>
                  {
                      items.Add(Html.X().AntiForgeryField());
                      items.Add(Html.X().HiddenFor(m => m.Id).ID("Id"));
                      items.Add(Html.X().HiddenFor(m => m.Version).ID("Version"));
                      items.Add(Html.X().ComboBoxFor(m => m.FormTypeId).AllowBlank(false).ID("FormTypeId")
                                              .DisplayField("Description")
                                              .ValueField("Id")
                                              .LabelWidth(100)
                                              .FieldStyle("text-transform: uppercase;")
                                              .TypeAhead(true)
                                              .MinChars(0)
                                              .PageSize(10)
                                              .SelectOnTab(true)
                                              .ForceSelection(true)
                                              .ValidateOnBlur(true)
                                              .ValidateOnChange(true)
                                              .ListConfig(Html.X().BoundList()
                                                  .LoadingText("Searching...")
                                                  .ItemTpl(Html.X().XTemplate()
                                                      .Html(@<text>
                                                                <div class="search-item">
                                                                    <h3>{Description}</h3>
                                                                </div>
                                                             </text>)
                                                  )
                                                  .MinWidth(400))
                                              .StoreID("FormTypeStore")
                                              .Listeners(ls =>
                                              {
                                                  ls.BeforeQuery.Handler = @"var _id = this.getValue();
                                                                            this.getStore().id = _id;";
                                              }));
                      items.Add(Html.X().DateFieldFor(m => m.ReleaseDate).AllowBlank(false).ID("ReleaseDate"));
                      items.Add(Html.X().DateFieldFor(m => m.StartDate).AllowBlank(false).ID("StartDate"));
                      items.Add(Html.X().TextFieldFor(m => m.ReleaseTotal).MaskRe(@"/[0-9\,\.]").AllowBlank(false).ID("ReleaseTotal"));
                      items.Add(Html.X().TextFieldFor(m => m.ReleaseFrom).MaskRe(@"/[0-9\,\.]").AllowBlank(false).ID("ReleaseFrom").ReadOnly(true));
                      items.Add(Html.X().TextFieldFor(m => m.ReleaseTo).MaskRe(@"/[0-9\,\.]").AllowBlank(false).ID("ReleaseTo").ReadOnly(true));
                  })
                  .Buttons(
                      Html.X().Button()
                          .ID("btnSave")
                          .Text("Save")
                          .Icon(Icon.Disk)
                          .DirectEvents(de =>
                          {
                              de.Click.Url = Url.Action("_Maintenance");
                              de.Click.Method = HttpMethod.POST;
                              de.Click.Before = "return this.up('form').isValid();";
                              de.Click.Success = "function(response, result) { " +
                                                 "  this.up('window').close();" +
                                                 "  App.FormReleaseList.getSelectionModel().deselectAll();" +
                                                 "  App.StoreFormReleaseList.reload({ " +
                                                 "    callback : function() { " +
                                                 "      var record = App.FormReleaseList.store.getById(result.result.Id); " +
                                                 "      var index = App.FormReleaseList.store.indexOf(record);" +
                                                 "      App.FormReleaseList.getSelectionModel().select(index);" +
                                                 "   }" +
                                                 " });" +
                                                 "}";
                              de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                              de.Click.ShowWarningOnFailure = true;
                              de.Click.EventMask.ShowMask = true;
                              de.Click.FormID = "FormFormReleaseMaintenance";
                          }),
                       Html.X().Button()
                           .ID("btnCancel")
                           .Text("Cancel")
                           .Icon(Icon.Cancel)
                           .Listeners(ls =>
                           {
                               ls.Click.Handler = "this.up('window').close();";
                           }))
    )
)

