@(Html.X().GridPanel()
              .ID("FormReleaseList")
              .Title("Form Release List")
              .MinHeight(300)
              .Region(Region.Center)
              .Frame(true)
              .SelectionMemory(true)
              .TopBar(items =>
              {
                  items.Add(Html.X().Toolbar().Items(buttons =>
                  {
                      buttons.Add(Html.X().Button()
                          .ID("btnEdit")
                          .Text("Edit")
                          .Icon(Icon.NoteEdit)
                          .Disabled(true)
                          .Listeners(ls =>
                          {
                              ls.Click.Handler = @"if (!#{FormReleaseList}.hasSelection()) {
                                                        return false;
                                                    } else {
                                                        return true;
                                                    }";
                          })
                          .DirectEvents(de =>
                          {
                              de.Click.Url = Url.Action("_Maintenance");
                              de.Click.Method = HttpMethod.GET;
                              de.Click.ShowWarningOnFailure = true;
                              de.Click.EventMask.ShowMask = true;
                              de.Click.ExtraParams.Add(new Parameter("ID", "#{FormReleaseList}.getSelectionModel().getSelected().getAt(0).getId()", ParameterMode.Raw));
                          })
                          );
                      buttons.Add(Html.X().Button()
                          .ID("btnAdd")
                          .Text("Add")
                          .Icon(Icon.Add)
                          .DirectEvents(de =>
                          {
                              de.Click.Url = Url.Action("_Maintenance");
                              de.Click.Method = HttpMethod.GET;
                              de.Click.ShowWarningOnFailure = true;
                              de.Click.EventMask.ShowMask = true;
                          })
                          );
                      buttons.Add(Html.X().Button()
                          .ID("btnDelete")
                          .Text("Delete")
                          .Icon(Icon.Delete)
                          .Disabled(true)
                          .Listeners(ls =>
                          {
                              ls.Click.Handler = @"if (!#{FormReleaseList}.hasSelection() ) {
                                                        return false;
                                                    } else {
                                                        return true;
                                                    }";
                          })
                          .DirectEvents(de =>
                          {
                              de.Click.Action = "Delete";
                              de.Click.Method = HttpMethod.GET;
                              de.Click.Confirmation.ConfirmRequest = true;
                              de.Click.Confirmation.Title = "Alert";
                              de.Click.Confirmation.Message = "Do you want to DELETE ?";
                              de.Click.ExtraParams.Add(new Parameter("ID", "#{FormReleaseList}.getSelectionModel().getSelected().getAt(0).getId()", ParameterMode.Raw));
                              de.Click.Failure = "Ext.Msg.notify('Error', result.errorMessage);";
                              de.Click.Success = "function(response, result) { " +
                                                 "  App.StoreFormReleaseList.reload({ callback: function() {}});" +
                                                 "}";
                          })
                          );
                  }));

              })
              .Store(
                  Html.X().Store()
                      .ID("StoreFormReleaseList")
                      .RemoteSort(true)
                      .PageSize(10)
                      .Sorters(sorts =>
                      {
                          sorts.Add(new DataSorter { Property = "ReleaseDate", Direction = Ext.Net.SortDirection.DESC });
                          sorts.Add(new DataSorter { Property = "TemplateCode", Direction = Ext.Net.SortDirection.ASC});
                          sorts.Add(new DataSorter { Property = "InvoiceSeries", Direction = Ext.Net.SortDirection.ASC });
                      })
                      .AutoLoad(true)
                      .Model(
                          Html.X().Model()
                              .IDProperty("Id")
                              .Fields(
                                  new ModelField("Id", ModelFieldType.Int),
                                  new ModelField("OrganizationCode", ModelFieldType.String),
                                  new ModelField("TemplateCode", ModelFieldType.String),
                                  new ModelField("InvoiceSeries", ModelFieldType.String),
                                  new ModelField("ReleaseDate", ModelFieldType.Date),
                                  new ModelField("ReleaseTotal", ModelFieldType.Int),
                                  new ModelField("ReleaseFrom", ModelFieldType.Int),
                                  new ModelField("ReleaseTo", ModelFieldType.Int),
                                  new ModelField("ReleaseUsed", ModelFieldType.Int),
                                  new ModelField("TaxAuthoritiesStatus", ModelFieldType.String),
                                  new ModelField("StartDate", ModelFieldType.Date),
                                  new ModelField("RecCreateBy", ModelFieldType.String),
                                  new ModelField("RecCreatedAt", ModelFieldType.Date),
                                  new ModelField("RecModifiedBy", ModelFieldType.String),
                                  new ModelField("RecModifiedAt", ModelFieldType.Date),
                                  new ModelField("Version", ModelFieldType.Int)
                              )
                      )
                      .Proxy(
                          Html.X().AjaxProxy()
                              .Url(Url.Action("GetData"))
                              .Reader(Html.X().JsonReader().RootProperty("data"))
                      )
              )
              .ColumnModel(
                  Html.X().Column().Text("Org").DataIndex("OrganizationCode").Width(75),
                  Html.X().Column().Text("Template Code").DataIndex("TemplateCode").MinWidth(150),
                  Html.X().Column().Text("Invoice Series").DataIndex("InvoiceSeries").Width(150),
                  Html.X().Column().Text("Tax Authorities Status").DataIndex("TaxAuthoritiesStatus").Width(85),
                  Html.X().Column().Text("Last User").DataIndex("RecModifiedBy").Width(85),
                  Html.X().DateColumn().Text("Last Updated").DataIndex("RecModifiedAt").Width(150).Format("dd/MM/yyyy H:mm:ss")
              )
              .BottomBar(items =>
              {
                  items.Add(Html.X().PagingToolbar().DisplayInfo(true)
                      .Items(
                          Html.X().Label().Text("Page size:"),
                          Html.X().ToolbarSpacer().Width(10),
                          Html.X().ComboBox().Width(80)
                              .Editable(false)
                              .Items(
                                  Html.X().ListItem().Text("10"),
                                  Html.X().ListItem().Text("15"),
                                  Html.X().ListItem().Text("20")
                              )
                              .SelectedItems(
                                  Html.X().ListItem().Value("10")
                              )
                              .Listeners(ls =>
                              {
                                  ls.Select.Fn = @"function (item, records) {
                                        var curPageSize = #{StoreFormReleaseList}.pageSize,
                                        wantedPageSize = parseInt(item.getValue(), 10);
                                        if (wantedPageSize != curPageSize) {
                                            #{StoreFormReleaseList}.pageSize = wantedPageSize;
                                            #{StoreFormReleaseList}.reload();
                                            #{StoreFormReleaseList}.loadPage(1);
                                        }
                                    }";
                              })
                      ));
              })
              .SelectionModel(
                  Html.X().CheckboxSelectionModel()
                      .Mode(SelectionMode.Single)
                      .Listeners(ls =>
                      {
                          ls.Select.Handler = "#{btnDelete}.enable();#{btnEdit}.enable();";
                          ls.Deselect.Handler = "if (!#{FormReleaseList}.hasSelection()) {#{btnDelete}.disable();#{btnEdit}.disable()}";
                      })
              )
              .ViewConfig(new GridView() { Listeners = { Refresh = { Handler = "#{btnDelete}.disable();#{btnEdit}.disable();" } } })
)

