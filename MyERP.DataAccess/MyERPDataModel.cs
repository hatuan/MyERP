#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using MyERP.DataAccess;

namespace MyERP.DataAccess	
{
	[NamingSettings(SourceStrategy = NamingSourceStrategy.Property, ResolveReservedWords = true, UseDelimitedSQL = true, WordBreak = "_")]
	public partial class EntitiesModel : OpenAccessContext, IEntitiesModelUnitOfWork
	{
		private static string connectionStringName = @"Connection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = AttributesMetadataSource.FromContext(typeof(EntitiesModel));
		
		public EntitiesModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public EntitiesModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public EntitiesModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public EntitiesModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public EntitiesModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Account> Accounts 
		{
			get
			{
				return this.GetAll<Account>();
			}
		}
		
		public IQueryable<User> Users 
		{
			get
			{
				return this.GetAll<User>();
			}
		}
		
		public IQueryable<Currency> Currencies 
		{
			get
			{
				return this.GetAll<Currency>();
			}
		}
		
		public IQueryable<BusinessPartner> BusinessPartners 
		{
			get
			{
				return this.GetAll<BusinessPartner>();
			}
		}
		
		public IQueryable<BusinessPartnerGroup> BusinessPartnerGroups 
		{
			get
			{
				return this.GetAll<BusinessPartnerGroup>();
			}
		}
		
		public IQueryable<PaymentTerm> PaymentTerms 
		{
			get
			{
				return this.GetAll<PaymentTerm>();
			}
		}
		
		public IQueryable<Job> Jobs 
		{
			get
			{
				return this.GetAll<Job>();
			}
		}
		
		public IQueryable<JobGroup> JobGroups 
		{
			get
			{
				return this.GetAll<JobGroup>();
			}
		}
		
		public IQueryable<TransactionDocument> TransactionDocuments 
		{
			get
			{
				return this.GetAll<TransactionDocument>();
			}
		}
		
		public IQueryable<TransactionLine> TransactionLines 
		{
			get
			{
				return this.GetAll<TransactionLine>();
			}
		}
		
		public IQueryable<Organization> Organizations 
		{
			get
			{
				return this.GetAll<Organization>();
			}
		}
		
		public IQueryable<TransactionType> TransactionTypes 
		{
			get
			{
				return this.GetAll<TransactionType>();
			}
		}
		
		public IQueryable<Module> Modules 
		{
			get
			{
				return this.GetAll<Module>();
			}
		}
		
		public IQueryable<Session> Sessions 
		{
			get
			{
				return this.GetAll<Session>();
			}
		}
		
		public IQueryable<Client> Clients 
		{
			get
			{
				return this.GetAll<Client>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "PostgreSql";
			backend.ProviderName = "Npgsql";
			backend.Logging.LogEvents = LoggingLevel.Normal;
			backend.Logging.StackTrace = true;
			backend.Logging.EventStoreCapacity = 10000;
			backend.Logging.MetricStoreCapacity = 3600;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of EntitiesModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of EntitiesModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IEntitiesModelUnitOfWork : IUnitOfWork
	{
		IQueryable<Account> Accounts
		{
			get;
		}
		IQueryable<User> Users
		{
			get;
		}
		IQueryable<Currency> Currencies
		{
			get;
		}
		IQueryable<BusinessPartner> BusinessPartners
		{
			get;
		}
		IQueryable<BusinessPartnerGroup> BusinessPartnerGroups
		{
			get;
		}
		IQueryable<PaymentTerm> PaymentTerms
		{
			get;
		}
		IQueryable<Job> Jobs
		{
			get;
		}
		IQueryable<JobGroup> JobGroups
		{
			get;
		}
		IQueryable<TransactionDocument> TransactionDocuments
		{
			get;
		}
		IQueryable<TransactionLine> TransactionLines
		{
			get;
		}
		IQueryable<Organization> Organizations
		{
			get;
		}
		IQueryable<TransactionType> TransactionTypes
		{
			get;
		}
		IQueryable<Module> Modules
		{
			get;
		}
		IQueryable<Session> Sessions
		{
			get;
		}
		IQueryable<Client> Clients
		{
			get;
		}
	}
}
#pragma warning restore 1591
