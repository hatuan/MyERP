//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 05/15/2020 9:53:42 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace MyERP.DataAccess
{
    public partial class EntitiesModel : DbContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new EntitiesModel object.
        /// </summary>
        public EntitiesModel() :
                base(@"name=Connection")
        {
            Configure();
        }

        /// <summary>
        /// Initializes a new EntitiesModel object using the connection string found in the 'EntitiesModel' section of the application configuration file.
        /// </summary>
        public EntitiesModel(string nameOrConnectionString) :
                base(nameOrConnectionString)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new EntitiesModel object.
        /// </summary>
        public EntitiesModel(DbConnection existingConnection, bool contextOwnsConnection) :
                base(existingConnection, contextOwnsConnection)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new EntitiesModel object.
        /// </summary>
        public EntitiesModel(ObjectContext objectContext, bool dbContextOwnsObjectContext) :
                base(objectContext, dbContextOwnsObjectContext)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new EntitiesModel object.
        /// </summary>
        public EntitiesModel(string nameOrConnectionString, DbCompiledModel model) :
                base(nameOrConnectionString, model)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new EntitiesModel object.
        /// </summary>
        public EntitiesModel(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) :
                base(existingConnection, model, contextOwnsConnection)
        {
            Configure();
        }

        private void Configure()
        {
            this.Configuration.AutoDetectChangesEnabled = true;
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = true;
            this.Configuration.ValidateOnSaveEnabled = true;
        }


        #endregion

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new Mapping.UserConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ClientConfiguration());
            modelBuilder.Configurations.Add(new Mapping.CurrencyConfiguration());
            modelBuilder.Configurations.Add(new Mapping.OrganizationConfiguration());
            modelBuilder.Configurations.Add(new Mapping.RoleConfiguration());
            modelBuilder.Configurations.Add(new Mapping.UserInRoleConfiguration());
            modelBuilder.Configurations.Add(new Mapping.UomConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemUomConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.BusinessPartnerGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.BusinessPartnerConfiguration());
            modelBuilder.Configurations.Add(new Mapping.SalesHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.SalesLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PosHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PosLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemDiscountGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.SalesPriceGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.SalesPriceConfiguration());
            modelBuilder.Configurations.Add(new Mapping.BusinessPartnerPriceGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.BusinessPartnerDiscGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.LocationConfiguration());
            modelBuilder.Configurations.Add(new Mapping.NoSequenceConfiguration());
            modelBuilder.Configurations.Add(new Mapping.NoSequenceLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.OptionConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PurchaseHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PurchaseLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.CashHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.CashLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.AccountConfiguration());
            modelBuilder.Configurations.Add(new Mapping.AccountsReceivableLedgerConfiguration());
            modelBuilder.Configurations.Add(new Mapping.AccountsPayableLedgerConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemLedgerEntryConfiguration());
            modelBuilder.Configurations.Add(new Mapping.GeneralLedgerEntryConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ReportConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PurchaseInvoiceHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.PurchaseInvoiceLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.VatConfiguration());
            modelBuilder.Configurations.Add(new Mapping.VatEntryConfiguration());
            modelBuilder.Configurations.Add(new Mapping.JobConfiguration());
            modelBuilder.Configurations.Add(new Mapping.StockkeepingUnitConfiguration());
            modelBuilder.Configurations.Add(new Mapping.JobGroupConfiguration());
            modelBuilder.Configurations.Add(new Mapping.GeneralJournalHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.GeneralJournalLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemJournalHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.ItemJournalLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferReceiptHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferReceiptLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferShipmentHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.TransferShipmentLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.EInvFormTypeConfiguration());
            modelBuilder.Configurations.Add(new Mapping.EInvFormReleaseConfiguration());
            modelBuilder.Configurations.Add(new Mapping.EInvoiceHeaderConfiguration());
            modelBuilder.Configurations.Add(new Mapping.EInvoiceLineConfiguration());
            modelBuilder.Configurations.Add(new Mapping.EInvoiceSignedConfiguration());
        }

        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserInRole> UserInRoles { get; set; }
        public virtual DbSet<Uom> Uoms { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemUom> ItemUoms { get; set; }
        public virtual DbSet<ItemGroup> ItemGroups { get; set; }
        public virtual DbSet<BusinessPartnerGroup> BusinessPartnerGroups { get; set; }
        public virtual DbSet<BusinessPartner> BusinessPartners { get; set; }
        public virtual DbSet<SalesHeader> SalesHeaders { get; set; }
        public virtual DbSet<SalesLine> SalesLines { get; set; }
        public virtual DbSet<PosHeader> PosHeaders { get; set; }
        public virtual DbSet<PosLine> PosLines { get; set; }
        public virtual DbSet<ItemDiscountGroup> ItemDiscountGroups { get; set; }
        public virtual DbSet<SalesPriceGroup> SalesPriceGroups { get; set; }
        public virtual DbSet<SalesPrice> SalesPrices { get; set; }
        public virtual DbSet<BusinessPartnerPriceGroup> BusinessPartnerPriceGroups { get; set; }
        public virtual DbSet<BusinessPartnerDiscGroup> BusinessPartnerDiscGroups { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<NoSequence> NoSequences { get; set; }
        public virtual DbSet<NoSequenceLine> NoSequenceLines { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<PurchaseHeader> PurchaseHeaders { get; set; }
        public virtual DbSet<PurchaseLine> PurchaseLines { get; set; }
        public virtual DbSet<CashHeader> CashHeaders { get; set; }
        public virtual DbSet<CashLine> CashLines { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountsReceivableLedger> AccountsReceivableLedgers { get; set; }
        public virtual DbSet<AccountsPayableLedger> AccountsPayableLedgers { get; set; }
        public virtual DbSet<ItemLedgerEntry> ItemLedgerEntries { get; set; }
        public virtual DbSet<GeneralLedgerEntry> GeneralLedgerEntries { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<PurchaseInvoiceHeader> PurchaseInvoiceHeaders { get; set; }
        public virtual DbSet<PurchaseInvoiceLine> PurchaseInvoiceLines { get; set; }
        public virtual DbSet<Vat> Vats { get; set; }
        public virtual DbSet<VatEntry> VatEntries { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<StockkeepingUnit> StockkeepingUnits { get; set; }
        public virtual DbSet<JobGroup> JobGroups { get; set; }
        public virtual DbSet<GeneralJournalHeader> GeneralJournalHeaders { get; set; }
        public virtual DbSet<GeneralJournalLine> GeneralJournalLines { get; set; }
        public virtual DbSet<ItemJournalHeader> ItemJournalHeaders { get; set; }
        public virtual DbSet<ItemJournalLine> ItemJournalLines { get; set; }
        public virtual DbSet<TransferHeader> TransferHeaders { get; set; }
        public virtual DbSet<TransferLine> TransferLines { get; set; }
        public virtual DbSet<TransferReceiptHeader> TransferReceiptHeaders { get; set; }
        public virtual DbSet<TransferReceiptLine> TransferReceiptLines { get; set; }
        public virtual DbSet<TransferShipmentHeader> TransferShipmentHeaders { get; set; }
        public virtual DbSet<TransferShipmentLine> TransferShipmentLines { get; set; }
        public virtual DbSet<EInvFormType> EInvFormTypes { get; set; }
        public virtual DbSet<EInvFormRelease> EInvFormReleases { get; set; }
        public virtual DbSet<EInvoiceHeader> EInvoiceHeaders { get; set; }
        public virtual DbSet<EInvoiceLine> EInvoiceLines { get; set; }
        public virtual DbSet<EInvoiceSigned> EInvoiceSigneds { get; set; }
    }
}
