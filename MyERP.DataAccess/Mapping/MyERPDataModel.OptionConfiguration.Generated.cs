//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 06/28/2018 6:16:44 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.Entity.ModelConfiguration;

namespace MyERP.DataAccess.Mapping
{

    public partial class OptionConfiguration : EntityTypeConfiguration<Option>
    {

        public OptionConfiguration()
        {
            this
                .HasKey(p => p.Id)
                .ToTable("option", "dbo");
            // Properties:
            this
                .Property(p => p.Id)
                    .HasColumnName(@"id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("bigint");
            this
                .Property(p => p.SalesPosSequenceId)
                    .HasColumnName(@"sales_pos_sequence_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.SalesOrderSequenceId)
                    .HasColumnName(@"sales_order_sequence_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.SalesShipmentSeqId)
                    .HasColumnName(@"sales_shipment_seq_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.SaleInvoiceSeqId)
                    .HasColumnName(@"sale_invoice_seq_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.PurchOrderSequenceId)
                    .HasColumnName(@"purch_order_sequence_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.PurchReceiveSeqId)
                    .HasColumnName(@"purch_receive_seq_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.PurchInvoiceSeqId)
                    .HasColumnName(@"purch_invoice_seq_id")
                    .HasColumnType("bigint");
            this
                .Property(p => p.ClientId)
                    .HasColumnName(@"client_id")
                    .IsRequired()
                    .HasColumnType("bigint");
            this
                .Property(p => p.OrganizationId)
                    .HasColumnName(@"organization_id")
                    .IsRequired()
                    .HasColumnType("bigint");
            this
                .Property(p => p.Status)
                    .HasColumnName(@"status")
                    .IsRequired()
                    .HasColumnType("smallint");
            this
                .Property(p => p.Version)
                    .HasColumnName(@"version")
                    .IsRequired()
                    .HasColumnType("bigint");
            this
                .Property(p => p.RecCreatedAt)
                    .HasColumnName(@"rec_created_at")
                    .IsRequired()
                    .HasColumnType("datetime2");
            this
                .Property(p => p.RecCreatedBy)
                    .HasColumnName(@"rec_created_by")
                    .IsRequired()
                    .HasColumnType("bigint");
            this
                .Property(p => p.RecModifiedBy)
                    .HasColumnName(@"rec_modified_by")
                    .IsRequired()
                    .HasColumnType("bigint");
            this
                .Property(p => p.RecModifiedAt)
                    .HasColumnName(@"rec_modified_at")
                    .IsRequired()
                    .HasColumnType("datetime2");
            // Associations:
            this
                .HasRequired(p => p.Client)
                    .WithMany()
                .HasForeignKey(p => p.ClientId)
                    .WillCascadeOnDelete(false);
            this
                .HasRequired(p => p.Organization)
                    .WithMany()
                .HasForeignKey(p => p.OrganizationId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.SalesPosSequence)
                    .WithMany()
                .HasForeignKey(p => p.SalesPosSequenceId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.SalesOrderSequence)
                    .WithMany()
                .HasForeignKey(p => p.SalesOrderSequenceId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.SalesShipmentSequence)
                    .WithMany()
                .HasForeignKey(p => p.SalesShipmentSeqId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.SalesInvoiceSequence)
                    .WithMany()
                .HasForeignKey(p => p.SaleInvoiceSeqId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.PurchOrderSequence)
                    .WithMany()
                .HasForeignKey(p => p.PurchOrderSequenceId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.PurchReceiveSequence)
                    .WithMany()
                .HasForeignKey(p => p.PurchReceiveSeqId)
                    .WillCascadeOnDelete(false);
            this
                .HasOptional(p => p.PurchInvoiceSequence)
                    .WithMany()
                .HasForeignKey(p => p.PurchInvoiceSeqId)
                    .WillCascadeOnDelete(false);
            this
                .HasRequired(p => p.RecCreatedByUser)
                    .WithMany()
                .HasForeignKey(p => p.RecCreatedBy)
                    .WillCascadeOnDelete(false);
            OnCreated();
        }

        partial void OnCreated();

    }
}
