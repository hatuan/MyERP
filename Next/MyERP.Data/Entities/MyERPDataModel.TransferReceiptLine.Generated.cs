//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 04/21/2021 10:23:24 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace MyERP.DataAccess
{
    public partial class TransferReceiptLine : INotifyPropertyChanging, INotifyPropertyChanged
    {

        public TransferReceiptLine()
        {
            OnCreated();
        }

        #region Properties

        [Key]
        [Required()]
        public virtual long Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    this.OnIdChanging(value);
                    OnPropertyChanging("Id");
                    _Id = value;
                    this.OnIdChanged();
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _Id;

        [Required()]
        public virtual long TransferReceiptHeaderId
        {
            get
            {
                return _TransferReceiptHeaderId;
            }
            set
            {
                if (_TransferReceiptHeaderId != value)
                {
                    this.OnTransferReceiptHeaderIdChanging(value);
                    OnPropertyChanging("TransferReceiptHeaderId");
                    _TransferReceiptHeaderId = value;
                    this.OnTransferReceiptHeaderIdChanged();
                    OnPropertyChanged("TransferReceiptHeaderId");
                }
            }
        }
        private long _TransferReceiptHeaderId;

        #endregion

        #region Navigation Properties

        public virtual TransferReceiptHeader TransferReceiptHeader
        {
            get
            {
                return _TransferReceiptHeader;
            }
            set
            {
                if (_TransferReceiptHeader != value)
                {
                    this.OnTransferReceiptHeaderChanging(value);
                    OnPropertyChanging("TransferReceiptHeader");
                    _TransferReceiptHeader = value;
                    this.OnTransferReceiptHeaderChanged();
                    OnPropertyChanged("TransferReceiptHeader");
                }
            }
        }
        private TransferReceiptHeader _TransferReceiptHeader;

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnTransferReceiptHeaderIdChanging(long value);
        partial void OnTransferReceiptHeaderIdChanged();
        partial void OnTransferReceiptHeaderChanging(TransferReceiptHeader value);
        partial void OnTransferReceiptHeaderChanged();

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        protected void OnPropertyChanging(string propertyName) {

          if (PropertyChanging != null)
            PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
