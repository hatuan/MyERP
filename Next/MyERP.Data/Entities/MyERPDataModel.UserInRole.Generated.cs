//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 04/21/2021 10:23:24 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace MyERP.DataAccess
{
    public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
    {

        public UserInRole()
        {
            OnCreated();
        }

        #region Properties

        [Key]
        [Required()]
        public virtual long Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    this.OnIdChanging(value);
                    OnPropertyChanging("Id");
                    _Id = value;
                    this.OnIdChanged();
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _Id;

        [Required()]
        public virtual long RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if (_RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    OnPropertyChanging("RoleId");
                    _RoleId = value;
                    this.OnRoleIdChanged();
                    OnPropertyChanged("RoleId");
                }
            }
        }
        private long _RoleId;

        [Required()]
        public virtual long UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    this.OnUserIdChanging(value);
                    OnPropertyChanging("UserId");
                    _UserId = value;
                    this.OnUserIdChanged();
                    OnPropertyChanged("UserId");
                }
            }
        }
        private long _UserId;

        #endregion

        #region Navigation Properties

        public virtual User User
        {
            get
            {
                return _User;
            }
            set
            {
                if (_User != value)
                {
                    this.OnUserChanging(value);
                    OnPropertyChanging("User");
                    _User = value;
                    this.OnUserChanged();
                    OnPropertyChanged("User");
                }
            }
        }
        private User _User;
        public virtual Role Role
        {
            get
            {
                return _Role;
            }
            set
            {
                if (_Role != value)
                {
                    this.OnRoleChanging(value);
                    OnPropertyChanging("Role");
                    _Role = value;
                    this.OnRoleChanged();
                    OnPropertyChanged("Role");
                }
            }
        }
        private Role _Role;

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnRoleIdChanging(long value);
        partial void OnRoleIdChanged();
        partial void OnUserIdChanging(long value);
        partial void OnUserIdChanged();
        partial void OnUserChanging(User value);
        partial void OnUserChanged();
        partial void OnRoleChanging(Role value);
        partial void OnRoleChanged();

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        protected void OnPropertyChanging(string propertyName) {

          if (PropertyChanging != null)
            PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
